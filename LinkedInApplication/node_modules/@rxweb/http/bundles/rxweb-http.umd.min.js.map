{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@rxweb/http/functions/util.ts","ng://@rxweb/http/functions/create-query-path.ts","ng://@rxweb/http/models/http-request.ts","ng://@rxweb/http/functions/request-body.ts","ng://@rxweb/http/core/http-request-container.ts","ng://@rxweb/http/models/http-response.ts","ng://@rxweb/http/models/xhr-context.ts","ng://@rxweb/http/models/abstract-request-filter.ts","ng://@rxweb/http/domain/xhr-request.ts","ng://@rxweb/http/domain/rx-http-response.ts","ng://@rxweb/http/functions/create-instance.ts","ng://@rxweb/http/domain/rx-http.ts","ng://@rxweb/http/functions/get-instance-container.ts","ng://@rxweb/http/core/http-client-config.ts","ng://@rxweb/http/decorators/http.decorator.ts","ng://@rxweb/http/decorators/inmemory.decorator.ts","ng://@rxweb/http/decorators/filter.decorator.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","isFormData","formValue","FormData","isBlob","Blob","isArrayBuffer","ArrayBuffer","createQueryPath","config","params","join","getParams","queryParams","keys","forEach","key","slice","getQueryParams","HttpRequest","body","headers","host","isHttps","method","path","responseType","scheme","fullPath","defineProperty","_isHttps","value","replace","_fullPath","getContentType","type","Array","isArray","serializeBody","convertPatchBody","JSON","stringify","String","object","patchBody","col","push","op","requestBody","baseConfig","serviceContainer","instance","uri","hostUri","hostKey","hostURIs","filter","name","default","window","location","origin","getHostUri","startsWith","undefined","httpRequestContainer","class_1","serviceContainers","register","target","registerConfig","httpClientConfig","get","getConfig","XhrContext","request","response","HttpResponse","_result","isInMemoryResponse","XhrRequest","onComplete","onRequestError","badRequest","_this","onLoad","arr","headerMap","statusCode","xhr","status","statusText","getAllResponseHeaders","trim","split","line","parts","header","shift","responseUrl","responseURL","responseText","isSuccess","indexOf","originalBody","parse","ex","dispose","onError","error","console","XMLHttpRequest","open","setRequestHeader","contentType","addEventListener","withCredentials","send","removeEventListener","RxHttpResponse","filters","inMemoryFilter","_index","_onResponse","onRequestExecuting","context","result","_onSuccess","_onError","executeFilterOnRequest","process","success","callFilter","bind","filterConfig","runsOn","modelInstance","model","objectArguments","classInstance","create","Reflect","construct","createInstance","args","onRequest","resultType","onSuccess","onResponse","next","complete","RxHttp","getFilters","_baseConfig","filterService","_serviceContainers","requestFilters","getInMemoryFilter","isInMemory","Observable","subscriber","container","constructor","__proto__","isLoop","getInstanceContainer","lookup","configs","propNames","subscriptions","jObject","propName","subscribe","X","post","put","patch","delete","HttpClientConfig"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function isFormData(formValue:any) {\r\n    return typeof FormData !== 'undefined' && formValue instanceof FormData;\r\n}\r\n\r\nexport function isBlob(formValue: any) {\r\n    return typeof Blob !== 'undefined' && formValue instanceof Blob;\r\n}\r\n\r\nexport function isArrayBuffer(formValue: any) {\r\n    return typeof ArrayBuffer !== 'undefined' && formValue instanceof ArrayBuffer;\r\n}\r\n\r\n//copied from : https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\r\nexport function extractHeaders(headers:any) {\r\n\r\n    var arr = headers.trim().split(/[\\r\\n]+/);\r\n    var headerMap = {};\r\n\r\n    arr.forEach(function (line) {\r\n        var parts = line.split(': ');\r\n        var header = parts.shift();\r\n        var value = parts.join(': ');\r\n        headerMap[header] = value;\r\n    });\r\n    return headerMap;\r\n}\r\n\r\n","import { HttpRequestConfig } from \"../interface/http-request-config\";\r\nexport function createQueryPath(config: HttpRequestConfig) {\r\n    return  `${getParams(config)}${getQueryParams(config)}`;\r\n}\r\n\r\nfunction getParams(config: HttpRequestConfig) {\r\n    let params = '';\r\n    if (config && config.params && config.params.length > 0)\r\n        params = `/${config.params.join('/')}`;\r\n    return params;\r\n}\r\n\r\nfunction getQueryParams(config:HttpRequestConfig) {\r\n    let queryParams = '?';\r\n    if (config && config.queryParams)\r\n        Object.keys(config.queryParams).forEach(key => {\r\n            queryParams += `${key}=${config.queryParams[key]}&`\r\n        })\r\n    return queryParams.slice(0, queryParams.length - 1);\r\n}","import { isFormData, isBlob, isArrayBuffer } from \"../functions/util\";\r\nimport { createQueryPath } from \"../functions/create-query-path\";\r\n\r\nexport class HttpRequest {\r\n    constructor(\r\n        public body: any,\r\n        public headers: { [key: string]: any },\r\n        public host: string,\r\n        isHttps: boolean,\r\n        public method: string,\r\n        public path: string,\r\n        public params: any[],\r\n        public queryParams: { [key: string]: any },\r\n        public responseType: string,\r\n        public scheme: string,\r\n        fullPath?: string,\r\n    ) {\r\n        if (!responseType)\r\n            this.responseType = 'json';\r\n        this.isHttps = isHttps;\r\n        if (fullPath)\r\n            this.fullPath = fullPath;\r\n    }\r\n    private _isHttps: boolean;\r\n\r\n    private _fullPath: string;\r\n\r\n    get isHttps() {\r\n        return this._isHttps;\r\n    }\r\n\r\n    set isHttps(value: boolean) {\r\n        this._isHttps = value;\r\n        if (value)\r\n            this.fullPath = this.fullPath.replace(\"http:\", \"https:\");\r\n    }\r\n\r\n    get fullPath() {\r\n        return this._fullPath ? this._fullPath : `${this.host}/${this.path}${createQueryPath({ params: this.params, queryParams: this.queryParams })}`;\r\n    }\r\n\r\n    set fullPath(value) {\r\n        this._fullPath = value;\r\n    }\r\n\r\n    getContentType() {\r\n\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n\r\n        if (isFormData(this.body)) {\r\n            return null;\r\n        }\r\n\r\n        if (isBlob(this.body)) {\r\n            return this.body.type || null;\r\n        }\r\n        if (isArrayBuffer(this.body)) {\r\n            return null;\r\n        }\r\n\r\n        if (typeof this.body === 'string') {\r\n            return 'text/plain';\r\n        }\r\n\r\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\r\n            Array.isArray(this.body)) {\r\n            return 'application/json';\r\n        }\r\n        return null;\r\n    }\r\n\r\n    serializeBody(): string {\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n\r\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\r\n            typeof this.body === 'string') {\r\n            return this.body;\r\n        }\r\n        if (this.method == 'PATCH')\r\n            this.body = this.convertPatchBody(this.body);\r\n\r\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\r\n            Array.isArray(this.body)) {\r\n            return JSON.stringify(this.body);\r\n        }\r\n        if (this.body)\r\n            return String(this.body);\r\n        return '';\r\n    }\r\n\r\n    private convertPatchBody(object: Object): any {\r\n        let patchBody = [];\r\n        for (var col in object) {\r\n            patchBody.push({\r\n                'op': 'replace',\r\n                'path': '/' + col,\r\n                'value': object[col]\r\n            });\r\n        }\r\n        return patchBody;\r\n    }\r\n}","import { ServiceContainerConfig } from \"../interface/service-container-config\";\r\nimport { HttpRequestConfig } from \"../interface/http-request-config\";\r\nimport { HttpRequest} from '../models/http-request'\r\nimport { HttpRequestBodyConfig } from \"../interface/http-request-body-config\";\r\nimport { BaseHttpClientConfig } from \"../interface/base-http-client-config\";\r\n\r\nexport function requestBody(method: string, baseConfig: any, serviceContainer: ServiceContainerConfig, config: HttpRequestConfig | HttpRequestBodyConfig | string, instance: any): HttpRequest {\r\n        \r\n    if (!(typeof config == \"string\")) {\r\n        let uri = getHostUri(baseConfig, serviceContainer, config);\r\n        let path = (config && config.path) ? config.path : serviceContainer.config.path;\r\n        let isHttps = uri.startsWith(\"https://\");\r\n        return new HttpRequest(\r\n            config ? (<HttpRequestBodyConfig>config).body : undefined,\r\n            {},\r\n            uri,\r\n            isHttps,\r\n            method,\r\n            path,\r\n            config && config.params ? config.params : [],\r\n            config && config.queryParams ? config.queryParams : {},\r\n            config ? config.responseType : undefined,\r\n            isHttps ? 'https' : 'http',\r\n        );\r\n    } else {\r\n        let isHttps = config.startsWith(\"https://\");\r\n        return new HttpRequest(\r\n            undefined,\r\n            {},\r\n            config,\r\n            config.startsWith(\"https://\"),\r\n            method,\r\n            config,\r\n            [],\r\n            {},\r\n            undefined,\r\n            isHttps ? 'https' : 'http',\r\n            config,\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nfunction getHostUri(baseConfig: BaseHttpClientConfig, serviceContainer: ServiceContainerConfig, config: HttpRequestConfig) {\r\n    if (config && config.hostUri)\r\n        return config.hostUri;\r\n    if (serviceContainer && serviceContainer.config && serviceContainer.config.hostKey)\r\n        return baseConfig.hostURIs.filter(t => t.name == serviceContainer.config.hostKey)[0].uri;\r\n    if (baseConfig.hostURIs)\r\n        return baseConfig.hostURIs.filter(t => t.default == true)[0].uri;\r\n    return window.location.origin;\r\n}\r\n\r\n\r\n\r\n","import { ServiceContainerConfig } from \"../interface/service-container-config\";\r\nimport { BaseHttpClientConfig } from \"../interface/base-http-client-config\";\r\n\r\nexport const httpRequestContainer:\r\n    {\r\n        register(target: any, config: any,type:string);\r\n        get(target: any): ServiceContainerConfig[];\r\n        getConfig();\r\n        registerConfig(baseConfig: BaseHttpClientConfig);\r\n    } = new (class {\r\n\r\n        private serviceContainers: ServiceContainerConfig[] = new Array<ServiceContainerConfig>();\r\n        private baseConfig: BaseHttpClientConfig;\r\n\r\n        register(target: any, config: any, type: string): void {\r\n            let serviceContainer = this.serviceContainers.filter(t => t.target == target && t.type == type)[0]\r\n            if (!serviceContainer)\r\n                this.serviceContainers.push({ target: target, config: config,type:type });\r\n        }\r\n\r\n        registerConfig(httpClientConfig: BaseHttpClientConfig) {\r\n            this.baseConfig = httpClientConfig;\r\n        }\r\n    \r\n\r\n\r\n        get(target: any): ServiceContainerConfig[] {\r\n            return this.serviceContainers.filter(t => t.target == target);\r\n        }\r\n\r\n\r\n        getConfig() {\r\n            return this.baseConfig;\r\n        }\r\n\r\n        \r\n\r\n    })();\r\n","export class HttpResponse {\r\n\r\n    constructor() { }\r\n\r\n    isInMemoryResponse: boolean;\r\n    statusCode: number;\r\n    statusText: string;\r\n    headers: { [key: string]: any };\r\n    body: any;\r\n    contentLength: number;\r\n    contentType: string;\r\n    responseUrl: string;\r\n}","import { HttpRequest } from './http-request';\r\nimport { HttpResponse } from './http-response';\r\nexport class XhrContext {\r\n    private _result: any;\r\n    constructor(public request: HttpRequest, public response: HttpResponse) {\r\n        if (!this.response)\r\n            this.response = new HttpResponse();\r\n    }\r\n\r\n    set result(value: any) {\r\n        this._result = value;\r\n        this.response.isInMemoryResponse = true;\r\n    }\r\n    get result() {\r\n        return this._result;\r\n    }\r\n}","import { XhrContext } from \"../models/xhr-context\";\r\n\r\nexport abstract class AbstractRequestFilter  {\r\n\r\n    abstract onRequest: (context: XhrContext) => void;\r\n\r\n    onRequestExecuting: (context: XhrContext) => void;\r\n\r\n}","import { HttpRequest, HttpResponse} from '../models'\r\nimport { extractHeaders } from \"../functions/util\";\r\n\r\nexport class XhrRequest {\r\n    xhr: XMLHttpRequest;\r\n\r\n    constructor(private request: HttpRequest, private onComplete: Function, private onRequestError: Function, private badRequest: Function) {\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open(request.method, request.fullPath);\r\n        Object.keys(request.headers).forEach(t => xhr.setRequestHeader(t, request.headers[t]));\r\n\r\n        if (!request.headers['Accept'])\r\n            xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\r\n\r\n        if (!request.headers['Content-Type']) {\r\n            const contentType = request.getContentType();\r\n            if (contentType !== null) {\r\n                xhr.setRequestHeader('Content-Type', contentType);\r\n            }\r\n        }\r\n\r\n        xhr.addEventListener('load', this.onLoad);\r\n        xhr.addEventListener('error', this.onError);\r\n        xhr.withCredentials = true;\r\n        xhr.send(request.serializeBody());\r\n\r\n        this.xhr = xhr;\r\n    }\r\n\r\n    onLoad = () => {\r\n        let response = new HttpResponse();\r\n        response.statusCode = this.xhr.status\r\n        response.statusText = this.xhr.statusText || 'OK';\r\n        response.headers = extractHeaders(this.xhr.getAllResponseHeaders())\r\n        response.responseUrl = this.xhr.responseURL;\r\n        let body: any = null;\r\n\r\n        if (response.statusCode !== 204)\r\n            body = typeof this.xhr.response === 'undefined' ? this.xhr.responseText : this.xhr.response;\r\n\r\n        if (response.statusCode === 0)\r\n            response.statusCode = !!body ? 200 : 0;\r\n\r\n        let isSuccess = response.statusCode >= 200 && response.statusCode < 300;\r\n        if (this.request.responseType === 'json' && response.headers[\"content-type\"] && response.headers[\"content-type\"].indexOf(\"json\") != -1 && typeof body === 'string') {\r\n            const originalBody = body;\r\n            body = body.replace(/^\\)\\]\\}',?\\n/, '');\r\n            try {\r\n                body = body !== '' ? JSON.parse(body) : null;\r\n            } catch (ex) {\r\n                body = originalBody;\r\n                if (isSuccess) {\r\n                    isSuccess = false;\r\n                    body = { ex, body: body }\r\n                }\r\n            }\r\n        }\r\n        response.body = body;\r\n        if (isSuccess) {\r\n            this.onComplete(response)\r\n            this.dispose()\r\n        }\r\n        else\r\n            this.onError(response);\r\n        \r\n    }\r\n\r\n    onError = (error) => {\r\n        if (this.xhr.status == 400 && this.badRequest)\r\n            this.badRequest(typeof this.xhr.response === 'undefined' ? this.xhr.responseText : this.xhr.response)\r\n        else if (this.onRequestError)\r\n            this.onRequestError({\r\n                responseUrl: this.xhr.responseURL,\r\n                error: error,\r\n                statusCode: this.xhr.status || 0,\r\n                statusText: this.xhr.statusText || 'Unknown Error'\r\n            });\r\n        else\r\n            console.error(error);\r\n        this.dispose();\r\n    }\r\n\r\n\r\n    dispose() {\r\n        if (this.xhr) {\r\n            this.xhr.removeEventListener('load', this.onLoad);\r\n            this.xhr.removeEventListener('error', this.onError);\r\n        }\r\n        this.xhr = null;\r\n        this.request = null;\r\n        this.onComplete = null;\r\n        this.onRequestError = null;\r\n        this.badRequest = null;\r\n    }\r\n}","import { XhrFilterConfig } from \"../interface/xhr-filter-config\";\r\nimport { XhrRequest } from \"./xhr-request\";\r\nimport { ResponseFilter } from \"../interface/response-filter\";\r\nimport { createInstance } from \"../functions/create-instance\";\r\nimport { HttpRequest, HttpResponse, XhrContext } from '../models'\r\n\r\nexport class RxHttpResponse {\r\n    private _index: number = 0;\r\n    private _onSuccess: Function;\r\n    private _onError: any;\r\n    private _onResponse: ResponseFilter[] = new Array<ResponseFilter>();\r\n\r\n    constructor(private request: HttpRequest, private filters: XhrFilterConfig[], private inMemoryFilter: XhrFilterConfig, private onError: (response: HttpResponse) => void, private badRequest: (result: any) => void) {\r\n\r\n    }\r\n\r\n\r\n    process(type: string, success?: any) {\r\n        this._onSuccess = this.onComplete(type, success);\r\n        this._onError = success;\r\n        this.inMemoryFilter ? this.callFilter(this.inMemoryFilter) : this.executeFilterOnRequest()\r\n    }\r\n\r\n\r\n    private executeFilterOnRequest() {\r\n        if (this.filters && this.filters.length > 0 && this.filters.length > this._index) {\r\n            this.callFilter(this.filters[this._index])\r\n        } else\r\n            new XhrRequest(this.request, this._onSuccess, this.onRequestError.bind(this), this.badRequest);\r\n    }\r\n\r\n    private callFilter(filterConfig: XhrFilterConfig) {\r\n        if (!filterConfig.runsOn || filterConfig.runsOn.indexOf(this.request.method) != -1) {\r\n            let modelInstance = createInstance(filterConfig.model, filterConfig.args || []) as any;\r\n            modelInstance.onRequestExecuting = this.onRequestExecuting()\r\n            this._index++;\r\n            modelInstance.onRequest(new XhrContext(this.request, new HttpResponse()));\r\n            if (modelInstance[\"onResponse\"])\r\n                this._onResponse.push(modelInstance);\r\n        } else\r\n            this._index++;\r\n\r\n    }\r\n\r\n    private onComplete(resultType: string, onSuccess: any) {\r\n        return (response: HttpResponse) => {\r\n            if (this._onResponse.length > 0 && !response.isInMemoryResponse)\r\n                this._onResponse.forEach(t => t.onResponse(response))\r\n            onSuccess.next(response.body);\r\n            onSuccess.complete();\r\n        }\r\n    }\r\n\r\n    onRequestExecuting = () => {\r\n        return (context: XhrContext) => {\r\n            if (context.response.statusCode) {\r\n                let response = { ...context.response, ...{ body: context.result } }\r\n                if (response.statusCode >= 200 && response.statusCode < 300)\r\n                    this._onSuccess(response);\r\n                else {\r\n                    this._onError.error(response);\r\n                    this.onError(response);\r\n                }\r\n\r\n            } else\r\n                this.executeFilterOnRequest()\r\n        }\r\n    }\r\n\r\n    onRequestError(response: any) {\r\n        this._onError.error(response);\r\n        if (this.onError)\r\n            this.onError(response);\r\n    }\r\n\r\n}","export function createInstance(model: any, objectArguments: any[]) {\r\n    let classInstance = Object.create(model.prototype)\r\n    try{\r\n        model.apply(classInstance, objectArguments);\r\n    }catch(ex){\r\n        ///resolution of issue https://github.com/rxweb/rxweb/issues/188\r\n        classInstance = Reflect.construct(model,objectArguments);\r\n    }\r\n    return classInstance;\r\n}","import { HttpRequestConfig} from \"../interface/http-request-config\";\r\nimport { requestBody } from \"../functions/request-body\";\r\nimport { getInstanceContainer } from \"../functions/get-instance-container\";\r\nimport { ServiceContainerConfig } from \"../interface/service-container-config\";\r\nimport { RxHttpResponse } from \"./rx-http-response\";\r\nimport { httpRequestContainer } from \"../core/http-request-container\";\r\nimport { XhrFilterConfig } from \"../interface/xhr-filter-config\";\r\nimport { Observable, forkJoin , Subscription } from \"rxjs\";\r\nimport { BaseHttpClientConfig } from \"../interface/base-http-client-config\";\r\nimport { HttpRequestBodyConfig } from \"../interface/http-request-body-config\";\r\nimport { LookupHttpRequestConfig } from \"../interface/lookup-http-request-config\";\r\nimport { HttpResponse } from '../models'\r\nexport class RxHttp {\r\n\r\n    path: string;\r\n\r\n    private _serviceContainers: ServiceContainerConfig[]\r\n    private _baseConfig: BaseHttpClientConfig;\r\n\r\n    onError: (response: HttpResponse) => void;\r\n    badRequest: (result: any) => void;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    private getFilters() {\r\n        let filters = (this._baseConfig && this._baseConfig.filters) ? this._baseConfig.filters : [];\r\n        let filterService = this._serviceContainers.filter(t => t.type == \"filter\")[0];\r\n        let requestFilters = [];\r\n        if (filterService)\r\n            filterService.config.forEach(t => requestFilters.push(t));\r\n        filters.forEach(t => requestFilters.push(t));\r\n        return requestFilters;\r\n    }\r\n\r\n    private getInMemoryFilter(): XhrFilterConfig {\r\n        let inMemory = this._serviceContainers.filter(t => t.type == \"inmemory\")[0];\r\n        if (inMemory && this._baseConfig && this._baseConfig.filters)\r\n            return this._baseConfig.filters.filter(t => t.isInMemory)[0];\r\n        return null;\r\n    }\r\n\r\n    private request<T>(method: string, config: HttpRequestConfig | HttpRequestBodyConfig | string): Observable<T> {\r\n        return new Observable(subscriber => {\r\n            if (!this._baseConfig)\r\n                this._baseConfig = httpRequestContainer.getConfig() || {};\r\n            if (!this._serviceContainers)\r\n                this._serviceContainers = getInstanceContainer(this);\r\n            let serviceContainer = this._serviceContainers.filter(t => t.type == \"http\")[0]\r\n            let request = requestBody(method, this._baseConfig, serviceContainer, config, this);\r\n            if (request) {\r\n                let error = this._baseConfig ? this._baseConfig.onError : null;\r\n                let response = new RxHttpResponse(request, this.getFilters(), this.getInMemoryFilter(), this.onError || error, this.badRequest);\r\n                response.process('subscribe', subscriber);\r\n            } else {\r\n                subscriber.next(null);\r\n                subscriber.complete();\r\n            }\r\n        })\r\n    }\r\n\r\n    lookup<T>(configs: LookupHttpRequestConfig[]): Observable<T> {\r\n        return new Observable(subscriber => {\r\n            let propNames = [];\r\n            let subscriptions = [];\r\n            let jObject:any = {};\r\n            configs.forEach(t => {\r\n                propNames.push(t.propName);\r\n                subscriptions.push(this.get(t).subscribe(X => {\r\n                    jObject[t.propName] = X;\r\n                    if (Object.keys(jObject).length == propNames.length) {\r\n                        subscriber.next(jObject);\r\n                        subscriber.complete();\r\n                    }\r\n                }));\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n\r\n    get<T>(config?: HttpRequestConfig | string): Observable<T>  {\r\n        return this.request('GET', config);\r\n    }\r\n\r\n    post<T>(config: HttpRequestBodyConfig | string): Observable<T>  {\r\n        return this.request('POST', config);\r\n    }\r\n\r\n    put<T>(config: HttpRequestBodyConfig | string): Observable<T> {\r\n        return this.request('PUT', config);\r\n    }\r\n\r\n    patch<T>(config: HttpRequestBodyConfig | string): Observable<T>  {\r\n        return this.request('PATCH', config);\r\n    }\r\n\r\n    delete<T>(config: HttpRequestBodyConfig | string): Observable<T>  {\r\n        return this.request('DELETE', config);\r\n    }\r\n}","import { httpRequestContainer } from \"../core/http-request-container\";\r\n\r\nexport function getInstanceContainer(instance: any) {\r\n    let container = httpRequestContainer.get(instance.constructor);\r\n    let prototype = (!container || container.length == 0) ? instance.__proto__ : {};\r\n    if (prototype.__proto__) {\r\n        let isLoop = false;\r\n        do {\r\n            isLoop = prototype.__proto__.constructor != Object;\r\n            if (isLoop) {\r\n                container = httpRequestContainer.get(prototype.__proto__.constructor);\r\n                isLoop = container == undefined;\r\n            }\r\n        }while(isLoop)\r\n    }\r\n    return container;\r\n}","import { httpRequestContainer } from \"./http-request-container\";\r\nimport { BaseHttpClientConfig } from \"../interface/base-http-client-config\";\r\n\r\nexport class HttpClientConfig {\r\n\r\n    static register(config: BaseHttpClientConfig) {\r\n        httpRequestContainer.registerConfig(config);\r\n    }\r\n}","import { HttpConfig } from \"../interface/http-config\";\r\nimport { httpRequestContainer } from \"../core/http-request-container\";\r\n\r\nexport function http(config?: HttpConfig) {\r\n    return function (target) {\r\n        httpRequestContainer.register(target,config,\"http\")\r\n    }\r\n}   ","import { httpRequestContainer } from \"../core/http-request-container\";\r\n\r\nexport function inMemory() {\r\n    return function (target) {\r\n        httpRequestContainer.register(target, null,\"inmemory\")\r\n    }\r\n}   ","import { XhrFilterConfig } from \"../interface/xhr-filter-config\";\r\nimport { httpRequestContainer } from \"../core/http-request-container\";\r\n\r\nexport function xhrFilter(config: XhrFilterConfig[]) {\r\n    return function (target) {\r\n        httpRequestContainer.register(target, config,\"filter\")\r\n    }\r\n}   "]}