import { isFormData, isBlob, isArrayBuffer } from "../functions/util";
import { createQueryPath } from "../functions/create-query-path";
var HttpRequest = /** @class */ (function () {
    function HttpRequest(body, headers, host, isHttps, method, path, params, queryParams, responseType, scheme, fullPath) {
        this.body = body;
        this.headers = headers;
        this.host = host;
        this.method = method;
        this.path = path;
        this.params = params;
        this.queryParams = queryParams;
        this.responseType = responseType;
        this.scheme = scheme;
        if (!responseType)
            this.responseType = 'json';
        this.isHttps = isHttps;
        if (fullPath)
            this.fullPath = fullPath;
    }
    Object.defineProperty(HttpRequest.prototype, "isHttps", {
        get: function () {
            return this._isHttps;
        },
        set: function (value) {
            this._isHttps = value;
            if (value)
                this.fullPath = this.fullPath.replace("http:", "https:");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HttpRequest.prototype, "fullPath", {
        get: function () {
            return this._fullPath ? this._fullPath : this.host + "/" + this.path + createQueryPath({ params: this.params, queryParams: this.queryParams });
        },
        set: function (value) {
            this._fullPath = value;
        },
        enumerable: true,
        configurable: true
    });
    HttpRequest.prototype.getContentType = function () {
        if (this.body === null) {
            return null;
        }
        if (isFormData(this.body)) {
            return null;
        }
        if (isBlob(this.body)) {
            return this.body.type || null;
        }
        if (isArrayBuffer(this.body)) {
            return null;
        }
        if (typeof this.body === 'string') {
            return 'text/plain';
        }
        if (typeof this.body === 'object' || typeof this.body === 'number' ||
            Array.isArray(this.body)) {
            return 'application/json';
        }
        return null;
    };
    HttpRequest.prototype.serializeBody = function () {
        if (this.body === null) {
            return null;
        }
        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||
            typeof this.body === 'string') {
            return this.body;
        }
        if (this.method == 'PATCH')
            this.body = this.convertPatchBody(this.body);
        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||
            Array.isArray(this.body)) {
            return JSON.stringify(this.body);
        }
        if (this.body)
            return String(this.body);
        return '';
    };
    HttpRequest.prototype.convertPatchBody = function (object) {
        var patchBody = [];
        for (var col in object) {
            patchBody.push({
                'op': 'replace',
                'path': '/' + col,
                'value': object[col]
            });
        }
        return patchBody;
    };
    return HttpRequest;
}());
export { HttpRequest };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1yZXF1ZXN0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL2h0dHAvIiwic291cmNlcyI6WyJtb2RlbHMvaHR0cC1yZXF1ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUVqRTtJQUNJLHFCQUNXLElBQVMsRUFDVCxPQUErQixFQUMvQixJQUFZLEVBQ25CLE9BQWdCLEVBQ1QsTUFBYyxFQUNkLElBQVksRUFDWixNQUFhLEVBQ2IsV0FBbUMsRUFDbkMsWUFBb0IsRUFDcEIsTUFBYyxFQUNyQixRQUFpQjtRQVZWLFNBQUksR0FBSixJQUFJLENBQUs7UUFDVCxZQUFPLEdBQVAsT0FBTyxDQUF3QjtRQUMvQixTQUFJLEdBQUosSUFBSSxDQUFRO1FBRVosV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLFNBQUksR0FBSixJQUFJLENBQVE7UUFDWixXQUFNLEdBQU4sTUFBTSxDQUFPO1FBQ2IsZ0JBQVcsR0FBWCxXQUFXLENBQXdCO1FBQ25DLGlCQUFZLEdBQVosWUFBWSxDQUFRO1FBQ3BCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFHckIsSUFBSSxDQUFDLFlBQVk7WUFDYixJQUFJLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQztRQUMvQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLFFBQVE7WUFDUixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUNqQyxDQUFDO0lBS0Qsc0JBQUksZ0NBQU87YUFBWDtZQUNJLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN6QixDQUFDO2FBRUQsVUFBWSxLQUFjO1lBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1lBQ3RCLElBQUksS0FBSztnQkFDTCxJQUFJLENBQUMs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R0FBRztnQkFDakIsT0FBTyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUM7YUFDdkIsQ0FBQyxDQUFDO1NBQ047UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDO0lBQ0wsa0JBQUM7QUFBRCxDQUFDLEFBdEdELElBc0dDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNGb3JtRGF0YSwgaXNCbG9iLCBpc0FycmF5QnVmZmVyIH0gZnJvbSBcIi4uL2Z1bmN0aW9ucy91dGlsXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVF1ZXJ5UGF0aCB9IGZyb20gXCIuLi9mdW5jdGlvbnMvY3JlYXRlLXF1ZXJ5LXBhdGhcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBIdHRwUmVxdWVzdCB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwdWJsaWMgYm9keTogYW55LFxyXG4gICAgICAgIHB1YmxpYyBoZWFkZXJzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9LFxyXG4gICAgICAgIHB1YmxpYyBob3N0OiBzdHJpbmcsXHJcbiAgICAgICAgaXNIdHRwczogYm9vbGVhbixcclxuICAgICAgICBwdWJsaWMgbWV0aG9kOiBzdHJpbmcsXHJcbiAgICAgICAgcHVibGljIHBhdGg6IHN0cmluZyxcclxuICAgICAgICBwdWJsaWMgcGFyYW1zOiBhbnlbXSxcclxuICAgICAgICBwdWJsaWMgcXVlcnlQYXJhbXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0sXHJcbiAgICAgICAgcHVibGljIHJlc3BvbnNlVHlwZTogc3RyaW5nLFxyXG4gICAgICAgIHB1YmxpYyBzY2hlbWU6IHN0cmluZyxcclxuICAgICAgICBmdWxsUGF0aD86IHN0cmluZyxcclxuICAgICkge1xyXG4gICAgICAgIGlmICghcmVzcG9uc2VUeXBlKVxyXG4gICAgICAgICAgICB0aGlzLnJlc3BvbnNlVHlwZSA9ICdqc29uJztcclxuICAgICAgICB0aGlzLmlzSHR0cHMgPSBpc0h0dHBzO1xyXG4gICAgICAgIGlmIChmdWxsUGF0aClcclxuICAgICAgICAgICAgdGhpcy5mdWxsUGF0aCA9IGZ1bGxQYXRoO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBfaXNIdHRwczogYm9vbGVhbjtcclxuXHJcbiAgICBwcml2YXRlIF9mdWxsUGF0aDogc3RyaW5nO1xyXG5cclxuICAgIGdldCBpc0h0dHBzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc0h0dHBzO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBpc0h0dHBzKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5faXNIdHRwcyA9IHZhbHVlO1xyXG4gICAgICAgIGlmICh2YWx1ZSlcclxuICAgICAgICAgICAgdGhpcy5mdWxsUGF0aCA9IHRoaXMuZnVsbFBhdGgucmVwbGFjZShcImh0dHA6XCIsIFwiaHR0cHM6XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBmdWxsUGF0aCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZnVsbFBhdGggPyB0aGlzLl9mdWxsUGF0aCA6IGAke3RoaXMuaG9zdH0vJHt0aGlzLnBhdGh9JHtjcmVhdGVRdWVyeVBhdGgoeyBwYXJhbXM6IHRoaXMucGFyYW1zLCBxdWVyeVBhcmFtczogdGhpcy5xdWVyeVBhcmFtcyB9KX1gO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBmdWxsUGF0aCh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX2Z1bGxQYXRoID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29udGVudFR5cGUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmJvZHkgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaXNGb3JtRGF0YSh0aGlzLmJvZHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlzQmxvYih0aGlzLmJvZHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJvZHkudHlwZSB8fCBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNBcnJheUJ1ZmZlcih0aGlzLmJvZHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmJvZHkgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAndGV4dC9wbGFpbic7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuYm9keSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHRoaXMuYm9keSA9PT0gJ251bWJlcicgfHxcclxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheSh0aGlzLmJvZHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHNlcmlhbGl6ZUJvZHkoKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAodGhpcy5ib2R5ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlzQXJyYXlCdWZmZXIodGhpcy5ib2R5KSB8fCBpc0Jsb2IodGhpcy5ib2R5KSB8fCBpc0Zvcm1EYXRhKHRoaXMuYm9keSkgfHxcclxuICAgICAgICAgICAgdHlwZW9mIHRoaXMuYm9keSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYm9keTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMubWV0aG9kID09ICdQQVRDSCcpXHJcbiAgICAgICAgICAgIHRoaXMuYm9keSA9IHRoaXMuY29udmVydFBhdGNoQm9keSh0aGlzLmJvZHkpO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuYm9keSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHRoaXMuYm9keSA9PT0gJ2Jvb2xlYW4nIHx8XHJcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodGhpcy5ib2R5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy5ib2R5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuYm9keSlcclxuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh0aGlzLmJvZHkpO1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNvbnZlcnRQYXRjaEJvZHkob2JqZWN0OiBPYmplY3QpOiBhbnkge1xyXG4gICAgICAgIGxldCBwYXRjaEJvZHkgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBjb2wgaW4gb2JqZWN0KSB7XHJcbiAgICAgICAgICAgIHBhdGNoQm9keS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICdvcCc6ICdyZXBsYWNlJyxcclxuICAgICAgICAgICAgICAgICdwYXRoJzogJy8nICsgY29sLFxyXG4gICAgICAgICAgICAgICAgJ3ZhbHVlJzogb2JqZWN0W2NvbF1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXRjaEJvZHk7XHJcbiAgICB9XHJcbn0iXX0=