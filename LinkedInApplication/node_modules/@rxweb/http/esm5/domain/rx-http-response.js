import * as tslib_1 from "tslib";
import { XhrRequest } from "./xhr-request";
import { createInstance } from "../functions/create-instance";
import { HttpResponse, XhrContext } from '../models';
var RxHttpResponse = /** @class */ (function () {
    function RxHttpResponse(request, filters, inMemoryFilter, onError, badRequest) {
        var _this = this;
        this.request = request;
        this.filters = filters;
        this.inMemoryFilter = inMemoryFilter;
        this.onError = onError;
        this.badRequest = badRequest;
        this._index = 0;
        this._onResponse = new Array();
        this.onRequestExecuting = function () {
            return function (context) {
                if (context.response.statusCode) {
                    var response = tslib_1.__assign({}, context.response, { body: context.result });
                    if (response.statusCode >= 200 && response.statusCode < 300)
                        _this._onSuccess(response);
                    else {
                        _this._onError.error(response);
                        _this.onError(response);
                    }
                }
                else
                    _this.executeFilterOnRequest();
            };
        };
    }
    RxHttpResponse.prototype.process = function (type, success) {
        this._onSuccess = this.onComplete(type, success);
        this._onError = success;
        this.inMemoryFilter ? this.callFilter(this.inMemoryFilter) : this.executeFilterOnRequest();
    };
    RxHttpResponse.prototype.executeFilterOnRequest = function () {
        if (this.filters && this.filters.length > 0 && this.filters.length > this._index) {
            this.callFilter(this.filters[this._index]);
        }
        else
            new XhrRequest(this.request, this._onSuccess, this.onRequestError.bind(this), this.badRequest);
    };
    RxHttpResponse.prototype.callFilter = function (filterConfig) {
        if (!filterConfig.runsOn || filterConfig.runsOn.indexOf(this.request.method) != -1) {
            var modelInstance = createInstance(filterConfig.model, filterConfig.args || []);
            modelInstance.onRequestExecuting = this.onRequestExecuting();
            this._index++;
            modelInstance.onRequest(new XhrContext(this.request, new HttpResponse()));
            if (modelInstance["onResponse"])
                this._onResponse.push(modelInstance);
        }
        else
            this._index++;
    };
    RxHttpResponse.prototype.onComplete = function (resultType, onSuccess) {
        var _this = this;
        return function (response) {
            if (_this._onResponse.length > 0 && !response.isInMemoryResponse)
                _this._onResponse.forEach(function (t) { return t.onResponse(response); });
            onSuccess.next(response.body);
            onSuccess.complete();
        };
    };
    RxHttpResponse.prototype.onRequestError = function (response) {
        this._onError.error(response);
        if (this.onError)
            this.onError(response);
    };
    return RxHttpResponse;
}());
export { RxHttpResponse };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicngtaHR0cC1yZXNwb25zZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9odHRwLyIsInNvdXJjZXMiOlsiZG9tYWluL3J4LWh0dHAtcmVzcG9uc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzlELE9BQU8sRUFBZSxZQUFZLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBRWpFO0lBTUksd0JBQW9CLE9BQW9CLEVBQVUsT0FBMEIsRUFBVSxjQUErQixFQUFVLE9BQXlDLEVBQVUsVUFBaUM7UUFBbk4saUJBRUM7UUFGbUIsWUFBTyxHQUFQLE9BQU8sQ0FBYTtRQUFVLFlBQU8sR0FBUCxPQUFPLENBQW1CO1FBQVUsbUJBQWMsR0FBZCxjQUFjLENBQWlCO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBa0M7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUF1QjtRQUwzTSxXQUFNLEdBQVcsQ0FBQyxDQUFDO1FBR25CLGdCQUFXLEdBQXFCLElBQUksS0FBSyxFQUFrQixDQUFDO1FBMkNwRSx1QkFBa0IsR0FBRztZQUNqQixPQUFPLFVBQUMsT0FBbUI7Z0JBQ3ZCLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUU7b0JBQzdCLElBQUksUUFBUSx3QkFBUSxPQUFPLENBQUMsUUFBUSxFQUFLLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBRSxDQUFBO29CQUNuRSxJQUFJLFFBQVEsQ0FBQyxVQUFVLElBQUksR0FBRyxJQUFJLFFBQVEsQ0FBQyxVQUFVLEdBQUcsR0FBRzt3QkFDdkQsS0FBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQzt5QkFDekI7d0JBQ0QsS0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7d0JBQzlCLEtBQUks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L0IsQ0FBQztJQUVMLHFCQUFDO0FBQUQsQ0FBQyxBQXJFRCxJQXFFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFhockZpbHRlckNvbmZpZyB9IGZyb20gXCIuLi9pbnRlcmZhY2UveGhyLWZpbHRlci1jb25maWdcIjtcclxuaW1wb3J0IHsgWGhyUmVxdWVzdCB9IGZyb20gXCIuL3hoci1yZXF1ZXN0XCI7XHJcbmltcG9ydCB7IFJlc3BvbnNlRmlsdGVyIH0gZnJvbSBcIi4uL2ludGVyZmFjZS9yZXNwb25zZS1maWx0ZXJcIjtcclxuaW1wb3J0IHsgY3JlYXRlSW5zdGFuY2UgfSBmcm9tIFwiLi4vZnVuY3Rpb25zL2NyZWF0ZS1pbnN0YW5jZVwiO1xyXG5pbXBvcnQgeyBIdHRwUmVxdWVzdCwgSHR0cFJlc3BvbnNlLCBYaHJDb250ZXh0IH0gZnJvbSAnLi4vbW9kZWxzJ1xyXG5cclxuZXhwb3J0IGNsYXNzIFJ4SHR0cFJlc3BvbnNlIHtcclxuICAgIHByaXZhdGUgX2luZGV4OiBudW1iZXIgPSAwO1xyXG4gICAgcHJpdmF0ZSBfb25TdWNjZXNzOiBGdW5jdGlvbjtcclxuICAgIHByaXZhdGUgX29uRXJyb3I6IGFueTtcclxuICAgIHByaXZhdGUgX29uUmVzcG9uc2U6IFJlc3BvbnNlRmlsdGVyW10gPSBuZXcgQXJyYXk8UmVzcG9uc2VGaWx0ZXI+KCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZXF1ZXN0OiBIdHRwUmVxdWVzdCwgcHJpdmF0ZSBmaWx0ZXJzOiBYaHJGaWx0ZXJDb25maWdbXSwgcHJpdmF0ZSBpbk1lbW9yeUZpbHRlcjogWGhyRmlsdGVyQ29uZmlnLCBwcml2YXRlIG9uRXJyb3I6IChyZXNwb25zZTogSHR0cFJlc3BvbnNlKSA9PiB2b2lkLCBwcml2YXRlIGJhZFJlcXVlc3Q6IChyZXN1bHQ6IGFueSkgPT4gdm9pZCkge1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJvY2Vzcyh0eXBlOiBzdHJpbmcsIHN1Y2Nlc3M/OiBhbnkpIHtcclxuICAgICAgICB0aGlzLl9vblN1Y2Nlc3MgPSB0aGlzLm9uQ29tcGxldGUodHlwZSwgc3VjY2Vzcyk7XHJcbiAgICAgICAgdGhpcy5fb25FcnJvciA9IHN1Y2Nlc3M7XHJcbiAgICAgICAgdGhpcy5pbk1lbW9yeUZpbHRlciA/IHRoaXMuY2FsbEZpbHRlcih0aGlzLmluTWVtb3J5RmlsdGVyKSA6IHRoaXMuZXhlY3V0ZUZpbHRlck9uUmVxdWVzdCgpXHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgZXhlY3V0ZUZpbHRlck9uUmVxdWVzdCgpIHtcclxuICAgICAgICBpZiAodGhpcy5maWx0ZXJzICYmIHRoaXMuZmlsdGVycy5sZW5ndGggPiAwICYmIHRoaXMuZmlsdGVycy5sZW5ndGggPiB0aGlzLl9pbmRleCkge1xyXG4gICAgICAgICAgICB0aGlzLmNhbGxGaWx0ZXIodGhpcy5maWx0ZXJzW3RoaXMuX2luZGV4XSlcclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgbmV3IFhoclJlcXVlc3QodGhpcy5yZXF1ZXN0LCB0aGlzLl9vblN1Y2Nlc3MsIHRoaXMub25SZXF1ZXN0RXJyb3IuYmluZCh0aGlzKSwgdGhpcy5iYWRSZXF1ZXN0KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNhbGxGaWx0ZXIoZmlsdGVyQ29uZmlnOiBYaHJGaWx0ZXJDb25maWcpIHtcclxuICAgICAgICBpZiAoIWZpbHRlckNvbmZpZy5ydW5zT24gfHwgZmlsdGVyQ29uZmlnLnJ1bnNPbi5pbmRleE9mKHRoaXMucmVxdWVzdC5tZXRob2QpICE9IC0xKSB7XHJcbiAgICAgICAgICAgIGxldCBtb2RlbEluc3RhbmNlID0gY3JlYXRlSW5zdGFuY2UoZmlsdGVyQ29uZmlnLm1vZGVsLCBmaWx0ZXJDb25maWcuYXJncyB8fCBbXSkgYXMgYW55O1xyXG4gICAgICAgICAgICBtb2RlbEluc3RhbmNlLm9uUmVxdWVzdEV4ZWN1dGluZyA9IHRoaXMub25SZXF1ZXN0RXhlY3V0aW5nKClcclxuICAgICAgICAgICAgdGhpcy5faW5kZXgrKztcclxuICAgICAgICAgICAgbW9kZWxJbnN0YW5jZS5vblJlcXVlc3QobmV3IFhockNvbnRleHQodGhpcy5yZXF1ZXN0LCBuZXcgSHR0cFJlc3BvbnNlKCkpKTtcclxuICAgICAgICAgICAgaWYgKG1vZGVsSW5zdGFuY2VbXCJvblJlc3BvbnNlXCJdKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fb25SZXNwb25zZS5wdXNoKG1vZGVsSW5zdGFuY2UpO1xyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICB0aGlzLl9pbmRleCsrO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uQ29tcGxldGUocmVzdWx0VHlwZTogc3RyaW5nLCBvblN1Y2Nlc3M6IGFueSkge1xyXG4gICAgICAgIHJldHVybiAocmVzcG9uc2U6IEh0dHBSZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fb25SZXNwb25zZS5sZW5ndGggPiAwICYmICFyZXNwb25zZS5pc0luTWVtb3J5UmVzcG9uc2UpXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vblJlc3BvbnNlLmZvckVhY2godCA9PiB0Lm9uUmVzcG9uc2UocmVzcG9uc2UpKVxyXG4gICAgICAgICAgICBvblN1Y2Nlc3MubmV4dChyZXNwb25zZS5ib2R5KTtcclxuICAgICAgICAgICAgb25TdWNjZXNzLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uUmVxdWVzdEV4ZWN1dGluZyA9ICgpID0+IHtcclxuICAgICAgICByZXR1cm4gKGNvbnRleHQ6IFhockNvbnRleHQpID0+IHtcclxuICAgICAgICAgICAgaWYgKGNvbnRleHQucmVzcG9uc2Uuc3RhdHVzQ29kZSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlc3BvbnNlID0geyAuLi5jb250ZXh0LnJlc3BvbnNlLCAuLi57IGJvZHk6IGNvbnRleHQucmVzdWx0IH0gfVxyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPj0gMjAwICYmIHJlc3BvbnNlLnN0YXR1c0NvZGUgPCAzMDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25TdWNjZXNzKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uRXJyb3IuZXJyb3IocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgICAgIHRoaXMuZXhlY3V0ZUZpbHRlck9uUmVxdWVzdCgpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uUmVxdWVzdEVycm9yKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICB0aGlzLl9vbkVycm9yLmVycm9yKHJlc3BvbnNlKTtcclxuICAgICAgICBpZiAodGhpcy5vbkVycm9yKVxyXG4gICAgICAgICAgICB0aGlzLm9uRXJyb3IocmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxufSJdfQ==