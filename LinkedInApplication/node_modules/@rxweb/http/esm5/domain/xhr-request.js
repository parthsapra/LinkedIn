import { HttpResponse } from '../models';
import { extractHeaders } from "../functions/util";
var XhrRequest = /** @class */ (function () {
    function XhrRequest(request, onComplete, onRequestError, badRequest) {
        var _this = this;
        this.request = request;
        this.onComplete = onComplete;
        this.onRequestError = onRequestError;
        this.badRequest = badRequest;
        this.onLoad = function () {
            var response = new HttpResponse();
            response.statusCode = _this.xhr.status;
            response.statusText = _this.xhr.statusText || 'OK';
            response.headers = extractHeaders(_this.xhr.getAllResponseHeaders());
            response.responseUrl = _this.xhr.responseURL;
            var body = null;
            if (response.statusCode !== 204)
                body = typeof _this.xhr.response === 'undefined' ? _this.xhr.responseText : _this.xhr.response;
            if (response.statusCode === 0)
                response.statusCode = !!body ? 200 : 0;
            var isSuccess = response.statusCode >= 200 && response.statusCode < 300;
            if (_this.request.responseType === 'json' && response.headers["content-type"] && response.headers["content-type"].indexOf("json") != -1 && typeof body === 'string') {
                var originalBody = body;
                body = body.replace(/^\)\]\}',?\n/, '');
                try {
                    body = body !== '' ? JSON.parse(body) : null;
                }
                catch (ex) {
                    body = originalBody;
                    if (isSuccess) {
                        isSuccess = false;
                        body = { ex: ex, body: body };
                    }
                }
            }
            response.body = body;
            if (isSuccess) {
                _this.onComplete(response);
                _this.dispose();
            }
            else
                _this.onError(response);
        };
        this.onError = function (error) {
            if (_this.xhr.status == 400 && _this.badRequest)
                _this.badRequest(typeof _this.xhr.response === 'undefined' ? _this.xhr.responseText : _this.xhr.response);
            else if (_this.onRequestError)
                _this.onRequestError({
                    responseUrl: _this.xhr.responseURL,
                    error: error,
                    statusCode: _this.xhr.status || 0,
                    statusText: _this.xhr.statusText || 'Unknown Error'
                });
            else
                console.error(error);
            _this.dispose();
        };
        var xhr = new XMLHttpRequest();
        xhr.open(request.method, request.fullPath);
        Object.keys(request.headers).forEach(function (t) { return xhr.setRequestHeader(t, request.headers[t]); });
        if (!request.headers['Accept'])
            xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');
        if (!request.headers['Content-Type']) {
            var contentType = request.getContentType();
            if (contentType !== null) {
                xhr.setRequestHeader('Content-Type', contentType);
            }
        }
        xhr.addEventListener('load', this.onLoad);
        xhr.addEventListener('error', this.onError);
        xhr.withCredentials = true;
        xhr.send(request.serializeBody());
        this.xhr = xhr;
    }
    XhrRequest.prototype.dispose = function () {
        if (this.xhr) {
            this.xhr.removeEventListener('load', this.onLoad);
            this.xhr.removeEventListener('error', this.onError);
        }
        this.xhr = null;
        this.request = null;
        this.onComplete = null;
        this.onRequestError = null;
        this.badRequest = null;
    };
    return XhrRequest;
}());
export { XhrRequest };
//# sourceMappingURL=data:application/json;base64,