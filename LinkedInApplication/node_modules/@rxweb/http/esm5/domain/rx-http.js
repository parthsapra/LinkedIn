import { requestBody } from "../functions/request-body";
import { getInstanceContainer } from "../functions/get-instance-container";
import { RxHttpResponse } from "./rx-http-response";
import { httpRequestContainer } from "../core/http-request-container";
import { Observable } from "rxjs";
var RxHttp = /** @class */ (function () {
    function RxHttp() {
    }
    RxHttp.prototype.getFilters = function () {
        var filters = (this._baseConfig && this._baseConfig.filters) ? this._baseConfig.filters : [];
        var filterService = this._serviceContainers.filter(function (t) { return t.type == "filter"; })[0];
        var requestFilters = [];
        if (filterService)
            filterService.config.forEach(function (t) { return requestFilters.push(t); });
        filters.forEach(function (t) { return requestFilters.push(t); });
        return requestFilters;
    };
    RxHttp.prototype.getInMemoryFilter = function () {
        var inMemory = this._serviceContainers.filter(function (t) { return t.type == "inmemory"; })[0];
        if (inMemory && this._baseConfig && this._baseConfig.filters)
            return this._baseConfig.filters.filter(function (t) { return t.isInMemory; })[0];
        return null;
    };
    RxHttp.prototype.request = function (method, config) {
        var _this = this;
        return new Observable(function (subscriber) {
            if (!_this._baseConfig)
                _this._baseConfig = httpRequestContainer.getConfig() || {};
            if (!_this._serviceContainers)
                _this._serviceContainers = getInstanceContainer(_this);
            var serviceContainer = _this._serviceContainers.filter(function (t) { return t.type == "http"; })[0];
            var request = requestBody(method, _this._baseConfig, serviceContainer, config, _this);
            if (request) {
                var error = _this._baseConfig ? _this._baseConfig.onError : null;
                var response = new RxHttpResponse(request, _this.getFilters(), _this.getInMemoryFilter(), _this.onError || error, _this.badRequest);
                response.process('subscribe', subscriber);
            }
            else {
                subscriber.next(null);
                subscriber.complete();
            }
        });
    };
    RxHttp.prototype.lookup = function (configs) {
        var _this = this;
        return new Observable(function (subscriber) {
            var propNames = [];
            var subscriptions = [];
            var jObject = {};
            configs.forEach(function (t) {
                propNames.push(t.propName);
                subscriptions.push(_this.get(t).subscribe(function (X) {
                    jObject[t.propName] = X;
                    if (Object.keys(jObject).length == propNames.length) {
                        subscriber.next(jObject);
                        subscriber.complete();
                    }
                }));
            });
        });
    };
    RxHttp.prototype.get = function (config) {
        return this.request('GET', config);
    };
    RxHttp.prototype.post = function (config) {
        return this.request('POST', config);
    };
    RxHttp.prototype.put = function (config) {
        return this.request('PUT', config);
    };
    RxHttp.prototype.patch = function (config) {
        return this.request('PATCH', config);
    };
    RxHttp.prototype.delete = function (config) {
        return this.request('DELETE', config);
    };
    return RxHttp;
}());
export { RxHttp };
//# sourceMappingURL=data:application/json;base64,