import { XhrRequest } from "./xhr-request";
import { createInstance } from "../functions/create-instance";
import { HttpResponse, XhrContext } from '../models';
export class RxHttpResponse {
    constructor(request, filters, inMemoryFilter, onError, badRequest) {
        this.request = request;
        this.filters = filters;
        this.inMemoryFilter = inMemoryFilter;
        this.onError = onError;
        this.badRequest = badRequest;
        this._index = 0;
        this._onResponse = new Array();
        this.onRequestExecuting = () => {
            return (context) => {
                if (context.response.statusCode) {
                    let response = Object.assign({}, context.response, { body: context.result });
                    if (response.statusCode >= 200 && response.statusCode < 300)
                        this._onSuccess(response);
                    else {
                        this._onError.error(response);
                        this.onError(response);
                    }
                }
                else
                    this.executeFilterOnRequest();
            };
        };
    }
    process(type, success) {
        this._onSuccess = this.onComplete(type, success);
        this._onError = success;
        this.inMemoryFilter ? this.callFilter(this.inMemoryFilter) : this.executeFilterOnRequest();
    }
    executeFilterOnRequest() {
        if (this.filters && this.filters.length > 0 && this.filters.length > this._index) {
            this.callFilter(this.filters[this._index]);
        }
        else
            new XhrRequest(this.request, this._onSuccess, this.onRequestError.bind(this), this.badRequest);
    }
    callFilter(filterConfig) {
        if (!filterConfig.runsOn || filterConfig.runsOn.indexOf(this.request.method) != -1) {
            let modelInstance = createInstance(filterConfig.model, filterConfig.args || []);
            modelInstance.onRequestExecuting = this.onRequestExecuting();
            this._index++;
            modelInstance.onRequest(new XhrContext(this.request, new HttpResponse()));
            if (modelInstance["onResponse"])
                this._onResponse.push(modelInstance);
        }
        else
            this._index++;
    }
    onComplete(resultType, onSuccess) {
        return (response) => {
            if (this._onResponse.length > 0 && !response.isInMemoryResponse)
                this._onResponse.forEach(t => t.onResponse(response));
            onSuccess.next(response.body);
            onSuccess.complete();
        };
    }
    onRequestError(response) {
        this._onError.error(response);
        if (this.onError)
            this.onError(response);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicngtaHR0cC1yZXNwb25zZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9odHRwLyIsInNvdXJjZXMiOlsiZG9tYWluL3J4LWh0dHAtcmVzcG9uc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDOUQsT0FBTyxFQUFlLFlBQVksRUFBRSxVQUFVLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFFakUsTUFBTSxPQUFPLGNBQWM7SUFNdkIsWUFBb0IsT0FBb0IsRUFBVSxPQUEwQixFQUFVLGNBQStCLEVBQVUsT0FBeUMsRUFBVSxVQUFpQztRQUEvTCxZQUFPLEdBQVAsT0FBTyxDQUFhO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBbUI7UUFBVSxtQkFBYyxHQUFkLGNBQWMsQ0FBaUI7UUFBVSxZQUFPLEdBQVAsT0FBTyxDQUFrQztRQUFVLGVBQVUsR0FBVixVQUFVLENBQXVCO1FBTDNNLFdBQU0sR0FBVyxDQUFDLENBQUM7UUFHbkIsZ0JBQVcsR0FBcUIsSUFBSSxLQUFLLEVBQWtCLENBQUM7UUEyQ3BFLHVCQUFrQixHQUFHLEdBQUcsRUFBRTtZQUN0QixPQUFPLENBQUMsT0FBbUIsRUFBRSxFQUFFO2dCQUMzQixJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFO29CQUM3QixJQUFJLFFBQVEscUJBQVEsT0FBTyxDQUFDLFFBQVEsRUFBSyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUUsQ0FBQTtvQkFDbkUsSUFBSSxRQUFRLENBQUMsVUFBVSxJQUFJLEdBQUcsSUFBSSxRQUFRLENBQUMsVUFBVSxHQUFHLEdBQUc7d0JBQ3ZELElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7eUJBQ3pCO3dCQUNELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEs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bnRlbnQiOlsiaW1wb3J0IHsgWGhyRmlsdGVyQ29uZmlnIH0gZnJvbSBcIi4uL2ludGVyZmFjZS94aHItZmlsdGVyLWNvbmZpZ1wiO1xyXG5pbXBvcnQgeyBYaHJSZXF1ZXN0IH0gZnJvbSBcIi4veGhyLXJlcXVlc3RcIjtcclxuaW1wb3J0IHsgUmVzcG9uc2VGaWx0ZXIgfSBmcm9tIFwiLi4vaW50ZXJmYWNlL3Jlc3BvbnNlLWZpbHRlclwiO1xyXG5pbXBvcnQgeyBjcmVhdGVJbnN0YW5jZSB9IGZyb20gXCIuLi9mdW5jdGlvbnMvY3JlYXRlLWluc3RhbmNlXCI7XHJcbmltcG9ydCB7IEh0dHBSZXF1ZXN0LCBIdHRwUmVzcG9uc2UsIFhockNvbnRleHQgfSBmcm9tICcuLi9tb2RlbHMnXHJcblxyXG5leHBvcnQgY2xhc3MgUnhIdHRwUmVzcG9uc2Uge1xyXG4gICAgcHJpdmF0ZSBfaW5kZXg6IG51bWJlciA9IDA7XHJcbiAgICBwcml2YXRlIF9vblN1Y2Nlc3M6IEZ1bmN0aW9uO1xyXG4gICAgcHJpdmF0ZSBfb25FcnJvcjogYW55O1xyXG4gICAgcHJpdmF0ZSBfb25SZXNwb25zZTogUmVzcG9uc2VGaWx0ZXJbXSA9IG5ldyBBcnJheTxSZXNwb25zZUZpbHRlcj4oKTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlcXVlc3Q6IEh0dHBSZXF1ZXN0LCBwcml2YXRlIGZpbHRlcnM6IFhockZpbHRlckNvbmZpZ1tdLCBwcml2YXRlIGluTWVtb3J5RmlsdGVyOiBYaHJGaWx0ZXJDb25maWcsIHByaXZhdGUgb25FcnJvcjogKHJlc3BvbnNlOiBIdHRwUmVzcG9uc2UpID0+IHZvaWQsIHByaXZhdGUgYmFkUmVxdWVzdDogKHJlc3VsdDogYW55KSA9PiB2b2lkKSB7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcm9jZXNzKHR5cGU6IHN0cmluZywgc3VjY2Vzcz86IGFueSkge1xyXG4gICAgICAgIHRoaXMuX29uU3VjY2VzcyA9IHRoaXMub25Db21wbGV0ZSh0eXBlLCBzdWNjZXNzKTtcclxuICAgICAgICB0aGlzLl9vbkVycm9yID0gc3VjY2VzcztcclxuICAgICAgICB0aGlzLmluTWVtb3J5RmlsdGVyID8gdGhpcy5jYWxsRmlsdGVyKHRoaXMuaW5NZW1vcnlGaWx0ZXIpIDogdGhpcy5leGVjdXRlRmlsdGVyT25SZXF1ZXN0KClcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBleGVjdXRlRmlsdGVyT25SZXF1ZXN0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmZpbHRlcnMgJiYgdGhpcy5maWx0ZXJzLmxlbmd0aCA+IDAgJiYgdGhpcy5maWx0ZXJzLmxlbmd0aCA+IHRoaXMuX2luZGV4KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbEZpbHRlcih0aGlzLmZpbHRlcnNbdGhpcy5faW5kZXhdKVxyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICBuZXcgWGhyUmVxdWVzdCh0aGlzLnJlcXVlc3QsIHRoaXMuX29uU3VjY2VzcywgdGhpcy5vblJlcXVlc3RFcnJvci5iaW5kKHRoaXMpLCB0aGlzLmJhZFJlcXVlc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2FsbEZpbHRlcihmaWx0ZXJDb25maWc6IFhockZpbHRlckNvbmZpZykge1xyXG4gICAgICAgIGlmICghZmlsdGVyQ29uZmlnLnJ1bnNPbiB8fCBmaWx0ZXJDb25maWcucnVuc09uLmluZGV4T2YodGhpcy5yZXF1ZXN0Lm1ldGhvZCkgIT0gLTEpIHtcclxuICAgICAgICAgICAgbGV0IG1vZGVsSW5zdGFuY2UgPSBjcmVhdGVJbnN0YW5jZShmaWx0ZXJDb25maWcubW9kZWwsIGZpbHRlckNvbmZpZy5hcmdzIHx8IFtdKSBhcyBhbnk7XHJcbiAgICAgICAgICAgIG1vZGVsSW5zdGFuY2Uub25SZXF1ZXN0RXhlY3V0aW5nID0gdGhpcy5vblJlcXVlc3RFeGVjdXRpbmcoKVxyXG4gICAgICAgICAgICB0aGlzLl9pbmRleCsrO1xyXG4gICAgICAgICAgICBtb2RlbEluc3RhbmNlLm9uUmVxdWVzdChuZXcgWGhyQ29udGV4dCh0aGlzLnJlcXVlc3QsIG5ldyBIdHRwUmVzcG9uc2UoKSkpO1xyXG4gICAgICAgICAgICBpZiAobW9kZWxJbnN0YW5jZVtcIm9uUmVzcG9uc2VcIl0pXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vblJlc3BvbnNlLnB1c2gobW9kZWxJbnN0YW5jZSk7XHJcbiAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgIHRoaXMuX2luZGV4Kys7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25Db21wbGV0ZShyZXN1bHRUeXBlOiBzdHJpbmcsIG9uU3VjY2VzczogYW55KSB7XHJcbiAgICAgICAgcmV0dXJuIChyZXNwb25zZTogSHR0cFJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9vblJlc3BvbnNlLmxlbmd0aCA+IDAgJiYgIXJlc3BvbnNlLmlzSW5NZW1vcnlSZXNwb25zZSlcclxuICAgICAgICAgICAgICAgIHRoaXMuX29uUmVzcG9uc2UuZm9yRWFjaCh0ID0+IHQub25SZXNwb25zZShyZXNwb25zZSkpXHJcbiAgICAgICAgICAgIG9uU3VjY2Vzcy5uZXh0KHJlc3BvbnNlLmJvZHkpO1xyXG4gICAgICAgICAgICBvblN1Y2Nlc3MuY29tcGxldGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25SZXF1ZXN0RXhlY3V0aW5nID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiAoY29udGV4dDogWGhyQ29udGV4dCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dC5yZXNwb25zZS5zdGF0dXNDb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzcG9uc2UgPSB7IC4uLmNvbnRleHQucmVzcG9uc2UsIC4uLnsgYm9keTogY29udGV4dC5yZXN1bHQgfSB9XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA+PSAyMDAgJiYgcmVzcG9uc2Uuc3RhdHVzQ29kZSA8IDMwMClcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vblN1Y2Nlc3MocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25FcnJvci5lcnJvcihyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5leGVjdXRlRmlsdGVyT25SZXF1ZXN0KClcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25SZXF1ZXN0RXJyb3IocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHRoaXMuX29uRXJyb3IuZXJyb3IocmVzcG9uc2UpO1xyXG4gICAgICAgIGlmICh0aGlzLm9uRXJyb3IpXHJcbiAgICAgICAgICAgIHRoaXMub25FcnJvcihyZXNwb25zZSk7XHJcbiAgICB9XHJcblxyXG59Il19