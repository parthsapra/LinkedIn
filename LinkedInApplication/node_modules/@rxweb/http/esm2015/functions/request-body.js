import { HttpRequest } from '../models/http-request';
export function requestBody(method, baseConfig, serviceContainer, config, instance) {
    if (!(typeof config == "string")) {
        let uri = getHostUri(baseConfig, serviceContainer, config);
        let path = (config && config.path) ? config.path : serviceContainer.config.path;
        let isHttps = uri.startsWith("https://");
        return new HttpRequest(config ? config.body : undefined, {}, uri, isHttps, method, path, config && config.params ? config.params : [], config && config.queryParams ? config.queryParams : {}, config ? config.responseType : undefined, isHttps ? 'https' : 'http');
    }
    else {
        let isHttps = config.startsWith("https://");
        return new HttpRequest(undefined, {}, config, config.startsWith("https://"), method, config, [], {}, undefined, isHttps ? 'https' : 'http', config);
    }
}
function getHostUri(baseConfig, serviceContainer, config) {
    if (config && config.hostUri)
        return config.hostUri;
    if (serviceContainer && serviceContainer.config && serviceContainer.config.hostKey)
        return baseConfig.hostURIs.filter(t => t.name == serviceContainer.config.hostKey)[0].uri;
    if (baseConfig.hostURIs)
        return baseConfig.hostURIs.filter(t => t.default == true)[0].uri;
    return window.location.origin;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdC1ib2R5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL2h0dHAvIiwic291cmNlcyI6WyJmdW5jdGlvbnMvcmVxdWVzdC1ib2R5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxXQUFXLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQTtBQUluRCxNQUFNLFVBQVUsV0FBVyxDQUFDLE1BQWMsRUFBRSxVQUFlLEVBQUUsZ0JBQXdDLEVBQUUsTUFBMEQsRUFBRSxRQUFhO0lBRTVLLElBQUksQ0FBQyxDQUFDLE9BQU8sTUFBTSxJQUFJLFFBQVEsQ0FBQyxFQUFFO1FBQzlCLElBQUksR0FBRyxHQUFHLFVBQVUsQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDM0QsSUFBSSxJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hGLElBQUksT0FBTyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDekMsT0FBTyxJQUFJLFdBQVcsQ0FDbEIsTUFBTSxDQUFDLENBQUMsQ0FBeUIsTUFBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUN6RCxFQUFFLEVBQ0YsR0FBRyxFQUNILE9BQU8sRUFDUCxNQUFNLEVBQ04sSUFBSSxFQUNKLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQzVDLE1BQU0sSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQ3RELE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUN4QyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUM3QixDQUFDO0tBQ0w7U0FBTTtRQUNILElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUMsT0FBTyxJQUFJLFdBQVcsQ0FDbEIsU0FBUyxFQUNULEVBQUUsRUFDRixNQUFNLEVBQ04sTUFBTSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFDN0IsTUFBTSxFQUNOLE1BQU0sRUFDTixFQUFFLEVBQ0YsRUFBRSxFQUNGLFNBQVMsRUFDVCxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUMxQixNQUFNLENBQ1QsQ0FBQTtLQUNKO0FBRUwsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLFVBQWdDLEVBQUUsZ0JBQXdDLEVBQUUsTUFBeUI7SUFDckgsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE9BQU87UUFDeEIsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDO0lBQzFCLElBQUksZ0JBQWdCLElBQUksZ0JBQWdCLENBQUMsTUFBTSxJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxPQUFPO1FBQzlFLE9BQU8sVUFBVSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDN0YsSUFBSSxVQUFVLENBQUMsUUFBUTtRQUNuQixPQUFPLFVBQVUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDckUsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztBQUNsQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2VydmljZUNvbnRhaW5lckNvbmZpZyB9IGZyb20gXCIuLi9pbnRlcmZhY2Uvc2VydmljZS1jb250YWluZXItY29uZmlnXCI7XHJcbmltcG9ydCB7IEh0dHBSZXF1ZXN0Q29uZmlnIH0gZnJvbSBcIi4uL2ludGVyZmFjZS9odHRwLXJlcXVlc3QtY29uZmlnXCI7XHJcbmltcG9ydCB7IEh0dHBSZXF1ZXN0fSBmcm9tICcuLi9tb2RlbHMvaHR0cC1yZXF1ZXN0J1xyXG5pbXBvcnQgeyBIdHRwUmVxdWVzdEJvZHlDb25maWcgfSBmcm9tIFwiLi4vaW50ZXJmYWNlL2h0dHAtcmVxdWVzdC1ib2R5LWNvbmZpZ1wiO1xyXG5pbXBvcnQgeyBCYXNlSHR0cENsaWVudENvbmZpZyB9IGZyb20gXCIuLi9pbnRlcmZhY2UvYmFzZS1odHRwLWNsaWVudC1jb25maWdcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXF1ZXN0Qm9keShtZXRob2Q6IHN0cmluZywgYmFzZUNvbmZpZzogYW55LCBzZXJ2aWNlQ29udGFpbmVyOiBTZXJ2aWNlQ29udGFpbmVyQ29uZmlnLCBjb25maWc6IEh0dHBSZXF1ZXN0Q29uZmlnIHwgSHR0cFJlcXVlc3RCb2R5Q29uZmlnIHwgc3RyaW5nLCBpbnN0YW5jZTogYW55KTogSHR0cFJlcXVlc3Qge1xyXG4gICAgICAgIFxyXG4gICAgaWYgKCEodHlwZW9mIGNvbmZpZyA9PSBcInN0cmluZ1wiKSkge1xyXG4gICAgICAgIGxldCB1cmkgPSBnZXRIb3N0VXJpKGJhc2VDb25maWcsIHNlcnZpY2VDb250YWluZXIsIGNvbmZpZyk7XHJcbiAgICAgICAgbGV0IHBhdGggPSAoY29uZmlnICYmIGNvbmZpZy5wYXRoKSA/IGNvbmZpZy5wYXRoIDogc2VydmljZUNvbnRhaW5lci5jb25maWcucGF0aDtcclxuICAgICAgICBsZXQgaXNIdHRwcyA9IHVyaS5zdGFydHNXaXRoKFwiaHR0cHM6Ly9cIik7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBIdHRwUmVxdWVzdChcclxuICAgICAgICAgICAgY29uZmlnID8gKDxIdHRwUmVxdWVzdEJvZHlDb25maWc+Y29uZmlnKS5ib2R5IDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgdXJpLFxyXG4gICAgICAgICAgICBpc0h0dHBzLFxyXG4gICAgICAgICAgICBtZXRob2QsXHJcbiAgICAgICAgICAgIHBhdGgsXHJcbiAgICAgICAgICAgIGNvbmZpZyAmJiBjb25maWcucGFyYW1zID8gY29uZmlnLnBhcmFtcyA6IFtdLFxyXG4gICAgICAgICAgICBjb25maWcgJiYgY29uZmlnLnF1ZXJ5UGFyYW1zID8gY29uZmlnLnF1ZXJ5UGFyYW1zIDoge30sXHJcbiAgICAgICAgICAgIGNvbmZpZyA/IGNvbmZpZy5yZXNwb25zZVR5cGUgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIGlzSHR0cHMgPyAnaHR0cHMnIDogJ2h0dHAnLFxyXG4gICAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxldCBpc0h0dHBzID0gY29uZmlnLnN0YXJ0c1dpdGgoXCJodHRwczovL1wiKTtcclxuICAgICAgICByZXR1cm4gbmV3IEh0dHBSZXF1ZXN0KFxyXG4gICAgICAgICAgICB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgICBjb25maWcsXHJcbiAgICAgICAgICAgIGNvbmZpZy5zdGFydHNXaXRoKFwiaHR0cHM6Ly9cIiksXHJcbiAgICAgICAgICAgIG1ldGhvZCxcclxuICAgICAgICAgICAgY29uZmlnLFxyXG4gICAgICAgICAgICBbXSxcclxuICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgaXNIdHRwcyA/ICdodHRwcycgOiAnaHR0cCcsXHJcbiAgICAgICAgICAgIGNvbmZpZyxcclxuICAgICAgICApXHJcbiAgICB9XHJcbiAgICBcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0SG9zdFVyaShiYXNlQ29uZmlnOiBCYXNlSHR0cENsaWVudENvbmZpZywgc2VydmljZUNvbnRhaW5lcjogU2VydmljZUNvbnRhaW5lckNvbmZpZywgY29uZmlnOiBIdHRwUmVxdWVzdENvbmZpZykge1xyXG4gICAgaWYgKGNvbmZpZyAmJiBjb25maWcuaG9zdFVyaSlcclxuICAgICAgICByZXR1cm4gY29uZmlnLmhvc3RVcmk7XHJcbiAgICBpZiAoc2VydmljZUNvbnRhaW5lciAmJiBzZXJ2aWNlQ29udGFpbmVyLmNvbmZpZyAmJiBzZXJ2aWNlQ29udGFpbmVyLmNvbmZpZy5ob3N0S2V5KVxyXG4gICAgICAgIHJldHVybiBiYXNlQ29uZmlnLmhvc3RVUklzLmZpbHRlcih0ID0+IHQubmFtZSA9PSBzZXJ2aWNlQ29udGFpbmVyLmNvbmZpZy5ob3N0S2V5KVswXS51cmk7XHJcbiAgICBpZiAoYmFzZUNvbmZpZy5ob3N0VVJJcylcclxuICAgICAgICByZXR1cm4gYmFzZUNvbmZpZy5ob3N0VVJJcy5maWx0ZXIodCA9PiB0LmRlZmF1bHQgPT0gdHJ1ZSlbMF0udXJpO1xyXG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW47XHJcbn1cclxuXHJcblxyXG5cclxuIl19