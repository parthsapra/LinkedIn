import { isFormData, isBlob, isArrayBuffer } from "../functions/util";
import { createQueryPath } from "../functions/create-query-path";
export class HttpRequest {
    constructor(body, headers, host, isHttps, method, path, params, queryParams, responseType, scheme, fullPath) {
        this.body = body;
        this.headers = headers;
        this.host = host;
        this.method = method;
        this.path = path;
        this.params = params;
        this.queryParams = queryParams;
        this.responseType = responseType;
        this.scheme = scheme;
        if (!responseType)
            this.responseType = 'json';
        this.isHttps = isHttps;
        if (fullPath)
            this.fullPath = fullPath;
    }
    get isHttps() {
        return this._isHttps;
    }
    set isHttps(value) {
        this._isHttps = value;
        if (value)
            this.fullPath = this.fullPath.replace("http:", "https:");
    }
    get fullPath() {
        return this._fullPath ? this._fullPath : `${this.host}/${this.path}${createQueryPath({ params: this.params, queryParams: this.queryParams })}`;
    }
    set fullPath(value) {
        this._fullPath = value;
    }
    getContentType() {
        if (this.body === null) {
            return null;
        }
        if (isFormData(this.body)) {
            return null;
        }
        if (isBlob(this.body)) {
            return this.body.type || null;
        }
        if (isArrayBuffer(this.body)) {
            return null;
        }
        if (typeof this.body === 'string') {
            return 'text/plain';
        }
        if (typeof this.body === 'object' || typeof this.body === 'number' ||
            Array.isArray(this.body)) {
            return 'application/json';
        }
        return null;
    }
    serializeBody() {
        if (this.body === null) {
            return null;
        }
        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||
            typeof this.body === 'string') {
            return this.body;
        }
        if (this.method == 'PATCH')
            this.body = this.convertPatchBody(this.body);
        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||
            Array.isArray(this.body)) {
            return JSON.stringify(this.body);
        }
        if (this.body)
            return String(this.body);
        return '';
    }
    convertPatchBody(object) {
        let patchBody = [];
        for (var col in object) {
            patchBody.push({
                'op': 'replace',
                'path': '/' + col,
                'value': object[col]
            });
        }
        return patchBody;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1yZXF1ZXN0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL2h0dHAvIiwic291cmNlcyI6WyJtb2RlbHMvaHR0cC1yZXF1ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUVqRSxNQUFNLE9BQU8sV0FBVztJQUNwQixZQUNXLElBQVMsRUFDVCxPQUErQixFQUMvQixJQUFZLEVBQ25CLE9BQWdCLEVBQ1QsTUFBYyxFQUNkLElBQVksRUFDWixNQUFhLEVBQ2IsV0FBbUMsRUFDbkMsWUFBb0IsRUFDcEIsTUFBYyxFQUNyQixRQUFpQjtRQVZWLFNBQUksR0FBSixJQUFJLENBQUs7UUFDVCxZQUFPLEdBQVAsT0FBTyxDQUF3QjtRQUMvQixTQUFJLEdBQUosSUFBSSxDQUFRO1FBRVosV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLFNBQUksR0FBSixJQUFJLENBQVE7UUFDWixXQUFNLEdBQU4sTUFBTSxDQUFPO1FBQ2IsZ0JBQVcsR0FBWCxXQUFXLENBQXdCO1FBQ25DLGlCQUFZLEdBQVosWUFBWSxDQUFRO1FBQ3BCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFHckIsSUFBSSxDQUFDLFlBQVk7WUFDYixJQUFJLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQztRQUMvQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLFFBQVE7WUFDUixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUNqQyxDQUFDO0lBS0QsSUFBSSxPQUFPO1FBQ1AsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFJLE9BQU8sQ0FBQyxLQUFjO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLElBQUksS0FB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RztnQkFDakIsT0FBTyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUM7YUFDdkIsQ0FBQyxDQUFDO1NBQ047UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0Zvcm1EYXRhLCBpc0Jsb2IsIGlzQXJyYXlCdWZmZXIgfSBmcm9tIFwiLi4vZnVuY3Rpb25zL3V0aWxcIjtcclxuaW1wb3J0IHsgY3JlYXRlUXVlcnlQYXRoIH0gZnJvbSBcIi4uL2Z1bmN0aW9ucy9jcmVhdGUtcXVlcnktcGF0aFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEh0dHBSZXF1ZXN0IHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHB1YmxpYyBib2R5OiBhbnksXHJcbiAgICAgICAgcHVibGljIGhlYWRlcnM6IHsgW2tleTogc3RyaW5nXTogYW55IH0sXHJcbiAgICAgICAgcHVibGljIGhvc3Q6IHN0cmluZyxcclxuICAgICAgICBpc0h0dHBzOiBib29sZWFuLFxyXG4gICAgICAgIHB1YmxpYyBtZXRob2Q6IHN0cmluZyxcclxuICAgICAgICBwdWJsaWMgcGF0aDogc3RyaW5nLFxyXG4gICAgICAgIHB1YmxpYyBwYXJhbXM6IGFueVtdLFxyXG4gICAgICAgIHB1YmxpYyBxdWVyeVBhcmFtczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSxcclxuICAgICAgICBwdWJsaWMgcmVzcG9uc2VUeXBlOiBzdHJpbmcsXHJcbiAgICAgICAgcHVibGljIHNjaGVtZTogc3RyaW5nLFxyXG4gICAgICAgIGZ1bGxQYXRoPzogc3RyaW5nLFxyXG4gICAgKSB7XHJcbiAgICAgICAgaWYgKCFyZXNwb25zZVR5cGUpXHJcbiAgICAgICAgICAgIHRoaXMucmVzcG9uc2VUeXBlID0gJ2pzb24nO1xyXG4gICAgICAgIHRoaXMuaXNIdHRwcyA9IGlzSHR0cHM7XHJcbiAgICAgICAgaWYgKGZ1bGxQYXRoKVxyXG4gICAgICAgICAgICB0aGlzLmZ1bGxQYXRoID0gZnVsbFBhdGg7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIF9pc0h0dHBzOiBib29sZWFuO1xyXG5cclxuICAgIHByaXZhdGUgX2Z1bGxQYXRoOiBzdHJpbmc7XHJcblxyXG4gICAgZ2V0IGlzSHR0cHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzSHR0cHM7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGlzSHR0cHModmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9pc0h0dHBzID0gdmFsdWU7XHJcbiAgICAgICAgaWYgKHZhbHVlKVxyXG4gICAgICAgICAgICB0aGlzLmZ1bGxQYXRoID0gdGhpcy5mdWxsUGF0aC5yZXBsYWNlKFwiaHR0cDpcIiwgXCJodHRwczpcIik7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGZ1bGxQYXRoKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9mdWxsUGF0aCA/IHRoaXMuX2Z1bGxQYXRoIDogYCR7dGhpcy5ob3N0fS8ke3RoaXMucGF0aH0ke2NyZWF0ZVF1ZXJ5UGF0aCh7IHBhcmFtczogdGhpcy5wYXJhbXMsIHF1ZXJ5UGFyYW1zOiB0aGlzLnF1ZXJ5UGFyYW1zIH0pfWA7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGZ1bGxQYXRoKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fZnVsbFBhdGggPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDb250ZW50VHlwZSgpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuYm9keSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpc0Zvcm1EYXRhKHRoaXMuYm9keSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaXNCbG9iKHRoaXMuYm9keSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYm9keS50eXBlIHx8IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc0FycmF5QnVmZmVyKHRoaXMuYm9keSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuYm9keSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgcmV0dXJuICd0ZXh0L3BsYWluJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5ib2R5ID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdGhpcy5ib2R5ID09PSAnbnVtYmVyJyB8fFxyXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KHRoaXMuYm9keSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgc2VyaWFsaXplQm9keSgpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICh0aGlzLmJvZHkgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaXNBcnJheUJ1ZmZlcih0aGlzLmJvZHkpIHx8IGlzQmxvYih0aGlzLmJvZHkpIHx8IGlzRm9ybURhdGEodGhpcy5ib2R5KSB8fFxyXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5ib2R5ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ib2R5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5tZXRob2QgPT0gJ1BBVENIJylcclxuICAgICAgICAgICAgdGhpcy5ib2R5ID0gdGhpcy5jb252ZXJ0UGF0Y2hCb2R5KHRoaXMuYm9keSk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5ib2R5ID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdGhpcy5ib2R5ID09PSAnYm9vbGVhbicgfHxcclxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheSh0aGlzLmJvZHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLmJvZHkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5ib2R5KVxyXG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKHRoaXMuYm9keSk7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY29udmVydFBhdGNoQm9keShvYmplY3Q6IE9iamVjdCk6IGFueSB7XHJcbiAgICAgICAgbGV0IHBhdGNoQm9keSA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGNvbCBpbiBvYmplY3QpIHtcclxuICAgICAgICAgICAgcGF0Y2hCb2R5LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgJ29wJzogJ3JlcGxhY2UnLFxyXG4gICAgICAgICAgICAgICAgJ3BhdGgnOiAnLycgKyBjb2wsXHJcbiAgICAgICAgICAgICAgICAndmFsdWUnOiBvYmplY3RbY29sXVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhdGNoQm9keTtcclxuICAgIH1cclxufSJdfQ==