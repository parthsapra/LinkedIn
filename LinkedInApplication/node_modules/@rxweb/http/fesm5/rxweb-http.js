import { __assign } from 'tslib';
import { Observable } from 'rxjs';

function isFormData(formValue) {
    return typeof FormData !== 'undefined' && formValue instanceof FormData;
}
function isBlob(formValue) {
    return typeof Blob !== 'undefined' && formValue instanceof Blob;
}
function isArrayBuffer(formValue) {
    return typeof ArrayBuffer !== 'undefined' && formValue instanceof ArrayBuffer;
}
//copied from : https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders
function extractHeaders(headers) {
    var arr = headers.trim().split(/[\r\n]+/);
    var headerMap = {};
    arr.forEach(function (line) {
        var parts = line.split(': ');
        var header = parts.shift();
        var value = parts.join(': ');
        headerMap[header] = value;
    });
    return headerMap;
}

function createQueryPath(config) {
    return "" + getParams(config) + getQueryParams(config);
}
function getParams(config) {
    var params = '';
    if (config && config.params && config.params.length > 0)
        params = "/" + config.params.join('/');
    return params;
}
function getQueryParams(config) {
    var queryParams = '?';
    if (config && config.queryParams)
        Object.keys(config.queryParams).forEach(function (key) {
            queryParams += key + "=" + config.queryParams[key] + "&";
        });
    return queryParams.slice(0, queryParams.length - 1);
}

var HttpRequest = /** @class */ (function () {
    function HttpRequest(body, headers, host, isHttps, method, path, params, queryParams, responseType, scheme, fullPath) {
        this.body = body;
        this.headers = headers;
        this.host = host;
        this.method = method;
        this.path = path;
        this.params = params;
        this.queryParams = queryParams;
        this.responseType = responseType;
        this.scheme = scheme;
        if (!responseType)
            this.responseType = 'json';
        this.isHttps = isHttps;
        if (fullPath)
            this.fullPath = fullPath;
    }
    Object.defineProperty(HttpRequest.prototype, "isHttps", {
        get: function () {
            return this._isHttps;
        },
        set: function (value) {
            this._isHttps = value;
            if (value)
                this.fullPath = this.fullPath.replace("http:", "https:");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HttpRequest.prototype, "fullPath", {
        get: function () {
            return this._fullPath ? this._fullPath : this.host + "/" + this.path + createQueryPath({ params: this.params, queryParams: this.queryParams });
        },
        set: function (value) {
            this._fullPath = value;
        },
        enumerable: true,
        configurable: true
    });
    HttpRequest.prototype.getContentType = function () {
        if (this.body === null) {
            return null;
        }
        if (isFormData(this.body)) {
            return null;
        }
        if (isBlob(this.body)) {
            return this.body.type || null;
        }
        if (isArrayBuffer(this.body)) {
            return null;
        }
        if (typeof this.body === 'string') {
            return 'text/plain';
        }
        if (typeof this.body === 'object' || typeof this.body === 'number' ||
            Array.isArray(this.body)) {
            return 'application/json';
        }
        return null;
    };
    HttpRequest.prototype.serializeBody = function () {
        if (this.body === null) {
            return null;
        }
        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||
            typeof this.body === 'string') {
            return this.body;
        }
        if (this.method == 'PATCH')
            this.body = this.convertPatchBody(this.body);
        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||
            Array.isArray(this.body)) {
            return JSON.stringify(this.body);
        }
        if (this.body)
            return String(this.body);
        return '';
    };
    HttpRequest.prototype.convertPatchBody = function (object) {
        var patchBody = [];
        for (var col in object) {
            patchBody.push({
                'op': 'replace',
                'path': '/' + col,
                'value': object[col]
            });
        }
        return patchBody;
    };
    return HttpRequest;
}());

function requestBody(method, baseConfig, serviceContainer, config, instance) {
    if (!(typeof config == "string")) {
        var uri = getHostUri(baseConfig, serviceContainer, config);
        var path = (config && config.path) ? config.path : serviceContainer.config.path;
        var isHttps = uri.startsWith("https://");
        return new HttpRequest(config ? config.body : undefined, {}, uri, isHttps, method, path, config && config.params ? config.params : [], config && config.queryParams ? config.queryParams : {}, config ? config.responseType : undefined, isHttps ? 'https' : 'http');
    }
    else {
        var isHttps = config.startsWith("https://");
        return new HttpRequest(undefined, {}, config, config.startsWith("https://"), method, config, [], {}, undefined, isHttps ? 'https' : 'http', config);
    }
}
function getHostUri(baseConfig, serviceContainer, config) {
    if (config && config.hostUri)
        return config.hostUri;
    if (serviceContainer && serviceContainer.config && serviceContainer.config.hostKey)
        return baseConfig.hostURIs.filter(function (t) { return t.name == serviceContainer.config.hostKey; })[0].uri;
    if (baseConfig.hostURIs)
        return baseConfig.hostURIs.filter(function (t) { return t.default == true; })[0].uri;
    return window.location.origin;
}

var httpRequestContainer = new (/** @class */ (function () {
    function class_1() {
        this.serviceContainers = new Array();
    }
    class_1.prototype.register = function (target, config, type) {
        var serviceContainer = this.serviceContainers.filter(function (t) { return t.target == target && t.type == type; })[0];
        if (!serviceContainer)
            this.serviceContainers.push({ target: target, config: config, type: type });
    };
    class_1.prototype.registerConfig = function (httpClientConfig) {
        this.baseConfig = httpClientConfig;
    };
    class_1.prototype.get = function (target) {
        return this.serviceContainers.filter(function (t) { return t.target == target; });
    };
    class_1.prototype.getConfig = function () {
        return this.baseConfig;
    };
    return class_1;
}()))();

function getInstanceContainer(instance) {
    var container = httpRequestContainer.get(instance.constructor);
    var prototype = (!container || container.length == 0) ? instance.__proto__ : {};
    if (prototype.__proto__) {
        var isLoop = false;
        do {
            isLoop = prototype.__proto__.constructor != Object;
            if (isLoop) {
                container = httpRequestContainer.get(prototype.__proto__.constructor);
                isLoop = container == undefined;
            }
        } while (isLoop);
    }
    return container;
}

var HttpResponse = /** @class */ (function () {
    function HttpResponse() {
    }
    return HttpResponse;
}());

var XhrContext = /** @class */ (function () {
    function XhrContext(request, response) {
        this.request = request;
        this.response = response;
        if (!this.response)
            this.response = new HttpResponse();
    }
    Object.defineProperty(XhrContext.prototype, "result", {
        get: function () {
            return this._result;
        },
        set: function (value) {
            this._result = value;
            this.response.isInMemoryResponse = true;
        },
        enumerable: true,
        configurable: true
    });
    return XhrContext;
}());

var AbstractRequestFilter = /** @class */ (function () {
    function AbstractRequestFilter() {
    }
    return AbstractRequestFilter;
}());

var XhrRequest = /** @class */ (function () {
    function XhrRequest(request, onComplete, onRequestError, badRequest) {
        var _this = this;
        this.request = request;
        this.onComplete = onComplete;
        this.onRequestError = onRequestError;
        this.badRequest = badRequest;
        this.onLoad = function () {
            var response = new HttpResponse();
            response.statusCode = _this.xhr.status;
            response.statusText = _this.xhr.statusText || 'OK';
            response.headers = extractHeaders(_this.xhr.getAllResponseHeaders());
            response.responseUrl = _this.xhr.responseURL;
            var body = null;
            if (response.statusCode !== 204)
                body = typeof _this.xhr.response === 'undefined' ? _this.xhr.responseText : _this.xhr.response;
            if (response.statusCode === 0)
                response.statusCode = !!body ? 200 : 0;
            var isSuccess = response.statusCode >= 200 && response.statusCode < 300;
            if (_this.request.responseType === 'json' && response.headers["content-type"] && response.headers["content-type"].indexOf("json") != -1 && typeof body === 'string') {
                var originalBody = body;
                body = body.replace(/^\)\]\}',?\n/, '');
                try {
                    body = body !== '' ? JSON.parse(body) : null;
                }
                catch (ex) {
                    body = originalBody;
                    if (isSuccess) {
                        isSuccess = false;
                        body = { ex: ex, body: body };
                    }
                }
            }
            response.body = body;
            if (isSuccess) {
                _this.onComplete(response);
                _this.dispose();
            }
            else
                _this.onError(response);
        };
        this.onError = function (error) {
            if (_this.xhr.status == 400 && _this.badRequest)
                _this.badRequest(typeof _this.xhr.response === 'undefined' ? _this.xhr.responseText : _this.xhr.response);
            else if (_this.onRequestError)
                _this.onRequestError({
                    responseUrl: _this.xhr.responseURL,
                    error: error,
                    statusCode: _this.xhr.status || 0,
                    statusText: _this.xhr.statusText || 'Unknown Error'
                });
            else
                console.error(error);
            _this.dispose();
        };
        var xhr = new XMLHttpRequest();
        xhr.open(request.method, request.fullPath);
        Object.keys(request.headers).forEach(function (t) { return xhr.setRequestHeader(t, request.headers[t]); });
        if (!request.headers['Accept'])
            xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');
        if (!request.headers['Content-Type']) {
            var contentType = request.getContentType();
            if (contentType !== null) {
                xhr.setRequestHeader('Content-Type', contentType);
            }
        }
        xhr.addEventListener('load', this.onLoad);
        xhr.addEventListener('error', this.onError);
        xhr.withCredentials = true;
        xhr.send(request.serializeBody());
        this.xhr = xhr;
    }
    XhrRequest.prototype.dispose = function () {
        if (this.xhr) {
            this.xhr.removeEventListener('load', this.onLoad);
            this.xhr.removeEventListener('error', this.onError);
        }
        this.xhr = null;
        this.request = null;
        this.onComplete = null;
        this.onRequestError = null;
        this.badRequest = null;
    };
    return XhrRequest;
}());

function createInstance(model, objectArguments) {
    var classInstance = Object.create(model.prototype);
    try {
        model.apply(classInstance, objectArguments);
    }
    catch (ex) {
        ///resolution of issue https://github.com/rxweb/rxweb/issues/188
        classInstance = Reflect.construct(model, objectArguments);
    }
    return classInstance;
}

var RxHttpResponse = /** @class */ (function () {
    function RxHttpResponse(request, filters, inMemoryFilter, onError, badRequest) {
        var _this = this;
        this.request = request;
        this.filters = filters;
        this.inMemoryFilter = inMemoryFilter;
        this.onError = onError;
        this.badRequest = badRequest;
        this._index = 0;
        this._onResponse = new Array();
        this.onRequestExecuting = function () {
            return function (context) {
                if (context.response.statusCode) {
                    var response = __assign({}, context.response, { body: context.result });
                    if (response.statusCode >= 200 && response.statusCode < 300)
                        _this._onSuccess(response);
                    else {
                        _this._onError.error(response);
                        _this.onError(response);
                    }
                }
                else
                    _this.executeFilterOnRequest();
            };
        };
    }
    RxHttpResponse.prototype.process = function (type, success) {
        this._onSuccess = this.onComplete(type, success);
        this._onError = success;
        this.inMemoryFilter ? this.callFilter(this.inMemoryFilter) : this.executeFilterOnRequest();
    };
    RxHttpResponse.prototype.executeFilterOnRequest = function () {
        if (this.filters && this.filters.length > 0 && this.filters.length > this._index) {
            this.callFilter(this.filters[this._index]);
        }
        else
            new XhrRequest(this.request, this._onSuccess, this.onRequestError.bind(this), this.badRequest);
    };
    RxHttpResponse.prototype.callFilter = function (filterConfig) {
        if (!filterConfig.runsOn || filterConfig.runsOn.indexOf(this.request.method) != -1) {
            var modelInstance = createInstance(filterConfig.model, filterConfig.args || []);
            modelInstance.onRequestExecuting = this.onRequestExecuting();
            this._index++;
            modelInstance.onRequest(new XhrContext(this.request, new HttpResponse()));
            if (modelInstance["onResponse"])
                this._onResponse.push(modelInstance);
        }
        else
            this._index++;
    };
    RxHttpResponse.prototype.onComplete = function (resultType, onSuccess) {
        var _this = this;
        return function (response) {
            if (_this._onResponse.length > 0 && !response.isInMemoryResponse)
                _this._onResponse.forEach(function (t) { return t.onResponse(response); });
            onSuccess.next(response.body);
            onSuccess.complete();
        };
    };
    RxHttpResponse.prototype.onRequestError = function (response) {
        this._onError.error(response);
        if (this.onError)
            this.onError(response);
    };
    return RxHttpResponse;
}());

var RxHttp = /** @class */ (function () {
    function RxHttp() {
    }
    RxHttp.prototype.getFilters = function () {
        var filters = (this._baseConfig && this._baseConfig.filters) ? this._baseConfig.filters : [];
        var filterService = this._serviceContainers.filter(function (t) { return t.type == "filter"; })[0];
        var requestFilters = [];
        if (filterService)
            filterService.config.forEach(function (t) { return requestFilters.push(t); });
        filters.forEach(function (t) { return requestFilters.push(t); });
        return requestFilters;
    };
    RxHttp.prototype.getInMemoryFilter = function () {
        var inMemory = this._serviceContainers.filter(function (t) { return t.type == "inmemory"; })[0];
        if (inMemory && this._baseConfig && this._baseConfig.filters)
            return this._baseConfig.filters.filter(function (t) { return t.isInMemory; })[0];
        return null;
    };
    RxHttp.prototype.request = function (method, config) {
        var _this = this;
        return new Observable(function (subscriber) {
            if (!_this._baseConfig)
                _this._baseConfig = httpRequestContainer.getConfig() || {};
            if (!_this._serviceContainers)
                _this._serviceContainers = getInstanceContainer(_this);
            var serviceContainer = _this._serviceContainers.filter(function (t) { return t.type == "http"; })[0];
            var request = requestBody(method, _this._baseConfig, serviceContainer, config);
            if (request) {
                var error = _this._baseConfig ? _this._baseConfig.onError : null;
                var response = new RxHttpResponse(request, _this.getFilters(), _this.getInMemoryFilter(), _this.onError || error, _this.badRequest);
                response.process('subscribe', subscriber);
            }
            else {
                subscriber.next(null);
                subscriber.complete();
            }
        });
    };
    RxHttp.prototype.lookup = function (configs) {
        var _this = this;
        return new Observable(function (subscriber) {
            var propNames = [];
            var subscriptions = [];
            var jObject = {};
            configs.forEach(function (t) {
                propNames.push(t.propName);
                subscriptions.push(_this.get(t).subscribe(function (X) {
                    jObject[t.propName] = X;
                    if (Object.keys(jObject).length == propNames.length) {
                        subscriber.next(jObject);
                        subscriber.complete();
                    }
                }));
            });
        });
    };
    RxHttp.prototype.get = function (config) {
        return this.request('GET', config);
    };
    RxHttp.prototype.post = function (config) {
        return this.request('POST', config);
    };
    RxHttp.prototype.put = function (config) {
        return this.request('PUT', config);
    };
    RxHttp.prototype.patch = function (config) {
        return this.request('PATCH', config);
    };
    RxHttp.prototype.delete = function (config) {
        return this.request('DELETE', config);
    };
    return RxHttp;
}());

function http(config) {
    return function (target) {
        httpRequestContainer.register(target, config, "http");
    };
}

function xhrFilter(config) {
    return function (target) {
        httpRequestContainer.register(target, config, "filter");
    };
}

function inMemory() {
    return function (target) {
        httpRequestContainer.register(target, null, "inmemory");
    };
}

var HttpClientConfig = /** @class */ (function () {
    function HttpClientConfig() {
    }
    HttpClientConfig.register = function (config) {
        httpRequestContainer.registerConfig(config);
    };
    return HttpClientConfig;
}());

export { AbstractRequestFilter, HttpClientConfig, HttpResponse, RxHttp, XhrContext, http, inMemory, xhrFilter };
//# sourceMappingURL=rxweb-http.js.map
