{"version":3,"file":"rxweb-http.js","sources":["ng://@rxweb/http/functions/util.ts","ng://@rxweb/http/functions/create-query-path.ts","ng://@rxweb/http/models/http-request.ts","ng://@rxweb/http/functions/request-body.ts","ng://@rxweb/http/core/http-request-container.ts","ng://@rxweb/http/functions/get-instance-container.ts","ng://@rxweb/http/models/http-response.ts","ng://@rxweb/http/models/xhr-context.ts","ng://@rxweb/http/models/abstract-request-filter.ts","ng://@rxweb/http/domain/xhr-request.ts","ng://@rxweb/http/functions/create-instance.ts","ng://@rxweb/http/domain/rx-http-response.ts","ng://@rxweb/http/domain/rx-http.ts","ng://@rxweb/http/decorators/http.decorator.ts","ng://@rxweb/http/decorators/filter.decorator.ts","ng://@rxweb/http/decorators/inmemory.decorator.ts","ng://@rxweb/http/core/http-client-config.ts"],"sourcesContent":["export function isFormData(formValue:any) {\r\n    return typeof FormData !== 'undefined' && formValue instanceof FormData;\r\n}\r\n\r\nexport function isBlob(formValue: any) {\r\n    return typeof Blob !== 'undefined' && formValue instanceof Blob;\r\n}\r\n\r\nexport function isArrayBuffer(formValue: any) {\r\n    return typeof ArrayBuffer !== 'undefined' && formValue instanceof ArrayBuffer;\r\n}\r\n\r\n//copied from : https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\r\nexport function extractHeaders(headers:any) {\r\n\r\n    var arr = headers.trim().split(/[\\r\\n]+/);\r\n    var headerMap = {};\r\n\r\n    arr.forEach(function (line) {\r\n        var parts = line.split(': ');\r\n        var header = parts.shift();\r\n        var value = parts.join(': ');\r\n        headerMap[header] = value;\r\n    });\r\n    return headerMap;\r\n}\r\n\r\n","import { HttpRequestConfig } from \"../interface/http-request-config\";\r\nexport function createQueryPath(config: HttpRequestConfig) {\r\n    return  `${getParams(config)}${getQueryParams(config)}`;\r\n}\r\n\r\nfunction getParams(config: HttpRequestConfig) {\r\n    let params = '';\r\n    if (config && config.params && config.params.length > 0)\r\n        params = `/${config.params.join('/')}`;\r\n    return params;\r\n}\r\n\r\nfunction getQueryParams(config:HttpRequestConfig) {\r\n    let queryParams = '?';\r\n    if (config && config.queryParams)\r\n        Object.keys(config.queryParams).forEach(key => {\r\n            queryParams += `${key}=${config.queryParams[key]}&`\r\n        })\r\n    return queryParams.slice(0, queryParams.length - 1);\r\n}","import { isFormData, isBlob, isArrayBuffer } from \"../functions/util\";\r\nimport { createQueryPath } from \"../functions/create-query-path\";\r\n\r\nexport class HttpRequest {\r\n    constructor(\r\n        public body: any,\r\n        public headers: { [key: string]: any },\r\n        public host: string,\r\n        isHttps: boolean,\r\n        public method: string,\r\n        public path: string,\r\n        public params: any[],\r\n        public queryParams: { [key: string]: any },\r\n        public responseType: string,\r\n        public scheme: string,\r\n        fullPath?: string,\r\n    ) {\r\n        if (!responseType)\r\n            this.responseType = 'json';\r\n        this.isHttps = isHttps;\r\n        if (fullPath)\r\n            this.fullPath = fullPath;\r\n    }\r\n    private _isHttps: boolean;\r\n\r\n    private _fullPath: string;\r\n\r\n    get isHttps() {\r\n        return this._isHttps;\r\n    }\r\n\r\n    set isHttps(value: boolean) {\r\n        this._isHttps = value;\r\n        if (value)\r\n            this.fullPath = this.fullPath.replace(\"http:\", \"https:\");\r\n    }\r\n\r\n    get fullPath() {\r\n        return this._fullPath ? this._fullPath : `${this.host}/${this.path}${createQueryPath({ params: this.params, queryParams: this.queryParams })}`;\r\n    }\r\n\r\n    set fullPath(value) {\r\n        this._fullPath = value;\r\n    }\r\n\r\n    getContentType() {\r\n\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n\r\n        if (isFormData(this.body)) {\r\n            return null;\r\n        }\r\n\r\n        if (isBlob(this.body)) {\r\n            return this.body.type || null;\r\n        }\r\n        if (isArrayBuffer(this.body)) {\r\n            return null;\r\n        }\r\n\r\n        if (typeof this.body === 'string') {\r\n            return 'text/plain';\r\n        }\r\n\r\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\r\n            Array.isArray(this.body)) {\r\n            return 'application/json';\r\n        }\r\n        return null;\r\n    }\r\n\r\n    serializeBody(): string {\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n\r\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\r\n            typeof this.body === 'string') {\r\n            return this.body;\r\n        }\r\n        if (this.method == 'PATCH')\r\n            this.body = this.convertPatchBody(this.body);\r\n\r\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\r\n            Array.isArray(this.body)) {\r\n            return JSON.stringify(this.body);\r\n        }\r\n        if (this.body)\r\n            return String(this.body);\r\n        return '';\r\n    }\r\n\r\n    private convertPatchBody(object: Object): any {\r\n        let patchBody = [];\r\n        for (var col in object) {\r\n            patchBody.push({\r\n                'op': 'replace',\r\n                'path': '/' + col,\r\n                'value': object[col]\r\n            });\r\n        }\r\n        return patchBody;\r\n    }\r\n}","import { ServiceContainerConfig } from \"../interface/service-container-config\";\r\nimport { HttpRequestConfig } from \"../interface/http-request-config\";\r\nimport { HttpRequest} from '../models/http-request'\r\nimport { HttpRequestBodyConfig } from \"../interface/http-request-body-config\";\r\nimport { BaseHttpClientConfig } from \"../interface/base-http-client-config\";\r\n\r\nexport function requestBody(method: string, baseConfig: any, serviceContainer: ServiceContainerConfig, config: HttpRequestConfig | HttpRequestBodyConfig | string, instance: any): HttpRequest {\r\n        \r\n    if (!(typeof config == \"string\")) {\r\n        let uri = getHostUri(baseConfig, serviceContainer, config);\r\n        let path = (config && config.path) ? config.path : serviceContainer.config.path;\r\n        let isHttps = uri.startsWith(\"https://\");\r\n        return new HttpRequest(\r\n            config ? (<HttpRequestBodyConfig>config).body : undefined,\r\n            {},\r\n            uri,\r\n            isHttps,\r\n            method,\r\n            path,\r\n            config && config.params ? config.params : [],\r\n            config && config.queryParams ? config.queryParams : {},\r\n            config ? config.responseType : undefined,\r\n            isHttps ? 'https' : 'http',\r\n        );\r\n    } else {\r\n        let isHttps = config.startsWith(\"https://\");\r\n        return new HttpRequest(\r\n            undefined,\r\n            {},\r\n            config,\r\n            config.startsWith(\"https://\"),\r\n            method,\r\n            config,\r\n            [],\r\n            {},\r\n            undefined,\r\n            isHttps ? 'https' : 'http',\r\n            config,\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nfunction getHostUri(baseConfig: BaseHttpClientConfig, serviceContainer: ServiceContainerConfig, config: HttpRequestConfig) {\r\n    if (config && config.hostUri)\r\n        return config.hostUri;\r\n    if (serviceContainer && serviceContainer.config && serviceContainer.config.hostKey)\r\n        return baseConfig.hostURIs.filter(t => t.name == serviceContainer.config.hostKey)[0].uri;\r\n    if (baseConfig.hostURIs)\r\n        return baseConfig.hostURIs.filter(t => t.default == true)[0].uri;\r\n    return window.location.origin;\r\n}\r\n\r\n\r\n\r\n","import { ServiceContainerConfig } from \"../interface/service-container-config\";\r\nimport { BaseHttpClientConfig } from \"../interface/base-http-client-config\";\r\n\r\nexport const httpRequestContainer:\r\n    {\r\n        register(target: any, config: any,type:string);\r\n        get(target: any): ServiceContainerConfig[];\r\n        getConfig();\r\n        registerConfig(baseConfig: BaseHttpClientConfig);\r\n    } = new (class {\r\n\r\n        private serviceContainers: ServiceContainerConfig[] = new Array<ServiceContainerConfig>();\r\n        private baseConfig: BaseHttpClientConfig;\r\n\r\n        register(target: any, config: any, type: string): void {\r\n            let serviceContainer = this.serviceContainers.filter(t => t.target == target && t.type == type)[0]\r\n            if (!serviceContainer)\r\n                this.serviceContainers.push({ target: target, config: config,type:type });\r\n        }\r\n\r\n        registerConfig(httpClientConfig: BaseHttpClientConfig) {\r\n            this.baseConfig = httpClientConfig;\r\n        }\r\n    \r\n\r\n\r\n        get(target: any): ServiceContainerConfig[] {\r\n            return this.serviceContainers.filter(t => t.target == target);\r\n        }\r\n\r\n\r\n        getConfig() {\r\n            return this.baseConfig;\r\n        }\r\n\r\n        \r\n\r\n    })();\r\n","import { httpRequestContainer } from \"../core/http-request-container\";\r\n\r\nexport function getInstanceContainer(instance: any) {\r\n    let container = httpRequestContainer.get(instance.constructor);\r\n    let prototype = (!container || container.length == 0) ? instance.__proto__ : {};\r\n    if (prototype.__proto__) {\r\n        let isLoop = false;\r\n        do {\r\n            isLoop = prototype.__proto__.constructor != Object;\r\n            if (isLoop) {\r\n                container = httpRequestContainer.get(prototype.__proto__.constructor);\r\n                isLoop = container == undefined;\r\n            }\r\n        }while(isLoop)\r\n    }\r\n    return container;\r\n}","export class HttpResponse {\r\n\r\n    constructor() { }\r\n\r\n    isInMemoryResponse: boolean;\r\n    statusCode: number;\r\n    statusText: string;\r\n    headers: { [key: string]: any };\r\n    body: any;\r\n    contentLength: number;\r\n    contentType: string;\r\n    responseUrl: string;\r\n}","import { HttpRequest } from './http-request';\r\nimport { HttpResponse } from './http-response';\r\nexport class XhrContext {\r\n    private _result: any;\r\n    constructor(public request: HttpRequest, public response: HttpResponse) {\r\n        if (!this.response)\r\n            this.response = new HttpResponse();\r\n    }\r\n\r\n    set result(value: any) {\r\n        this._result = value;\r\n        this.response.isInMemoryResponse = true;\r\n    }\r\n    get result() {\r\n        return this._result;\r\n    }\r\n}","import { XhrContext } from \"../models/xhr-context\";\r\n\r\nexport abstract class AbstractRequestFilter  {\r\n\r\n    abstract onRequest: (context: XhrContext) => void;\r\n\r\n    onRequestExecuting: (context: XhrContext) => void;\r\n\r\n}","import { HttpRequest, HttpResponse} from '../models'\r\nimport { extractHeaders } from \"../functions/util\";\r\n\r\nexport class XhrRequest {\r\n    xhr: XMLHttpRequest;\r\n\r\n    constructor(private request: HttpRequest, private onComplete: Function, private onRequestError: Function, private badRequest: Function) {\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open(request.method, request.fullPath);\r\n        Object.keys(request.headers).forEach(t => xhr.setRequestHeader(t, request.headers[t]));\r\n\r\n        if (!request.headers['Accept'])\r\n            xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\r\n\r\n        if (!request.headers['Content-Type']) {\r\n            const contentType = request.getContentType();\r\n            if (contentType !== null) {\r\n                xhr.setRequestHeader('Content-Type', contentType);\r\n            }\r\n        }\r\n\r\n        xhr.addEventListener('load', this.onLoad);\r\n        xhr.addEventListener('error', this.onError);\r\n        xhr.withCredentials = true;\r\n        xhr.send(request.serializeBody());\r\n\r\n        this.xhr = xhr;\r\n    }\r\n\r\n    onLoad = () => {\r\n        let response = new HttpResponse();\r\n        response.statusCode = this.xhr.status\r\n        response.statusText = this.xhr.statusText || 'OK';\r\n        response.headers = extractHeaders(this.xhr.getAllResponseHeaders())\r\n        response.responseUrl = this.xhr.responseURL;\r\n        let body: any = null;\r\n\r\n        if (response.statusCode !== 204)\r\n            body = typeof this.xhr.response === 'undefined' ? this.xhr.responseText : this.xhr.response;\r\n\r\n        if (response.statusCode === 0)\r\n            response.statusCode = !!body ? 200 : 0;\r\n\r\n        let isSuccess = response.statusCode >= 200 && response.statusCode < 300;\r\n        if (this.request.responseType === 'json' && response.headers[\"content-type\"] && response.headers[\"content-type\"].indexOf(\"json\") != -1 && typeof body === 'string') {\r\n            const originalBody = body;\r\n            body = body.replace(/^\\)\\]\\}',?\\n/, '');\r\n            try {\r\n                body = body !== '' ? JSON.parse(body) : null;\r\n            } catch (ex) {\r\n                body = originalBody;\r\n                if (isSuccess) {\r\n                    isSuccess = false;\r\n                    body = { ex, body: body }\r\n                }\r\n            }\r\n        }\r\n        response.body = body;\r\n        if (isSuccess) {\r\n            this.onComplete(response)\r\n            this.dispose()\r\n        }\r\n        else\r\n            this.onError(response);\r\n        \r\n    }\r\n\r\n    onError = (error) => {\r\n        if (this.xhr.status == 400 && this.badRequest)\r\n            this.badRequest(typeof this.xhr.response === 'undefined' ? this.xhr.responseText : this.xhr.response)\r\n        else if (this.onRequestError)\r\n            this.onRequestError({\r\n                responseUrl: this.xhr.responseURL,\r\n                error: error,\r\n                statusCode: this.xhr.status || 0,\r\n                statusText: this.xhr.statusText || 'Unknown Error'\r\n            });\r\n        else\r\n            console.error(error);\r\n        this.dispose();\r\n    }\r\n\r\n\r\n    dispose() {\r\n        if (this.xhr) {\r\n            this.xhr.removeEventListener('load', this.onLoad);\r\n            this.xhr.removeEventListener('error', this.onError);\r\n        }\r\n        this.xhr = null;\r\n        this.request = null;\r\n        this.onComplete = null;\r\n        this.onRequestError = null;\r\n        this.badRequest = null;\r\n    }\r\n}","export function createInstance(model: any, objectArguments: any[]) {\r\n    let classInstance = Object.create(model.prototype)\r\n    try{\r\n        model.apply(classInstance, objectArguments);\r\n    }catch(ex){\r\n        ///resolution of issue https://github.com/rxweb/rxweb/issues/188\r\n        classInstance = Reflect.construct(model,objectArguments);\r\n    }\r\n    return classInstance;\r\n}","import { XhrFilterConfig } from \"../interface/xhr-filter-config\";\r\nimport { XhrRequest } from \"./xhr-request\";\r\nimport { ResponseFilter } from \"../interface/response-filter\";\r\nimport { createInstance } from \"../functions/create-instance\";\r\nimport { HttpRequest, HttpResponse, XhrContext } from '../models'\r\n\r\nexport class RxHttpResponse {\r\n    private _index: number = 0;\r\n    private _onSuccess: Function;\r\n    private _onError: any;\r\n    private _onResponse: ResponseFilter[] = new Array<ResponseFilter>();\r\n\r\n    constructor(private request: HttpRequest, private filters: XhrFilterConfig[], private inMemoryFilter: XhrFilterConfig, private onError: (response: HttpResponse) => void, private badRequest: (result: any) => void) {\r\n\r\n    }\r\n\r\n\r\n    process(type: string, success?: any) {\r\n        this._onSuccess = this.onComplete(type, success);\r\n        this._onError = success;\r\n        this.inMemoryFilter ? this.callFilter(this.inMemoryFilter) : this.executeFilterOnRequest()\r\n    }\r\n\r\n\r\n    private executeFilterOnRequest() {\r\n        if (this.filters && this.filters.length > 0 && this.filters.length > this._index) {\r\n            this.callFilter(this.filters[this._index])\r\n        } else\r\n            new XhrRequest(this.request, this._onSuccess, this.onRequestError.bind(this), this.badRequest);\r\n    }\r\n\r\n    private callFilter(filterConfig: XhrFilterConfig) {\r\n        if (!filterConfig.runsOn || filterConfig.runsOn.indexOf(this.request.method) != -1) {\r\n            let modelInstance = createInstance(filterConfig.model, filterConfig.args || []) as any;\r\n            modelInstance.onRequestExecuting = this.onRequestExecuting()\r\n            this._index++;\r\n            modelInstance.onRequest(new XhrContext(this.request, new HttpResponse()));\r\n            if (modelInstance[\"onResponse\"])\r\n                this._onResponse.push(modelInstance);\r\n        } else\r\n            this._index++;\r\n\r\n    }\r\n\r\n    private onComplete(resultType: string, onSuccess: any) {\r\n        return (response: HttpResponse) => {\r\n            if (this._onResponse.length > 0 && !response.isInMemoryResponse)\r\n                this._onResponse.forEach(t => t.onResponse(response))\r\n            onSuccess.next(response.body);\r\n            onSuccess.complete();\r\n        }\r\n    }\r\n\r\n    onRequestExecuting = () => {\r\n        return (context: XhrContext) => {\r\n            if (context.response.statusCode) {\r\n                let response = { ...context.response, ...{ body: context.result } }\r\n                if (response.statusCode >= 200 && response.statusCode < 300)\r\n                    this._onSuccess(response);\r\n                else {\r\n                    this._onError.error(response);\r\n                    this.onError(response);\r\n                }\r\n\r\n            } else\r\n                this.executeFilterOnRequest()\r\n        }\r\n    }\r\n\r\n    onRequestError(response: any) {\r\n        this._onError.error(response);\r\n        if (this.onError)\r\n            this.onError(response);\r\n    }\r\n\r\n}","import { HttpRequestConfig} from \"../interface/http-request-config\";\r\nimport { requestBody } from \"../functions/request-body\";\r\nimport { getInstanceContainer } from \"../functions/get-instance-container\";\r\nimport { ServiceContainerConfig } from \"../interface/service-container-config\";\r\nimport { RxHttpResponse } from \"./rx-http-response\";\r\nimport { httpRequestContainer } from \"../core/http-request-container\";\r\nimport { XhrFilterConfig } from \"../interface/xhr-filter-config\";\r\nimport { Observable, forkJoin , Subscription } from \"rxjs\";\r\nimport { BaseHttpClientConfig } from \"../interface/base-http-client-config\";\r\nimport { HttpRequestBodyConfig } from \"../interface/http-request-body-config\";\r\nimport { LookupHttpRequestConfig } from \"../interface/lookup-http-request-config\";\r\nimport { HttpResponse } from '../models'\r\nexport class RxHttp {\r\n\r\n    path: string;\r\n\r\n    private _serviceContainers: ServiceContainerConfig[]\r\n    private _baseConfig: BaseHttpClientConfig;\r\n\r\n    onError: (response: HttpResponse) => void;\r\n    badRequest: (result: any) => void;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    private getFilters() {\r\n        let filters = (this._baseConfig && this._baseConfig.filters) ? this._baseConfig.filters : [];\r\n        let filterService = this._serviceContainers.filter(t => t.type == \"filter\")[0];\r\n        let requestFilters = [];\r\n        if (filterService)\r\n            filterService.config.forEach(t => requestFilters.push(t));\r\n        filters.forEach(t => requestFilters.push(t));\r\n        return requestFilters;\r\n    }\r\n\r\n    private getInMemoryFilter(): XhrFilterConfig {\r\n        let inMemory = this._serviceContainers.filter(t => t.type == \"inmemory\")[0];\r\n        if (inMemory && this._baseConfig && this._baseConfig.filters)\r\n            return this._baseConfig.filters.filter(t => t.isInMemory)[0];\r\n        return null;\r\n    }\r\n\r\n    private request<T>(method: string, config: HttpRequestConfig | HttpRequestBodyConfig | string): Observable<T> {\r\n        return new Observable(subscriber => {\r\n            if (!this._baseConfig)\r\n                this._baseConfig = httpRequestContainer.getConfig() || {};\r\n            if (!this._serviceContainers)\r\n                this._serviceContainers = getInstanceContainer(this);\r\n            let serviceContainer = this._serviceContainers.filter(t => t.type == \"http\")[0]\r\n            let request = requestBody(method, this._baseConfig, serviceContainer, config, this);\r\n            if (request) {\r\n                let error = this._baseConfig ? this._baseConfig.onError : null;\r\n                let response = new RxHttpResponse(request, this.getFilters(), this.getInMemoryFilter(), this.onError || error, this.badRequest);\r\n                response.process('subscribe', subscriber);\r\n            } else {\r\n                subscriber.next(null);\r\n                subscriber.complete();\r\n            }\r\n        })\r\n    }\r\n\r\n    lookup<T>(configs: LookupHttpRequestConfig[]): Observable<T> {\r\n        return new Observable(subscriber => {\r\n            let propNames = [];\r\n            let subscriptions = [];\r\n            let jObject:any = {};\r\n            configs.forEach(t => {\r\n                propNames.push(t.propName);\r\n                subscriptions.push(this.get(t).subscribe(X => {\r\n                    jObject[t.propName] = X;\r\n                    if (Object.keys(jObject).length == propNames.length) {\r\n                        subscriber.next(jObject);\r\n                        subscriber.complete();\r\n                    }\r\n                }));\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n\r\n    get<T>(config?: HttpRequestConfig | string): Observable<T>  {\r\n        return this.request('GET', config);\r\n    }\r\n\r\n    post<T>(config: HttpRequestBodyConfig | string): Observable<T>  {\r\n        return this.request('POST', config);\r\n    }\r\n\r\n    put<T>(config: HttpRequestBodyConfig | string): Observable<T> {\r\n        return this.request('PUT', config);\r\n    }\r\n\r\n    patch<T>(config: HttpRequestBodyConfig | string): Observable<T>  {\r\n        return this.request('PATCH', config);\r\n    }\r\n\r\n    delete<T>(config: HttpRequestBodyConfig | string): Observable<T>  {\r\n        return this.request('DELETE', config);\r\n    }\r\n}","import { HttpConfig } from \"../interface/http-config\";\r\nimport { httpRequestContainer } from \"../core/http-request-container\";\r\n\r\nexport function http(config?: HttpConfig) {\r\n    return function (target) {\r\n        httpRequestContainer.register(target,config,\"http\")\r\n    }\r\n}   ","import { XhrFilterConfig } from \"../interface/xhr-filter-config\";\r\nimport { httpRequestContainer } from \"../core/http-request-container\";\r\n\r\nexport function xhrFilter(config: XhrFilterConfig[]) {\r\n    return function (target) {\r\n        httpRequestContainer.register(target, config,\"filter\")\r\n    }\r\n}   ","import { httpRequestContainer } from \"../core/http-request-container\";\r\n\r\nexport function inMemory() {\r\n    return function (target) {\r\n        httpRequestContainer.register(target, null,\"inmemory\")\r\n    }\r\n}   ","import { httpRequestContainer } from \"./http-request-container\";\r\nimport { BaseHttpClientConfig } from \"../interface/base-http-client-config\";\r\n\r\nexport class HttpClientConfig {\r\n\r\n    static register(config: BaseHttpClientConfig) {\r\n        httpRequestContainer.registerConfig(config);\r\n    }\r\n}"],"names":[],"mappings":"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"}