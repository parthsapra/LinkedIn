import * as tslib_1 from "tslib";
import { isObject, isEqual } from '../functions/utils';
import { getObject } from "../functions/get-instance";
var List = /** @class */ (function () {
    function List(values, model) {
        this.model = model;
        this._entities = new Array();
        this.build(values);
    }
    List.prototype[Symbol.iterator] = function () {
        var pointer = 0;
        var entities = this._entities;
        return {
            next: function () {
                if (pointer < entities.length) {
                    var index = pointer++;
                    if (this.model && entities[index].constructor !== this.model)
                        entities[index] = getObject(this.model, [], this.object[index]);
                    return {
                        done: false,
                        value: entities[index]
                    };
                }
                else {
                    return {
                        done: true,
                        value: null
                    };
                }
            }
        };
    };
    List.prototype.add = function (entity) {
        this._entities.push(this.createObject(entity));
    };
    List.prototype.addRange = function (entities) {
        var e_1, _a;
        try {
            for (var entities_1 = tslib_1.__values(entities), entities_1_1 = entities_1.next(); !entities_1_1.done; entities_1_1 = entities_1.next()) {
                var entity = entities_1_1.value;
                this.add(entity);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (entities_1_1 && !entities_1_1.done && (_a = entities_1.return)) _a.call(entities_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    List.prototype.all = function (predicate) {
        return this._entities.every(predicate);
    };
    List.prototype.any = function (predicate) {
        return this._entities.some(predicate);
    };
    List.prototype.average = function (transform) {
        return this.sum(transform) / this.count(transform);
    };
    List.prototype.contains = function (element) {
        return this._entities.some(function (x) { return x === element; });
    };
    List.prototype.concat = function (items) {
        if (items) {
            this.addRange(items);
            return new List(this._entities, this.model);
        }
        return undefined;
    };
    List.prototype.count = function (predicate) {
        return predicate ? this.where(predicate).count() : this._entities.length;
    };
    List.prototype.where = function (predicate) {
        return new List(this._entities.filter(predicate), this.model);
    };
    List.prototype.distinct = function () {
        return this.where(function (value, index, iter) {
            return (isObject(value)) ?
                iter.findIndex(function (t) { return isEqual(t, value); }) == index :
                iter.indexOf(value) === index;
        });
    };
    List.prototype.distinctBy = function (keySelector) {
        var entityGroup = this.groupBy(keySelector);
        return Object.keys(entityGroup).reduce(function (resource, key) {
            resource.add(entityGroup[key][0]);
            return resource;
        }, new List());
    };
    List.prototype.elementAt = function (index) {
        if (this._entities.length > index && index >= 0)
            return this._entities[index];
    };
    List.prototype.except = function (collection) {
        return this.where(function (x) { return !collection.contains(x); });
    };
    List.prototype.first = function (predicate) {
        if (this.count()) {
            return predicate ? this.where(predicate).first() : this._entities[0];
        }
        else {
            throw new Error('No result found.');
        }
    };
    List.prototype.firstOrDefault = function (predicate) {
        return this.count() ? this.first(predicate) : undefined;
    };
    List.prototype.forEach = function (action) {
        return this._entities.forEach(action);
    };
    List.prototype.aggregate = function (accumulator, initialValue) {
        return this._entities.reduce(accumulator, initialValue);
    };
    List.prototype.groupBy = function (grouper, mapper) {
        if (!mapper)
            mapper = function (value) { return (value); };
        return this.aggregate(function (ac, v) { return (ac[grouper(v)] ? ac[grouper(v)].push(mapper(v)) : ac[grouper(v)] = [mapper(v)], ac); }, {});
    };
    List.prototype.insert = function (index, element) {
        if (index < 0 || index > this._entities.length) {
            throw new Error('Index is out of range.');
        }
        this._entities.splice(index, 0, this.createObject(element));
    };
    List.prototype.join = function (seperator) {
        return this._entities ? this._entities.join(seperator) : null;
    };
    List.prototype.last = function (predicate) {
        if (this.count()) {
            return predicate ? this.where(predicate).last() : this._entities[this.count() - 1];
        }
        else {
            throw Error('No result found.');
        }
    };
    List.prototype.lastOrDefault = function (predicate) {
        return this.count() ? this.last(predicate) : undefined;
    };
    Object.defineProperty(List.prototype, "length", {
        get: function () {
            return this._entities ? this._entities.length : 0;
        },
        enumerable: true,
        configurable: true
    });
    List.prototype.max = function (predicate) {
        if (!predicate)
            return this.aggregate(function (x, y) { return x > y ? x : y; });
        else
            return Math.max.apply(Math, tslib_1.__spread(this._entities.map(predicate)));
    };
    List.prototype.maxBy = function (keySelector) {
        var entityGroup = this.groupBy(keySelector);
        var keys = Object.keys(entityGroup);
        var maxKey = Math.max.apply(Math, tslib_1.__spread(keys));
        return entityGroup[maxKey][0];
    };
    List.prototype.min = function (predicate) {
        if (!predicate)
            return this.aggregate(function (x, y) { return x < y ? x : y; });
        else
            return Math.min.apply(Math, tslib_1.__spread(this._entities.map(predicate)));
    };
    List.prototype.minBy = function (keySelector) {
        var entityGroup = this.groupBy(keySelector);
        var keys = Object.keys(entityGroup);
        var minKey = Math.min.apply(Math, tslib_1.__spread(keys));
        return entityGroup[minKey][0];
    };
    List.prototype.orderBy = function (predicate) {
        return new List(this._entities.sort(this.customSort(predicate, false)));
    };
    List.prototype.orderByDescending = function (predicate) {
        return new List(this._entities.sort(this.customSort(predicate, true)));
    };
    List.prototype.pop = function () {
        return this._entities.pop();
    };
    List.prototype.remove = function (element) {
        return this._entities.indexOf(element) !== -1 ? (this.removeAt(this._entities.indexOf(element)), true) : false;
    };
    List.prototype.removeAll = function (predicate) {
        return this.where(this._negate(predicate));
    };
    List.prototype.removeAt = function (index) {
        this._entities.splice(index, 1);
    };
    List.prototype.reverse = function () {
        return this._entities ? new List(this._entities.reverse(), this.model) : new List();
    };
    List.prototype.select = function (mapper) {
        return this._entities.map(mapper);
    };
    List.prototype.single = function (predicate) {
        if (this.count() !== 1) {
            throw new Error('Item does not contain one element.');
        }
        else {
            return this.first(predicate);
        }
    };
    List.prototype.singleOrDefault = function (predicate) {
        return this.count() ? this.first(predicate) : undefined;
    };
    List.prototype.shift = function () {
        return this._entities ? this._entities.shift() : undefined;
    };
    List.prototype.skip = function (amount) {
        return this._entities.slice(Math.max(0, amount));
    };
    List.prototype.sum = function (transform) {
        return transform ? this.select(transform).sum() : this.aggregate(function (ac, v) { return ac += (+v); }, 0);
    };
    List.prototype.take = function (amount) {
        return this._entities.slice(0, Math.max(0, amount));
    };
    Object.defineProperty(List.prototype, "toLocaleString", {
        get: function () {
            return this._entities ? this._entities.toLocaleString() : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "toString", {
        get: function () {
            return this._entities ? this._entities.toString() : null;
        },
        enumerable: true,
        configurable: true
    });
    List.prototype._negate = function (predicate) {
        return function () {
            return !predicate.apply(this, arguments);
        };
    };
    List.prototype.customSort = function (predicate, orderByDescending) {
        return function (a, b) {
            var first = predicate(a);
            var second = predicate(b);
            if (first > second) {
                return !orderByDescending ? 1 : -1;
            }
            else if (first < second) {
                return !orderByDescending ? -1 : 1;
            }
            else {
                return 0;
            }
        };
    };
    List.prototype.build = function (values) {
        if (values && values.length > 0) {
            this.addRange(values);
        }
    };
    List.prototype.createObject = function (object) {
        if (this.model && object.constructor !== this.model)
            return getObject(this.model, [], object);
        return object;
    };
    return List;
}());
export { List };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9nZW5lcmljcy8iLCJzb3VyY2VzIjpbIm1vZGVscy9saXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBQ3RELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUV0RDtJQUVJLGNBQVksTUFBWSxFQUFVLEtBQWU7UUFBZixVQUFLLEdBQUwsS0FBSyxDQUFVO1FBRHpDLGNBQVMsR0FBUSxJQUFJLEtBQUssRUFBSyxDQUFDO1FBRXBDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVELGVBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFqQjtRQUNJLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQztRQUNoQixJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQzlCLE9BQU87WUFDSCxJQUFJLEVBQUo7Z0JBQ0ksSUFBSSxPQUFPLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRTtvQkFDM0IsSUFBSSxLQUFLLEdBQUcsT0FBTyxFQUFFLENBQUE7b0JBQ3JCLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxLQUFLLElBQUksQ0FBQyxLQUFLO3dCQUN4RCxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtvQkFDbkUsT0FBTzt3QkFDSCxJQUFJLEVBQUUsS0FBSzt3QkFDWCxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQztxQkFDekIsQ0FBQTtpQkFDSjtxQkFBTTtvQkFDSCxPQUFPO3dCQUNILElBQUksRUFBRSxJQUFJO3dCQUNWLEtBQUss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QU07Z0JBQ0gsT0FBTyxDQUFDLENBQUE7YUFDWDtRQUNMLENBQUMsQ0FBQTtJQUNMLENBQUM7SUFFTyxvQkFBSyxHQUFiLFVBQWMsTUFBVztRQUNyQixJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1NBQ3hCO0lBQ0wsQ0FBQztJQUVPLDJCQUFZLEdBQXBCLFVBQXFCLE1BQU07UUFDdkIsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxXQUFXLEtBQUssSUFBSSxDQUFDLEtBQUs7WUFDL0MsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDNUMsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLFdBQUM7QUFBRCxDQUFDLEFBMVJELElBMFJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZSB9IGZyb20gJy4uL2Z1bmN0aW9ucy90eXBlJ1xyXG5pbXBvcnQgeyBpc09iamVjdCwgaXNFcXVhbCB9IGZyb20gJy4uL2Z1bmN0aW9ucy91dGlscydcclxuaW1wb3J0IHsgZ2V0T2JqZWN0IH0gZnJvbSBcIi4uL2Z1bmN0aW9ucy9nZXQtaW5zdGFuY2VcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBMaXN0PFQ+ICB7XHJcbiAgICBwcml2YXRlIF9lbnRpdGllczogVFtdID0gbmV3IEFycmF5PFQ+KCk7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZXM/OiBUW10sIHByaXZhdGUgbW9kZWw/OiBUeXBlPFQ+KSB7XHJcbiAgICAgICAgdGhpcy5idWlsZCh2YWx1ZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIFtTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhdG9yPFQ+IHtcclxuICAgICAgICBsZXQgcG9pbnRlciA9IDA7XHJcbiAgICAgICAgbGV0IGVudGl0aWVzID0gdGhpcy5fZW50aXRpZXM7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmV4dCgpOiBJdGVyYXRvclJlc3VsdDxUPiB7XHJcbiAgICAgICAgICAgICAgICBpZiAocG9pbnRlciA8IGVudGl0aWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IHBvaW50ZXIrK1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGVsICYmIGVudGl0aWVzW2luZGV4XS5jb25zdHJ1Y3RvciAhPT0gdGhpcy5tb2RlbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW50aXRpZXNbaW5kZXhdID0gZ2V0T2JqZWN0KHRoaXMubW9kZWwsIFtdLCB0aGlzLm9iamVjdFtpbmRleF0pXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBlbnRpdGllc1tpbmRleF1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgYWRkKGVudGl0eTogVCkge1xyXG4gICAgICAgIHRoaXMuX2VudGl0aWVzLnB1c2godGhpcy5jcmVhdGVPYmplY3QoZW50aXR5KSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkUmFuZ2UoZW50aXRpZXM6IFRbXSkge1xyXG4gICAgICAgIGZvciAobGV0IGVudGl0eSBvZiBlbnRpdGllcylcclxuICAgICAgICAgICAgdGhpcy5hZGQoZW50aXR5KTtcclxuICAgIH1cclxuXHJcbiAgICBhbGwocHJlZGljYXRlOiAodmFsdWU/OiBULCBpbmRleD86IG51bWJlciwgbGlzdD86IFRbXSkgPT4gYm9vbGVhbik6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbnRpdGllcy5ldmVyeShwcmVkaWNhdGUpO1xyXG4gICAgfVxyXG4gICAgYW55KHByZWRpY2F0ZTogKHZhbHVlPzogVCwgaW5kZXg/OiBudW1iZXIsIGxpc3Q/OiBUW10pID0+IGJvb2xlYW4pOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZW50aXRpZXMuc29tZShwcmVkaWNhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGF2ZXJhZ2UodHJhbnNmb3JtPzogKHZhbHVlPzogVCwgaW5kZXg/OiBudW1iZXIsIGxpc3Q/OiBUW10pID0+IGFueSk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3VtKHRyYW5zZm9ybSkgLyB0aGlzLmNvdW50KHRyYW5zZm9ybSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29udGFpbnMoZWxlbWVudDogVCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbnRpdGllcy5zb21lKHggPT4geCA9PT0gZWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uY2F0KGl0ZW1zOiBUW10pOiBMaXN0PFQ+IHtcclxuICAgICAgICBpZiAoaXRlbXMpIHtcclxuICAgICAgICAgICAgdGhpcy5hZGRSYW5nZShpdGVtcyk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTGlzdDxUPih0aGlzLl9lbnRpdGllcywgdGhpcy5tb2RlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgY291bnQocHJlZGljYXRlPzogKHZhbHVlPzogVCwgaW5kZXg/OiBudW1iZXIsIGxpc3Q/OiBUW10pID0+IGJvb2xlYW4pOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBwcmVkaWNhdGUgPyB0aGlzLndoZXJlKHByZWRpY2F0ZSkuY291bnQoKSA6IHRoaXMuX2VudGl0aWVzLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICB3aGVyZShwcmVkaWNhdGU6ICh2YWx1ZT86IFQsIGluZGV4PzogbnVtYmVyLCBsaXN0PzogVFtdKSA9PiBib29sZWFuKTogTGlzdDxUPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0PFQ+KHRoaXMuX2VudGl0aWVzLmZpbHRlcihwcmVkaWNhdGUpLCB0aGlzLm1vZGVsKTtcclxuICAgIH1cclxuXHJcbiAgICBkaXN0aW5jdCgpOiBMaXN0PFQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy53aGVyZSgodmFsdWUsIGluZGV4LCBpdGVyKSA9PlxyXG4gICAgICAgICAgICAoaXNPYmplY3QodmFsdWUpKSA/XHJcbiAgICAgICAgICAgICAgICBpdGVyLmZpbmRJbmRleCh0ID0+IGlzRXF1YWwodCwgdmFsdWUpKSA9PSBpbmRleCA6XHJcbiAgICAgICAgICAgICAgICBpdGVyLmluZGV4T2YodmFsdWUpID09PSBpbmRleFxyXG4gICAgICAgIClcclxuICAgIH1cclxuXHJcbiAgICBkaXN0aW5jdEJ5KGtleVNlbGVjdG9yOiAoa2V5OiBUKSA9PiBzdHJpbmcgfCBudW1iZXIpOiBMaXN0PFQ+IHtcclxuICAgICAgICBjb25zdCBlbnRpdHlHcm91cCA9IHRoaXMuZ3JvdXBCeShrZXlTZWxlY3RvcilcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoZW50aXR5R3JvdXApLnJlZHVjZSgocmVzb3VyY2U6IExpc3Q8VD4sIGtleSkgPT4ge1xyXG4gICAgICAgICAgICByZXNvdXJjZS5hZGQoZW50aXR5R3JvdXBba2V5XVswXSlcclxuICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlXHJcbiAgICAgICAgfSwgbmV3IExpc3Q8VD4oKSlcclxuICAgIH1cclxuXHJcbiAgICBlbGVtZW50QXQoaW5kZXg6IG51bWJlcik6IFQge1xyXG4gICAgICAgIGlmICh0aGlzLl9lbnRpdGllcy5sZW5ndGggPiBpbmRleCAmJiBpbmRleCA+PSAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZW50aXRpZXNbaW5kZXhdO1xyXG4gICAgfVxyXG5cclxuICAgIGV4Y2VwdChjb2xsZWN0aW9uOiBMaXN0PFQ+KTogTGlzdDxUPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2hlcmUoeCA9PiAhY29sbGVjdGlvbi5jb250YWlucyh4KSlcclxuICAgIH1cclxuXHJcbiAgICBmaXJzdChwcmVkaWNhdGU/OiAodmFsdWU/OiBULCBpbmRleD86IG51bWJlciwgbGlzdD86IFRbXSkgPT4gYm9vbGVhbik6IFQgfCBFcnJvciB7XHJcbiAgICAgICAgaWYgKHRoaXMuY291bnQoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcHJlZGljYXRlID8gdGhpcy53aGVyZShwcmVkaWNhdGUpLmZpcnN0KCkgOiB0aGlzLl9lbnRpdGllc1swXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHJlc3VsdCBmb3VuZC4nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZmlyc3RPckRlZmF1bHQocHJlZGljYXRlPzogKHZhbHVlPzogVCwgaW5kZXg/OiBudW1iZXIsIGxpc3Q/OiBUW10pID0+IGJvb2xlYW4pOiBUIHwgRXJyb3Ige1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvdW50KCkgPyB0aGlzLmZpcnN0KHByZWRpY2F0ZSkgOiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yRWFjaChhY3Rpb246ICh2YWx1ZT86IFQsIGluZGV4PzogbnVtYmVyLCBsaXN0PzogVFtdKSA9PiBhbnkpOiB2b2lkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZW50aXRpZXMuZm9yRWFjaChhY3Rpb24pXHJcbiAgICB9XHJcblxyXG5cclxuICAgIGFnZ3JlZ2F0ZTxVPihhY2N1bXVsYXRvcjogKGFjY3VtOiBVLCB2YWx1ZT86IFQsIGluZGV4PzogbnVtYmVyLCBsaXN0PzogVFtdKSA9PiBhbnksIGluaXRpYWxWYWx1ZT86IFUpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbnRpdGllcy5yZWR1Y2UoYWNjdW11bGF0b3IsIGluaXRpYWxWYWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ3JvdXBCeShncm91cGVyOiAoa2V5OiBUKSA9PiBhbnksIG1hcHBlcj86IChlbGVtZW50OiBUKSA9PiBhbnkpOiBhbnkge1xyXG4gICAgICAgIGlmICghbWFwcGVyKVxyXG4gICAgICAgICAgICBtYXBwZXIgPSB2YWx1ZSA9PiAodmFsdWUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFnZ3JlZ2F0ZVxyXG4gICAgICAgICAgICAoKGFjLCB2KSA9PiAoKDxhbnk+YWMpW2dyb3VwZXIodildID8gKDxhbnk+YWMpW2dyb3VwZXIodildLnB1c2gobWFwcGVyKHYpKSA6ICg8YW55PmFjKVtncm91cGVyKHYpXSA9IFttYXBwZXIodildLCBhYyksIHt9KTtcclxuICAgIH1cclxuXHJcbiAgICBpbnNlcnQoaW5kZXg6IG51bWJlciwgZWxlbWVudDogVCk6IHZvaWQgfCBFcnJvciB7XHJcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IHRoaXMuX2VudGl0aWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luZGV4IGlzIG91dCBvZiByYW5nZS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fZW50aXRpZXMuc3BsaWNlKGluZGV4LCAwLCB0aGlzLmNyZWF0ZU9iamVjdChlbGVtZW50KSk7XHJcbiAgICB9XHJcblxyXG4gICAgam9pbihzZXBlcmF0b3I/OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbnRpdGllcyA/IHRoaXMuX2VudGl0aWVzLmpvaW4oc2VwZXJhdG9yKSA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgbGFzdChwcmVkaWNhdGU/OiAodmFsdWU/OiBULCBpbmRleD86IG51bWJlciwgbGlzdD86IFRbXSkgPT4gYm9vbGVhbik6IFQgfCBFcnJvciB7XHJcbiAgICAgICAgaWYgKHRoaXMuY291bnQoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcHJlZGljYXRlID8gdGhpcy53aGVyZShwcmVkaWNhdGUpLmxhc3QoKSA6IHRoaXMuX2VudGl0aWVzW3RoaXMuY291bnQoKSAtIDFdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdObyByZXN1bHQgZm91bmQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxhc3RPckRlZmF1bHQocHJlZGljYXRlPzogKHZhbHVlPzogVCwgaW5kZXg/OiBudW1iZXIsIGxpc3Q/OiBUW10pID0+IGJvb2xlYW4pOiBUIHwgRXJyb3Ige1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvdW50KCkgPyB0aGlzLmxhc3QocHJlZGljYXRlKSA6IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbGVuZ3RoKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbnRpdGllcyA/IHRoaXMuX2VudGl0aWVzLmxlbmd0aCA6IDA7XHJcbiAgICB9XHJcblxyXG4gICAgbWF4KCk6IG51bWJlclxyXG4gICAgbWF4KHByZWRpY2F0ZTogKHZhbHVlOiBULCBpbmRleDogbnVtYmVyLCBsaXN0OiBUW10pID0+IG51bWJlcik6IG51bWJlclxyXG4gICAgbWF4KHByZWRpY2F0ZT86ICh2YWx1ZTogVCwgaW5kZXg6IG51bWJlciwgbGlzdDogVFtdKSA9PiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIGlmICghcHJlZGljYXRlKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hZ2dyZWdhdGUoKHgsIHkpID0+IHggPiB5ID8geCA6IHkpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KC4uLnRoaXMuX2VudGl0aWVzLm1hcChwcmVkaWNhdGUpKVxyXG4gICAgfVxyXG5cclxuICAgIG1heEJ5KGtleVNlbGVjdG9yOiAoa2V5OiBUKSA9PiBudW1iZXIpOiBUIHtcclxuICAgICAgICBjb25zdCBlbnRpdHlHcm91cCA9IHRoaXMuZ3JvdXBCeShrZXlTZWxlY3RvcilcclxuICAgICAgICBsZXQga2V5czogYW55W10gPSBPYmplY3Qua2V5cyhlbnRpdHlHcm91cCk7XHJcbiAgICAgICAgbGV0IG1heEtleSA9IE1hdGgubWF4KC4uLmtleXMpO1xyXG4gICAgICAgIHJldHVybiBlbnRpdHlHcm91cFttYXhLZXldWzBdO1xyXG4gICAgfVxyXG5cclxuICAgIG1pbigpOiBudW1iZXJcclxuICAgIG1pbihwcmVkaWNhdGU6ICh2YWx1ZTogVCwgaW5kZXg6IG51bWJlciwgbGlzdDogVFtdKSA9PiBudW1iZXIpOiBudW1iZXJcclxuICAgIG1pbihwcmVkaWNhdGU/OiAodmFsdWU6IFQsIGluZGV4OiBudW1iZXIsIGxpc3Q6IFRbXSkgPT4gbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAoIXByZWRpY2F0ZSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWdncmVnYXRlKCh4LCB5KSA9PiB4IDwgeSA/IHggOiB5KTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbiguLi50aGlzLl9lbnRpdGllcy5tYXAocHJlZGljYXRlKSlcclxuICAgIH1cclxuXHJcbiAgICBtaW5CeShrZXlTZWxlY3RvcjogKGtleTogVCkgPT4gbnVtYmVyKTogVCB7XHJcbiAgICAgICAgY29uc3QgZW50aXR5R3JvdXAgPSB0aGlzLmdyb3VwQnkoa2V5U2VsZWN0b3IpXHJcbiAgICAgICAgbGV0IGtleXM6IGFueVtdID0gT2JqZWN0LmtleXMoZW50aXR5R3JvdXApO1xyXG4gICAgICAgIGxldCBtaW5LZXkgPSBNYXRoLm1pbiguLi5rZXlzKTtcclxuICAgICAgICByZXR1cm4gZW50aXR5R3JvdXBbbWluS2V5XVswXTtcclxuICAgIH1cclxuXHJcbiAgICBvcmRlckJ5KHByZWRpY2F0ZTogKGtleTogVCkgPT4gYW55KTogTGlzdDxUPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0PFQ+KHRoaXMuX2VudGl0aWVzLnNvcnQodGhpcy5jdXN0b21Tb3J0KHByZWRpY2F0ZSwgZmFsc2UpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgb3JkZXJCeURlc2NlbmRpbmcocHJlZGljYXRlOiAoa2V5OiBUKSA9PiBhbnkpOiBMaXN0PFQ+IHtcclxuICAgICAgICByZXR1cm4gbmV3IExpc3Q8VD4odGhpcy5fZW50aXRpZXMuc29ydCh0aGlzLmN1c3RvbVNvcnQocHJlZGljYXRlLCB0cnVlKSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHBvcCgpOiBUIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZW50aXRpZXMucG9wKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlKGVsZW1lbnQ6IFQpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZW50aXRpZXMuaW5kZXhPZihlbGVtZW50KSAhPT0gLTEgPyAodGhpcy5yZW1vdmVBdCh0aGlzLl9lbnRpdGllcy5pbmRleE9mKGVsZW1lbnQpKSwgdHJ1ZSkgOiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJlbW92ZUFsbChwcmVkaWNhdGU6ICh2YWx1ZT86IFQsIGluZGV4PzogbnVtYmVyLCBsaXN0PzogVFtdKSA9PiBib29sZWFuKTogTGlzdDxUPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2hlcmUodGhpcy5fbmVnYXRlKHByZWRpY2F0ZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUF0KGluZGV4OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9lbnRpdGllcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldmVyc2UoKTogTGlzdDxUPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VudGl0aWVzID8gbmV3IExpc3Q8VD4odGhpcy5fZW50aXRpZXMucmV2ZXJzZSgpLCB0aGlzLm1vZGVsKSA6IG5ldyBMaXN0PFQ+KCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHNlbGVjdChtYXBwZXI6ICh2YWx1ZT86IFQsIGluZGV4PzogbnVtYmVyLCBsaXN0PzogVFtdKSA9PiBhbnkpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbnRpdGllcy5tYXAobWFwcGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBzaW5nbGUocHJlZGljYXRlPzogKHZhbHVlPzogVCwgaW5kZXg/OiBudW1iZXIsIGxpc3Q/OiBUW10pID0+IGJvb2xlYW4pOiBUIHwgRXJyb3Ige1xyXG4gICAgICAgIGlmICh0aGlzLmNvdW50KCkgIT09IDEpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJdGVtIGRvZXMgbm90IGNvbnRhaW4gb25lIGVsZW1lbnQuJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlyc3QocHJlZGljYXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2luZ2xlT3JEZWZhdWx0KHByZWRpY2F0ZT86ICh2YWx1ZT86IFQsIGluZGV4PzogbnVtYmVyLCBsaXN0PzogVFtdKSA9PiBib29sZWFuKTogVCB8IEVycm9yIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb3VudCgpID8gdGhpcy5maXJzdChwcmVkaWNhdGUpIDogdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIHNoaWZ0KCk6IFQgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbnRpdGllcyA/IHRoaXMuX2VudGl0aWVzLnNoaWZ0KCkgOiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgc2tpcChhbW91bnQ6IG51bWJlcik6IFRbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VudGl0aWVzLnNsaWNlKE1hdGgubWF4KDAsIGFtb3VudCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHN1bSh0cmFuc2Zvcm0/OiAodmFsdWU/OiBULCBpbmRleD86IG51bWJlciwgbGlzdD86IFRbXSkgPT4gbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtID8gdGhpcy5zZWxlY3QodHJhbnNmb3JtKS5zdW0oKSA6IHRoaXMuYWdncmVnYXRlKChhYywgdikgPT4gYWMgKz0gKCt2KSwgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGFrZShhbW91bnQ6IG51bWJlcik6IExpc3Q8VD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbnRpdGllcy5zbGljZSgwLCBNYXRoLm1heCgwLCBhbW91bnQpKSBhcyBhbnk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRvTG9jYWxlU3RyaW5nKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbnRpdGllcyA/IHRoaXMuX2VudGl0aWVzLnRvTG9jYWxlU3RyaW5nKCkgOiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB0b1N0cmluZygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZW50aXRpZXMgPyB0aGlzLl9lbnRpdGllcy50b1N0cmluZygpIDogbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9uZWdhdGU8VD4ocHJlZGljYXRlOiAodmFsdWU/OiBULCBpbmRleD86IG51bWJlciwgbGlzdD86IFRbXSkgPT4gYm9vbGVhbik6ICgpID0+IGFueSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpOiBhbnkge1xyXG4gICAgICAgICAgICByZXR1cm4gIXByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjdXN0b21Tb3J0KHByZWRpY2F0ZTogKGtleTogVCkgPT4gYW55LCBvcmRlckJ5RGVzY2VuZGluZzogYm9vbGVhbikge1xyXG4gICAgICAgIHJldHVybiAoYTogVCwgYjogVCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBmaXJzdCA9IHByZWRpY2F0ZShhKVxyXG4gICAgICAgICAgICBjb25zdCBzZWNvbmQgPSBwcmVkaWNhdGUoYilcclxuICAgICAgICAgICAgaWYgKGZpcnN0ID4gc2Vjb25kKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gIW9yZGVyQnlEZXNjZW5kaW5nID8gMSA6IC0xXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlyc3QgPCBzZWNvbmQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhb3JkZXJCeURlc2NlbmRpbmcgPyAtMSA6IDFcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBidWlsZCh2YWx1ZXM6IFRbXSkge1xyXG4gICAgICAgIGlmICh2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5hZGRSYW5nZSh2YWx1ZXMpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY3JlYXRlT2JqZWN0KG9iamVjdCkge1xyXG4gICAgICAgIGlmICh0aGlzLm1vZGVsICYmIG9iamVjdC5jb25zdHJ1Y3RvciAhPT0gdGhpcy5tb2RlbClcclxuICAgICAgICAgICAgcmV0dXJuIGdldE9iamVjdCh0aGlzLm1vZGVsLCBbXSwgb2JqZWN0KVxyXG4gICAgICAgIHJldHVybiBvYmplY3Q7XHJcbiAgICB9XHJcbn0iXX0=