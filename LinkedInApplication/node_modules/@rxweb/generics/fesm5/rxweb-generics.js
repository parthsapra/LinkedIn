import { __read, __values, __spread } from 'tslib';

function isObject(value) {
    return !!value && typeof value === 'object';
}
function isEqual(first, second) {
    return Object.entries(first).every(function (_a) {
        var _b = __read(_a, 2), key = _b[0], value = _b[1];
        return (isObject(value) ? isEqual(second[key], value) : second[key] === value);
    });
}

function getInstance(model, objectArguments) {
    ///resolution of issue https://github.com/rxweb/rxweb/issues/188
    return Reflect.construct(model, objectArguments);
}
function getObject(model, objectArguments, jObject) {
    var instance = getInstance(model, objectArguments);
    Object.keys(jObject).forEach(function (t) {
        instance[t] = jObject[t];
    });
    return instance;
}

var List = /** @class */ (function () {
    function List(values, model) {
        this.model = model;
        this._entities = new Array();
        this.build(values);
    }
    List.prototype[Symbol.iterator] = function () {
        var pointer = 0;
        var entities = this._entities;
        return {
            next: function () {
                if (pointer < entities.length) {
                    var index = pointer++;
                    if (this.model && entities[index].constructor !== this.model)
                        entities[index] = getObject(this.model, [], this.object[index]);
                    return {
                        done: false,
                        value: entities[index]
                    };
                }
                else {
                    return {
                        done: true,
                        value: null
                    };
                }
            }
        };
    };
    List.prototype.add = function (entity) {
        this._entities.push(this.createObject(entity));
    };
    List.prototype.addRange = function (entities) {
        var e_1, _a;
        try {
            for (var entities_1 = __values(entities), entities_1_1 = entities_1.next(); !entities_1_1.done; entities_1_1 = entities_1.next()) {
                var entity = entities_1_1.value;
                this.add(entity);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (entities_1_1 && !entities_1_1.done && (_a = entities_1.return)) _a.call(entities_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    List.prototype.all = function (predicate) {
        return this._entities.every(predicate);
    };
    List.prototype.any = function (predicate) {
        return this._entities.some(predicate);
    };
    List.prototype.average = function (transform) {
        return this.sum(transform) / this.count(transform);
    };
    List.prototype.contains = function (element) {
        return this._entities.some(function (x) { return x === element; });
    };
    List.prototype.concat = function (items) {
        if (items) {
            this.addRange(items);
            return new List(this._entities, this.model);
        }
        return undefined;
    };
    List.prototype.count = function (predicate) {
        return predicate ? this.where(predicate).count() : this._entities.length;
    };
    List.prototype.where = function (predicate) {
        return new List(this._entities.filter(predicate), this.model);
    };
    List.prototype.distinct = function () {
        return this.where(function (value, index, iter) {
            return (isObject(value)) ?
                iter.findIndex(function (t) { return isEqual(t, value); }) == index :
                iter.indexOf(value) === index;
        });
    };
    List.prototype.distinctBy = function (keySelector) {
        var entityGroup = this.groupBy(keySelector);
        return Object.keys(entityGroup).reduce(function (resource, key) {
            resource.add(entityGroup[key][0]);
            return resource;
        }, new List());
    };
    List.prototype.elementAt = function (index) {
        if (this._entities.length > index && index >= 0)
            return this._entities[index];
    };
    List.prototype.except = function (collection) {
        return this.where(function (x) { return !collection.contains(x); });
    };
    List.prototype.first = function (predicate) {
        if (this.count()) {
            return predicate ? this.where(predicate).first() : this._entities[0];
        }
        else {
            throw new Error('No result found.');
        }
    };
    List.prototype.firstOrDefault = function (predicate) {
        return this.count() ? this.first(predicate) : undefined;
    };
    List.prototype.forEach = function (action) {
        return this._entities.forEach(action);
    };
    List.prototype.aggregate = function (accumulator, initialValue) {
        return this._entities.reduce(accumulator, initialValue);
    };
    List.prototype.groupBy = function (grouper, mapper) {
        if (!mapper)
            mapper = function (value) { return (value); };
        return this.aggregate(function (ac, v) { return (ac[grouper(v)] ? ac[grouper(v)].push(mapper(v)) : ac[grouper(v)] = [mapper(v)], ac); }, {});
    };
    List.prototype.insert = function (index, element) {
        if (index < 0 || index > this._entities.length) {
            throw new Error('Index is out of range.');
        }
        this._entities.splice(index, 0, this.createObject(element));
    };
    List.prototype.join = function (seperator) {
        return this._entities ? this._entities.join(seperator) : null;
    };
    List.prototype.last = function (predicate) {
        if (this.count()) {
            return predicate ? this.where(predicate).last() : this._entities[this.count() - 1];
        }
        else {
            throw Error('No result found.');
        }
    };
    List.prototype.lastOrDefault = function (predicate) {
        return this.count() ? this.last(predicate) : undefined;
    };
    Object.defineProperty(List.prototype, "length", {
        get: function () {
            return this._entities ? this._entities.length : 0;
        },
        enumerable: true,
        configurable: true
    });
    List.prototype.max = function (predicate) {
        if (!predicate)
            return this.aggregate(function (x, y) { return x > y ? x : y; });
        else
            return Math.max.apply(Math, __spread(this._entities.map(predicate)));
    };
    List.prototype.maxBy = function (keySelector) {
        var entityGroup = this.groupBy(keySelector);
        var keys = Object.keys(entityGroup);
        var maxKey = Math.max.apply(Math, __spread(keys));
        return entityGroup[maxKey][0];
    };
    List.prototype.min = function (predicate) {
        if (!predicate)
            return this.aggregate(function (x, y) { return x < y ? x : y; });
        else
            return Math.min.apply(Math, __spread(this._entities.map(predicate)));
    };
    List.prototype.minBy = function (keySelector) {
        var entityGroup = this.groupBy(keySelector);
        var keys = Object.keys(entityGroup);
        var minKey = Math.min.apply(Math, __spread(keys));
        return entityGroup[minKey][0];
    };
    List.prototype.orderBy = function (predicate) {
        return new List(this._entities.sort(this.customSort(predicate, false)));
    };
    List.prototype.orderByDescending = function (predicate) {
        return new List(this._entities.sort(this.customSort(predicate, true)));
    };
    List.prototype.pop = function () {
        return this._entities.pop();
    };
    List.prototype.remove = function (element) {
        return this._entities.indexOf(element) !== -1 ? (this.removeAt(this._entities.indexOf(element)), true) : false;
    };
    List.prototype.removeAll = function (predicate) {
        return this.where(this._negate(predicate));
    };
    List.prototype.removeAt = function (index) {
        this._entities.splice(index, 1);
    };
    List.prototype.reverse = function () {
        return this._entities ? new List(this._entities.reverse(), this.model) : new List();
    };
    List.prototype.select = function (mapper) {
        return this._entities.map(mapper);
    };
    List.prototype.single = function (predicate) {
        if (this.count() !== 1) {
            throw new Error('Item does not contain one element.');
        }
        else {
            return this.first(predicate);
        }
    };
    List.prototype.singleOrDefault = function (predicate) {
        return this.count() ? this.first(predicate) : undefined;
    };
    List.prototype.shift = function () {
        return this._entities ? this._entities.shift() : undefined;
    };
    List.prototype.skip = function (amount) {
        return this._entities.slice(Math.max(0, amount));
    };
    List.prototype.sum = function (transform) {
        return transform ? this.select(transform).sum() : this.aggregate(function (ac, v) { return ac += (+v); }, 0);
    };
    List.prototype.take = function (amount) {
        return this._entities.slice(0, Math.max(0, amount));
    };
    Object.defineProperty(List.prototype, "toLocaleString", {
        get: function () {
            return this._entities ? this._entities.toLocaleString() : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(List.prototype, "toString", {
        get: function () {
            return this._entities ? this._entities.toString() : null;
        },
        enumerable: true,
        configurable: true
    });
    List.prototype._negate = function (predicate) {
        return function () {
            return !predicate.apply(this, arguments);
        };
    };
    List.prototype.customSort = function (predicate, orderByDescending) {
        return function (a, b) {
            var first = predicate(a);
            var second = predicate(b);
            if (first > second) {
                return !orderByDescending ? 1 : -1;
            }
            else if (first < second) {
                return !orderByDescending ? -1 : 1;
            }
            else {
                return 0;
            }
        };
    };
    List.prototype.build = function (values) {
        if (values && values.length > 0) {
            this.addRange(values);
        }
    };
    List.prototype.createObject = function (object) {
        if (this.model && object.constructor !== this.model)
            return getObject(this.model, [], object);
        return object;
    };
    return List;
}());

export { List };
//# sourceMappingURL=rxweb-generics.js.map
