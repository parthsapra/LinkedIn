{"version":3,"file":"rxweb-generics.js","sources":["ng://@rxweb/generics/functions/utils.ts","ng://@rxweb/generics/functions/get-instance.ts","ng://@rxweb/generics/models/list.ts"],"sourcesContent":["\r\nexport function isObject(value: any): boolean {\r\n    return !!value && typeof value === 'object';\r\n}\r\n\r\nexport function isEqual(first: any, second: any): boolean {\r\n    return Object.entries(first).every(\r\n        ([key, value]) => (isObject(value) ? isEqual(second[key], value) : second[key] === value)\r\n    )\r\n}\r\n","function getInstance(model: any, objectArguments: any[]) {\r\n    ///resolution of issue https://github.com/rxweb/rxweb/issues/188\r\n    return Reflect.construct(model, objectArguments);\r\n}\r\n\r\nexport function getObject(model: any, objectArguments: any[], jObject: { [key: string]: any }) {\r\n    let instance = getInstance(model, objectArguments);\r\n    Object.keys(jObject).forEach(t => {\r\n        instance[t] = jObject[t];\r\n    })\r\n    return instance;\r\n}","import { Type } from '../functions/type'\r\nimport { isObject, isEqual } from '../functions/utils'\r\nimport { getObject } from \"../functions/get-instance\";\r\n\r\nexport class List<T>  {\r\n    private _entities: T[] = new Array<T>();\r\n    constructor(values?: T[], private model?: Type<T>) {\r\n        this.build(values);\r\n    }\r\n\r\n    [Symbol.iterator](): Iterator<T> {\r\n        let pointer = 0;\r\n        let entities = this._entities;\r\n        return {\r\n            next(): IteratorResult<T> {\r\n                if (pointer < entities.length) {\r\n                    let index = pointer++\r\n                    if (this.model && entities[index].constructor !== this.model)\r\n                        entities[index] = getObject(this.model, [], this.object[index])\r\n                    return {\r\n                        done: false,\r\n                        value: entities[index]\r\n                    }\r\n                } else {\r\n                    return {\r\n                        done: true,\r\n                        value: null\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    add(entity: T) {\r\n        this._entities.push(this.createObject(entity));\r\n    }\r\n\r\n    addRange(entities: T[]) {\r\n        for (let entity of entities)\r\n            this.add(entity);\r\n    }\r\n\r\n    all(predicate: (value?: T, index?: number, list?: T[]) => boolean): boolean {\r\n        return this._entities.every(predicate);\r\n    }\r\n    any(predicate: (value?: T, index?: number, list?: T[]) => boolean): boolean {\r\n        return this._entities.some(predicate);\r\n    }\r\n\r\n    average(transform?: (value?: T, index?: number, list?: T[]) => any): number {\r\n        return this.sum(transform) / this.count(transform);\r\n    }\r\n\r\n    contains(element: T): boolean {\r\n        return this._entities.some(x => x === element);\r\n    }\r\n\r\n    concat(items: T[]): List<T> {\r\n        if (items) {\r\n            this.addRange(items);\r\n            return new List<T>(this._entities, this.model);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    count(predicate?: (value?: T, index?: number, list?: T[]) => boolean): number {\r\n        return predicate ? this.where(predicate).count() : this._entities.length;\r\n    }\r\n\r\n    where(predicate: (value?: T, index?: number, list?: T[]) => boolean): List<T> {\r\n        return new List<T>(this._entities.filter(predicate), this.model);\r\n    }\r\n\r\n    distinct(): List<T> {\r\n        return this.where((value, index, iter) =>\r\n            (isObject(value)) ?\r\n                iter.findIndex(t => isEqual(t, value)) == index :\r\n                iter.indexOf(value) === index\r\n        )\r\n    }\r\n\r\n    distinctBy(keySelector: (key: T) => string | number): List<T> {\r\n        const entityGroup = this.groupBy(keySelector)\r\n        return Object.keys(entityGroup).reduce((resource: List<T>, key) => {\r\n            resource.add(entityGroup[key][0])\r\n            return resource\r\n        }, new List<T>())\r\n    }\r\n\r\n    elementAt(index: number): T {\r\n        if (this._entities.length > index && index >= 0)\r\n            return this._entities[index];\r\n    }\r\n\r\n    except(collection: List<T>): List<T> {\r\n        return this.where(x => !collection.contains(x))\r\n    }\r\n\r\n    first(predicate?: (value?: T, index?: number, list?: T[]) => boolean): T | Error {\r\n        if (this.count()) {\r\n            return predicate ? this.where(predicate).first() : this._entities[0];\r\n        } else {\r\n            throw new Error('No result found.');\r\n        }\r\n    }\r\n\r\n    firstOrDefault(predicate?: (value?: T, index?: number, list?: T[]) => boolean): T | Error {\r\n        return this.count() ? this.first(predicate) : undefined;\r\n    }\r\n\r\n    forEach(action: (value?: T, index?: number, list?: T[]) => any): void {\r\n        return this._entities.forEach(action)\r\n    }\r\n\r\n\r\n    aggregate<U>(accumulator: (accum: U, value?: T, index?: number, list?: T[]) => any, initialValue?: U): any {\r\n        return this._entities.reduce(accumulator, initialValue);\r\n    }\r\n\r\n    groupBy(grouper: (key: T) => any, mapper?: (element: T) => any): any {\r\n        if (!mapper)\r\n            mapper = value => (value);\r\n        return this.aggregate\r\n            ((ac, v) => ((<any>ac)[grouper(v)] ? (<any>ac)[grouper(v)].push(mapper(v)) : (<any>ac)[grouper(v)] = [mapper(v)], ac), {});\r\n    }\r\n\r\n    insert(index: number, element: T): void | Error {\r\n        if (index < 0 || index > this._entities.length) {\r\n            throw new Error('Index is out of range.');\r\n        }\r\n        this._entities.splice(index, 0, this.createObject(element));\r\n    }\r\n\r\n    join(seperator?: string): string {\r\n        return this._entities ? this._entities.join(seperator) : null;\r\n    }\r\n\r\n    last(predicate?: (value?: T, index?: number, list?: T[]) => boolean): T | Error {\r\n        if (this.count()) {\r\n            return predicate ? this.where(predicate).last() : this._entities[this.count() - 1];\r\n        } else {\r\n            throw Error('No result found.');\r\n        }\r\n    }\r\n\r\n    lastOrDefault(predicate?: (value?: T, index?: number, list?: T[]) => boolean): T | Error {\r\n        return this.count() ? this.last(predicate) : undefined;\r\n    }\r\n\r\n    get length() {\r\n        return this._entities ? this._entities.length : 0;\r\n    }\r\n\r\n    max(): number\r\n    max(predicate: (value: T, index: number, list: T[]) => number): number\r\n    max(predicate?: (value: T, index: number, list: T[]) => number): number {\r\n        if (!predicate)\r\n            return this.aggregate((x, y) => x > y ? x : y);\r\n        else\r\n            return Math.max(...this._entities.map(predicate))\r\n    }\r\n\r\n    maxBy(keySelector: (key: T) => number): T {\r\n        const entityGroup = this.groupBy(keySelector)\r\n        let keys: any[] = Object.keys(entityGroup);\r\n        let maxKey = Math.max(...keys);\r\n        return entityGroup[maxKey][0];\r\n    }\r\n\r\n    min(): number\r\n    min(predicate: (value: T, index: number, list: T[]) => number): number\r\n    min(predicate?: (value: T, index: number, list: T[]) => number): number {\r\n        if (!predicate)\r\n            return this.aggregate((x, y) => x < y ? x : y);\r\n        else\r\n            return Math.min(...this._entities.map(predicate))\r\n    }\r\n\r\n    minBy(keySelector: (key: T) => number): T {\r\n        const entityGroup = this.groupBy(keySelector)\r\n        let keys: any[] = Object.keys(entityGroup);\r\n        let minKey = Math.min(...keys);\r\n        return entityGroup[minKey][0];\r\n    }\r\n\r\n    orderBy(predicate: (key: T) => any): List<T> {\r\n        return new List<T>(this._entities.sort(this.customSort(predicate, false)));\r\n    }\r\n\r\n    orderByDescending(predicate: (key: T) => any): List<T> {\r\n        return new List<T>(this._entities.sort(this.customSort(predicate, true)));\r\n    }\r\n\r\n    pop(): T | undefined {\r\n        return this._entities.pop();\r\n    }\r\n\r\n    remove(element: T): boolean {\r\n        return this._entities.indexOf(element) !== -1 ? (this.removeAt(this._entities.indexOf(element)), true) : false;\r\n    }\r\n    removeAll(predicate: (value?: T, index?: number, list?: T[]) => boolean): List<T> {\r\n        return this.where(this._negate(predicate));\r\n    }\r\n\r\n    removeAt(index: number): void {\r\n        this._entities.splice(index, 1);\r\n    }\r\n\r\n    reverse(): List<T> {\r\n        return this._entities ? new List<T>(this._entities.reverse(), this.model) : new List<T>();\r\n    }\r\n\r\n\r\n    select(mapper: (value?: T, index?: number, list?: T[]) => any): any {\r\n        return this._entities.map(mapper);\r\n    }\r\n\r\n    single(predicate?: (value?: T, index?: number, list?: T[]) => boolean): T | Error {\r\n        if (this.count() !== 1) {\r\n            throw new Error('Item does not contain one element.');\r\n        } else {\r\n            return this.first(predicate);\r\n        }\r\n    }\r\n\r\n    singleOrDefault(predicate?: (value?: T, index?: number, list?: T[]) => boolean): T | Error {\r\n        return this.count() ? this.first(predicate) : undefined;\r\n    }\r\n\r\n    shift(): T | undefined {\r\n        return this._entities ? this._entities.shift() : undefined;\r\n    }\r\n\r\n    skip(amount: number): T[] {\r\n        return this._entities.slice(Math.max(0, amount));\r\n    }\r\n\r\n    sum(transform?: (value?: T, index?: number, list?: T[]) => number): number {\r\n        return transform ? this.select(transform).sum() : this.aggregate((ac, v) => ac += (+v), 0);\r\n    }\r\n\r\n    take(amount: number): List<T> {\r\n        return this._entities.slice(0, Math.max(0, amount)) as any;\r\n    }\r\n\r\n    get toLocaleString() {\r\n        return this._entities ? this._entities.toLocaleString() : null;\r\n    }\r\n\r\n    get toString() {\r\n        return this._entities ? this._entities.toString() : null;\r\n    }\r\n\r\n    private _negate<T>(predicate: (value?: T, index?: number, list?: T[]) => boolean): () => any {\r\n        return function (): any {\r\n            return !predicate.apply(this, arguments);\r\n        };\r\n    }\r\n\r\n    private customSort(predicate: (key: T) => any, orderByDescending: boolean) {\r\n        return (a: T, b: T) => {\r\n            const first = predicate(a)\r\n            const second = predicate(b)\r\n            if (first > second) {\r\n                return !orderByDescending ? 1 : -1\r\n            } else if (first < second) {\r\n                return !orderByDescending ? -1 : 1\r\n            } else {\r\n                return 0\r\n            }\r\n        }\r\n    }\r\n\r\n    private build(values: T[]) {\r\n        if (values && values.length > 0) {\r\n            this.addRange(values)\r\n        }\r\n    }\r\n\r\n    private createObject(object) {\r\n        if (this.model && object.constructor !== this.model)\r\n            return getObject(this.model, [], object)\r\n        return object;\r\n    }\r\n}"],"names":["tslib_1.__values"],"mappings":"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"}