import * as tslib_1 from "tslib";
import { RxHttp } from "@rxweb/http";
import { ClientDataStorage } from "@rxweb/storage";
import { componentInstanceProvider } from "./component-instance-provider";
import { routeContainer } from "./route-container";
import { encoder } from "../core/encoder";
var CoreComponent = /** @class */ (function (_super) {
    tslib_1.__extends(CoreComponent, _super);
    function CoreComponent() {
        var _this = _super.call(this) || this;
        var result = componentInstanceProvider.getResult();
        if (result && result.activatedRouteSnapshot) {
            _this.params = result.activatedRouteSnapshot.params;
            _this.queryParams = result.activatedRouteSnapshot.queryParams;
            _this.navigation = result.router;
            _this.user = routeContainer.getUser();
            _this.data = result.activatedRouteSnapshot.data;
            _this.storage = new ClientDataStorage();
            _this.parentAuthorizeConfig = result.authorizeConfig;
            var decoratorConfig = routeContainer.getModelDecorator(_this.constructor, "access");
            if (decoratorConfig)
                _this.authorizeConfig = decoratorConfig.functions;
            componentInstanceProvider.add(_this.constructor.name, _this.instanceProvider.bind(_this), _this.paramsChange.bind(_this), _this.queryParamsChange.bind(_this));
        }
        return _this;
    }
    CoreComponent.prototype.onQueryParamsChanged = function () { };
    CoreComponent.prototype.onParamsChanged = function () { };
    CoreComponent.prototype.instanceProvider = function () {
        return this;
    };
    CoreComponent.prototype.resolve = function (component) {
        return componentInstanceProvider.resolve(component.constructor);
    };
    CoreComponent.prototype.navigate = function (commands, extras) {
        return this.navigation.navigate(commands.concat(this.getParsedParams(extras)), extras);
    };
    CoreComponent.prototype.ngOnDestroy = function () {
        componentInstanceProvider.dispose(this.constructor);
    };
    CoreComponent.prototype.paramsChange = function (params) {
        this.params = params;
        this.onParamsChanged();
    };
    CoreComponent.prototype.queryParamsChange = function (queryParams) {
        this.queryParams = queryParams;
        this.onQueryParamsChanged();
    };
    CoreComponent.prototype.getParsedParams = function (extras) {
        var params = [];
        if (extras && extras.params) {
            var isEncryption = routeContainer.get().urlEncryption;
            extras.params.forEach(function (t) {
                var encode = isEncryption ? encoder.encode(t) : t;
                params.push(encode);
            });
        }
        return params;
    };
    return CoreComponent;
}(RxHttp));
export { CoreComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS1jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvYW5ndWxhci1yb3V0ZXIvIiwic291cmNlcyI6WyJjb3JlL2NvcmUtY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBQ3BDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBQ2xELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUduRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFMUM7SUFBNEMseUNBQU07SUFlOUM7UUFBQSxZQUNJLGlCQUFPLFNBZVY7UUFkRyxJQUFJLE1BQU0sR0FBRyx5QkFBeUIsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNuRCxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsc0JBQXNCLEVBQUU7WUFDekMsS0FBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDO1lBQ25ELEtBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsQ0FBQztZQUM3RCxLQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDaEMsS0FBSSxDQUFDLElBQUksR0FBRyxjQUFjLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDckMsS0FBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDO1lBQy9DLEtBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO1lBQ3ZDLEtBQUksQ0FBQyxxQkFBcUIsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDO1lBQ3BELElBQUksZUFBZSxHQUFHLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFJLENBQUMsV0FBdUIsRUFBRSxRQUFRLENBQUMsQ0FBQTtZQUM5RixJQUFJLGVBQWU7Z0JBQ2YsS0FBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUMsU0FBUyxDQUFDO1lBQ3JELHlCQUF5QixDQUFDLEdBQUcsQ0FBQyxLQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxLQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxFQUFFLEtBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxFQUFFLEtBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLENBQUMsQ0FBQztTQUMzSjs7SUFDTCxDQUFDO0lBcEJELDRDQUFvQixHQUFwQixjQUF5QixDQUFDO0lBQzFCLHVDQUFlLEdBQWYsY0FBb0IsQ0FBQztJQXFCYix3Q0FBZ0IsR0FBeEI7UUFDSSxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsK0JBQU8sR0FBUCxVQUFXLFNBQWtCO1FBQ3pCLE9BQU8seUJBQXlCLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBR0QsZ0NBQVEsR0FBUixVQUFTLFFBQWUsRUFBRSxNQUErQjtRQUNyRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzNGLENBQUM7SUFFRCxtQ0FBVyxHQUFYO1FBQ0kseUJBQXlCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRU8sb0NBQVksR0FBcEIsVUFBcUIsTUFBOEI7UUFDL0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFTyx5Q0FBaUIsR0FBekIsVUFBMEIsV0FBbUM7UUFDekQsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVPLHVDQUFlLEdBQXZCLFVBQXdCLE1BQThCO1FBQ2xELElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQTtRQUNmLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDekIsSUFBSSxZQUFZLEdBQUcsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQztZQUN0RCxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7Z0JBQ25CLElBQUksTUFBTSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNsRCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hCLENBQUMsQ0FBQyxDQUFBO1NBQ0w7UUFDRCxPQUFPLE1BQU0sQ0FBQTtJQUNqQixDQUFDO0lBQ0wsb0JBQUM7QUFBRCxDQUFDLEFBdkVELENBQTRDLE1BQU0sR0F1RWpEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25EZXN0cm95LCBUeXBlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgUm91dGVyLCBVcmxUcmVlLCBOYXZpZ2F0aW9uRXh0cmFzIH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xyXG5pbXBvcnQgeyBSeEh0dHAgfSBmcm9tIFwiQHJ4d2ViL2h0dHBcIlxyXG5pbXBvcnQgeyBDbGllbnREYXRhU3RvcmFnZSB9IGZyb20gXCJAcnh3ZWIvc3RvcmFnZVwiXHJcbmltcG9ydCB7IGNvbXBvbmVudEluc3RhbmNlUHJvdmlkZXIgfSBmcm9tIFwiLi9jb21wb25lbnQtaW5zdGFuY2UtcHJvdmlkZXJcIjtcclxuaW1wb3J0IHsgcm91dGVDb250YWluZXIgfSBmcm9tIFwiLi9yb3V0ZS1jb250YWluZXJcIjtcclxuaW1wb3J0IHsgQXV0aG9yaXplQ29uZmlnIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9hdXRob3JpemUtY29uZmlnJ1xyXG5pbXBvcnQgeyBFeHRlbmROYXZpZ2F0aW9uRXh0cmFzIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvZXh0ZW5kLW5hdmlnYXRpb24tZXh0cmFzXCI7XHJcbmltcG9ydCB7IGVuY29kZXIgfSBmcm9tIFwiLi4vY29yZS9lbmNvZGVyXCI7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29yZUNvbXBvbmVudCBleHRlbmRzIFJ4SHR0cCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcblxyXG4gICAgdXNlcjogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcclxuICAgIHBhcmFtczogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcclxuICAgIHF1ZXJ5UGFyYW1zOiB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xyXG4gICAgZGF0YTogYW55O1xyXG4gICAgc3RvcmFnZTogQ2xpZW50RGF0YVN0b3JhZ2U7XHJcbiAgICBwYXJlbnRBdXRob3JpemVDb25maWc6IEF1dGhvcml6ZUNvbmZpZztcclxuICAgIGF1dGhvcml6ZUNvbmZpZzogQXV0aG9yaXplQ29uZmlnXHJcbiAgICBwcml2YXRlIG5hdmlnYXRpb246IFJvdXRlcjtcclxuXHJcbiAgICBvblF1ZXJ5UGFyYW1zQ2hhbmdlZCgpIHsgfVxyXG4gICAgb25QYXJhbXNDaGFuZ2VkKCkgeyB9XHJcblxyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IGNvbXBvbmVudEluc3RhbmNlUHJvdmlkZXIuZ2V0UmVzdWx0KCk7XHJcbiAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQuYWN0aXZhdGVkUm91dGVTbmFwc2hvdCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtcyA9IHJlc3VsdC5hY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LnBhcmFtcztcclxuICAgICAgICAgICAgdGhpcy5xdWVyeVBhcmFtcyA9IHJlc3VsdC5hY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LnF1ZXJ5UGFyYW1zO1xyXG4gICAgICAgICAgICB0aGlzLm5hdmlnYXRpb24gPSByZXN1bHQucm91dGVyO1xyXG4gICAgICAgICAgICB0aGlzLnVzZXIgPSByb3V0ZUNvbnRhaW5lci5nZXRVc2VyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IHJlc3VsdC5hY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LmRhdGE7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZSA9IG5ldyBDbGllbnREYXRhU3RvcmFnZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudEF1dGhvcml6ZUNvbmZpZyA9IHJlc3VsdC5hdXRob3JpemVDb25maWc7XHJcbiAgICAgICAgICAgIGxldCBkZWNvcmF0b3JDb25maWcgPSByb3V0ZUNvbnRhaW5lci5nZXRNb2RlbERlY29yYXRvcih0aGlzLmNvbnN0cnVjdG9yIGFzIEZ1bmN0aW9uLCBcImFjY2Vzc1wiKVxyXG4gICAgICAgICAgICBpZiAoZGVjb3JhdG9yQ29uZmlnKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5hdXRob3JpemVDb25maWcgPSBkZWNvcmF0b3JDb25maWcuZnVuY3Rpb25zO1xyXG4gICAgICAgICAgICBjb21wb25lbnRJbnN0YW5jZVByb3ZpZGVyLmFkZCh0aGlzLmNvbnN0cnVjdG9yLm5hbWUsIHRoaXMuaW5zdGFuY2VQcm92aWRlci5iaW5kKHRoaXMpLCB0aGlzLnBhcmFtc0NoYW5nZS5iaW5kKHRoaXMpLCB0aGlzLnF1ZXJ5UGFyYW1zQ2hhbmdlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGluc3RhbmNlUHJvdmlkZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzb2x2ZTxUPihjb21wb25lbnQ6IFR5cGU8VD4pOiBUIHtcclxuICAgICAgICByZXR1cm4gY29tcG9uZW50SW5zdGFuY2VQcm92aWRlci5yZXNvbHZlKGNvbXBvbmVudC5jb25zdHJ1Y3Rvcik7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIG5hdmlnYXRlKGNvbW1hbmRzOiBhbnlbXSwgZXh0cmFzPzogRXh0ZW5kTmF2aWdhdGlvbkV4dHJhcyk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5hdmlnYXRpb24ubmF2aWdhdGUoY29tbWFuZHMuY29uY2F0KHRoaXMuZ2V0UGFyc2VkUGFyYW1zKGV4dHJhcykpLCBleHRyYXMpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIGNvbXBvbmVudEluc3RhbmNlUHJvdmlkZXIuZGlzcG9zZSh0aGlzLmNvbnN0cnVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHBhcmFtc0NoYW5nZShwYXJhbXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0pIHtcclxuICAgICAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcclxuICAgICAgICB0aGlzLm9uUGFyYW1zQ2hhbmdlZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcXVlcnlQYXJhbXNDaGFuZ2UocXVlcnlQYXJhbXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0pIHtcclxuICAgICAgICB0aGlzLnF1ZXJ5UGFyYW1zID0gcXVlcnlQYXJhbXM7XHJcbiAgICAgICAgdGhpcy5vblF1ZXJ5UGFyYW1zQ2hhbmdlZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0UGFyc2VkUGFyYW1zKGV4dHJhczogRXh0ZW5kTmF2aWdhdGlvbkV4dHJhcykge1xyXG4gICAgICAgIGxldCBwYXJhbXMgPSBbXVxyXG4gICAgICAgIGlmIChleHRyYXMgJiYgZXh0cmFzLnBhcmFtcykge1xyXG4gICAgICAgICAgICB2YXIgaXNFbmNyeXB0aW9uID0gcm91dGVDb250YWluZXIuZ2V0KCkudXJsRW5jcnlwdGlvbjtcclxuICAgICAgICAgICAgZXh0cmFzLnBhcmFtcy5mb3JFYWNoKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGVuY29kZSA9IGlzRW5jcnlwdGlvbiA/IGVuY29kZXIuZW5jb2RlKHQpIDogdDtcclxuICAgICAgICAgICAgICAgIHBhcmFtcy5wdXNoKGVuY29kZSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXJhbXNcclxuICAgIH1cclxufSJdfQ==