export var componentInstanceProvider = new (/** @class */ (function () {
    function class_1() {
        this.instances = new Array();
    }
    class_1.prototype.broadCastParamChange = function (params) {
        if (Object.keys(params).length > 0)
            this.instances.forEach(function (t) {
                t.paramChanged(params);
            });
    };
    class_1.prototype.broadCastQueryParamChange = function (queryParams) {
        if (Object.keys(queryParams).length > 0)
            this.instances.forEach(function (t) {
                t.queryParamChanged(queryParams);
            });
    };
    class_1.prototype.setComponentRoute = function (route, router) {
        this.activatedRouteSnapshot = route;
        this.router = router;
        this.broadCastParamChange(route.params);
        this.broadCastQueryParamChange(route.queryParams);
    };
    class_1.prototype.setAuthroizeConfig = function (config) {
        this.authorizeConfig = config;
    };
    class_1.prototype.getAuthorizeConfig = function () {
        return this.authorizeConfig;
    };
    class_1.prototype.getResult = function () {
        return {
            activatedRouteSnapshot: this.activatedRouteSnapshot,
            router: this.router,
            authorizeConfig: this.authorizeConfig
        };
    };
    class_1.prototype.getActivatedRouteSnapshot = function () {
        return this.activatedRouteSnapshot;
    };
    class_1.prototype.getRouter = function () {
        return this.router;
    };
    class_1.prototype.add = function (name, resolver, paramChanged, queryParamChanged) {
        this.instances.push({ name: name, resolver: resolver, paramChanged: paramChanged, queryParamChanged: queryParamChanged });
    };
    class_1.prototype.resolve = function (target) {
        var instance = this.instances.filter(function (t) { return t.name == target.name; })[0];
        if (instance)
            return instance.resolver();
        throw new Error("Component instance is not available");
    };
    class_1.prototype.dispose = function (target) {
        var instances = this.instances.filter(function (t) { return t.name == target.name; });
        var length = instances.length;
        for (var i = 0; i < length; i++)
            instances.splice(0, 1);
    };
    return class_1;
}()))();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LWluc3RhbmNlLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL2FuZ3VsYXItcm91dGVyLyIsInNvdXJjZXMiOlsiY29yZS9jb21wb25lbnQtaW5zdGFuY2UtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLElBQU0seUJBQXlCLEdBVzlCLElBQUk7SUFBQztRQUNMLGNBQVMsR0FBbUMsSUFBSSxLQUFLLEVBQTJCLENBQUM7SUFrRXJGLENBQUM7SUE5REcsc0NBQW9CLEdBQXBCLFVBQXFCLE1BQThCO1FBQy9DLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQztZQUNsQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7Z0JBQ3BCLENBQUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDM0IsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRUQsMkNBQXlCLEdBQXpCLFVBQTBCLFdBQW1DO1FBQ3pELElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQztZQUNuQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7Z0JBQ3BCLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNyQyxDQUFDLENBQUMsQ0FBQTtJQUNWLENBQUM7SUFFRCxtQ0FBaUIsR0FBakIsVUFBa0IsS0FBNkIsRUFBQyxNQUFhO1FBQ3pELElBQUksQ0FBQyxzQkFBc0IsR0FBRyxLQUFLLENBQUM7UUFDcEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMseUJBQXlCLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxvQ0FBa0IsR0FBbEIsVUFBbUIsTUFBdUI7UUFDdEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxNQUFNLENBQUM7SUFDbEMsQ0FBQztJQUVELG9DQUFrQixHQUFsQjtRQUNJLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUNoQyxDQUFDO0lBRUQsMkJBQVMsR0FBVDtRQUNJLE9BQU87WUFDSCxzQkFBc0IsRUFBRSxJQUFJLENBQUMsc0JBQXNCO1lBQ25ELE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixlQUFlLEVBQUUsSUFBSSxDQUFDLGVBQWU7U0FDeEMsQ0FBQTtJQUNMLENBQUM7SUFFRCwyQ0FBeUIsR0FBekI7UUFDSSxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztJQUN2QyxDQUFDO0lBRUQsMkJBQVMsR0FBVDtRQUNJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQscUJBQUcsR0FBSCxVQUFJLElBQVksRUFBRSxRQUFrQixFQUFFLFlBQXNELEVBQUUsaUJBQWdFO1FBQzFKLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBQzlILENBQUM7SUFFRCx5QkFBTyxHQUFQLFVBQVEsTUFBZ0I7UUFDcEIsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQXJCLENBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwRSxJQUFJLFFBQVE7WUFDUixPQUFPLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMvQixNQUFNLElBQUksS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVELHlCQUFPLEdBQVAsVUFBUSxNQUFnQjtRQUNwQixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLElBQUksTUFBTSxDQUFDLElBQUksRUFBckIsQ0FBcUIsQ0FBQyxDQUFDO1FBQ2xFLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDOUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUU7WUFDM0IsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUNMLGNBQUM7QUFBRCxDQUFDLEFBbkVRLElBbUVQLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEluc3RhbmNlQ29uZmlnIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvY29tcG9uZW50LWluc3RhbmNlLWNvbmZpZ1wiO1xyXG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBSb3V0ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XHJcbmltcG9ydCB7IEF1dGhvcml6ZUNvbmZpZyB9IGZyb20gJy4uL2ludGVyZmFjZXMvYXV0aG9yaXplLWNvbmZpZydcclxuZXhwb3J0IGNvbnN0IGNvbXBvbmVudEluc3RhbmNlUHJvdmlkZXI6XHJcbiAgICB7XHJcbiAgICAgICAgYWRkKG5hbWU6IHN0cmluZywgcmVzb2x2ZXI6IEZ1bmN0aW9uLCBwYXJhbUNoYW5nZWQ6IChwYXJhbXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0pID0+IHZvaWQsIHF1ZXJ5UGFyYW1DaGFuZ2VkOiAocXVlcnlQYXJhbXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0pID0+IHZvaWQpLFxyXG4gICAgICAgIHJlc29sdmUodGFyZ2V0OiBGdW5jdGlvbiksXHJcbiAgICAgICAgZGlzcG9zZSh0YXJnZXQ6IEZ1bmN0aW9uKVxyXG4gICAgICAgIHNldENvbXBvbmVudFJvdXRlKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LHJvdXRlcjpSb3V0ZXIpO1xyXG4gICAgICAgIGdldEFjdGl2YXRlZFJvdXRlU25hcHNob3QoKTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdDtcclxuICAgICAgICBnZXRSb3V0ZXIoKTogUm91dGVyO1xyXG4gICAgICAgIGdldFJlc3VsdCgpOiB7IGFjdGl2YXRlZFJvdXRlU25hcHNob3Q6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIHJvdXRlcjogUm91dGVyLCBhdXRob3JpemVDb25maWc6IEF1dGhvcml6ZUNvbmZpZyB9LFxyXG4gICAgICAgIHNldEF1dGhyb2l6ZUNvbmZpZyhjb25maWc6IEF1dGhvcml6ZUNvbmZpZyksXHJcbiAgICAgICAgZ2V0QXV0aG9yaXplQ29uZmlnKCkgXHJcbiAgICB9ID0gbmV3IChjbGFzcyB7XHJcbiAgICAgICAgaW5zdGFuY2VzOiBBcnJheTxDb21wb25lbnRJbnN0YW5jZUNvbmZpZz4gPSBuZXcgQXJyYXk8Q29tcG9uZW50SW5zdGFuY2VDb25maWc+KCk7XHJcbiAgICAgICAgYWN0aXZhdGVkUm91dGVTbmFwc2hvdDogQWN0aXZhdGVkUm91dGVTbmFwc2hvdDtcclxuICAgICAgICByb3V0ZXI6IFJvdXRlcjtcclxuICAgICAgICBhdXRob3JpemVDb25maWc6QXV0aG9yaXplQ29uZmlnXHJcbiAgICAgICAgYnJvYWRDYXN0UGFyYW1DaGFuZ2UocGFyYW1zOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSB7XHJcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhwYXJhbXMpLmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VzLmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgICAgICAgICB0LnBhcmFtQ2hhbmdlZChwYXJhbXMpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYnJvYWRDYXN0UXVlcnlQYXJhbUNoYW5nZShxdWVyeVBhcmFtczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSkge1xyXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMocXVlcnlQYXJhbXMpLmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlcy5mb3JFYWNoKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHQucXVlcnlQYXJhbUNoYW5nZWQocXVlcnlQYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldENvbXBvbmVudFJvdXRlKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LHJvdXRlcjpSb3V0ZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5hY3RpdmF0ZWRSb3V0ZVNuYXBzaG90ID0gcm91dGU7XHJcbiAgICAgICAgICAgIHRoaXMucm91dGVyID0gcm91dGVyO1xyXG4gICAgICAgICAgICB0aGlzLmJyb2FkQ2FzdFBhcmFtQ2hhbmdlKHJvdXRlLnBhcmFtcyk7XHJcbiAgICAgICAgICAgIHRoaXMuYnJvYWRDYXN0UXVlcnlQYXJhbUNoYW5nZShyb3V0ZS5xdWVyeVBhcmFtcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRBdXRocm9pemVDb25maWcoY29uZmlnOiBBdXRob3JpemVDb25maWcpIHtcclxuICAgICAgICAgICAgdGhpcy5hdXRob3JpemVDb25maWcgPSBjb25maWc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRBdXRob3JpemVDb25maWcoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmF1dGhvcml6ZUNvbmZpZztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldFJlc3VsdCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGFjdGl2YXRlZFJvdXRlU25hcHNob3Q6IHRoaXMuYWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcclxuICAgICAgICAgICAgICAgIHJvdXRlcjogdGhpcy5yb3V0ZXIsXHJcbiAgICAgICAgICAgICAgICBhdXRob3JpemVDb25maWc6IHRoaXMuYXV0aG9yaXplQ29uZmlnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldEFjdGl2YXRlZFJvdXRlU25hcHNob3QoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFjdGl2YXRlZFJvdXRlU25hcHNob3Q7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRSb3V0ZXIoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJvdXRlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFkZChuYW1lOiBzdHJpbmcsIHJlc29sdmVyOiBGdW5jdGlvbiwgcGFyYW1DaGFuZ2VkOiAocGFyYW1zOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSA9PiB2b2lkLCBxdWVyeVBhcmFtQ2hhbmdlZDogKHF1ZXJ5UGFyYW1zOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSA9PiB2b2lkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VzLnB1c2goeyBuYW1lOiBuYW1lLCByZXNvbHZlcjogcmVzb2x2ZXIsIHBhcmFtQ2hhbmdlZDogcGFyYW1DaGFuZ2VkLCBxdWVyeVBhcmFtQ2hhbmdlZDogcXVlcnlQYXJhbUNoYW5nZWQgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXNvbHZlKHRhcmdldDogRnVuY3Rpb24pIHtcclxuICAgICAgICAgICAgbGV0IGluc3RhbmNlID0gdGhpcy5pbnN0YW5jZXMuZmlsdGVyKHQgPT4gdC5uYW1lID09IHRhcmdldC5uYW1lKVswXTtcclxuICAgICAgICAgICAgaWYgKGluc3RhbmNlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlLnJlc29sdmVyKCk7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbXBvbmVudCBpbnN0YW5jZSBpcyBub3QgYXZhaWxhYmxlXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGlzcG9zZSh0YXJnZXQ6IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnN0YW5jZXMgPSB0aGlzLmluc3RhbmNlcy5maWx0ZXIodCA9PiB0Lm5hbWUgPT0gdGFyZ2V0Lm5hbWUpO1xyXG4gICAgICAgICAgICBsZXQgbGVuZ3RoID0gaW5zdGFuY2VzLmxlbmd0aDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlcy5zcGxpY2UoMCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSkoKTtcclxuIl19