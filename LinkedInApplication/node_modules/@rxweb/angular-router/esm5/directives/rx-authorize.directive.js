import * as tslib_1 from "tslib";
import { Injector, Directive, ViewContainerRef, TemplateRef, Input } from "@angular/core";
import { NgIfContext } from "@angular/common";
import { routeContainer } from "../core";
import { componentInstanceProvider } from "../core/component-instance-provider";
var RxAuthorizeDirective = /** @class */ (function () {
    function RxAuthorizeDirective(viewContainerRef, templateRef, injector) {
        this.viewContainerRef = viewContainerRef;
        this.templateRef = templateRef;
        this.injector = injector;
        this.viewRef = null;
        this._context = new NgIfContext();
    }
    Object.defineProperty(RxAuthorizeDirective.prototype, "component", {
        set: function (value) {
            if (Array.isArray(value)) {
                var result = true;
                this._components = value;
                this.checkAuth(0);
            }
            else if (value)
                this.checkAccess(value);
        },
        enumerable: true,
        configurable: true
    });
    RxAuthorizeDirective.prototype.checkAuth = function (index) {
        if (this._components.length > index) {
            this.checkAccess(this._components[index], index);
        }
        else {
            this.updateView(true);
        }
    };
    RxAuthorizeDirective.prototype.checkAccess = function (value, currentIndex) {
        var _this = this;
        if (currentIndex === void 0) { currentIndex = 0; }
        var authorizeModel = routeContainer.get().authorization;
        var component = routeContainer.getModelDecorator(value, "access");
        if (authorizeModel && component) {
            var authorize = this.injector.get(authorizeModel);
            var authorizeConfig = componentInstanceProvider.getAuthorizeConfig();
            var result = authorize.authorizeChildren(component.functions, authorizeConfig);
            if (typeof result === "boolean") {
                if (this._components && this._components.length > 0 && result) {
                    var index = currentIndex + 1;
                    this.checkAuth(index);
                }
                else
                    this.updateView(result);
            }
            else
                result.then(function (t) {
                    if (t) {
                        var index = currentIndex + 1;
                        _this.checkAuth(index);
                    }
                    else
                        _this.updateView(t);
                });
        }
    };
    RxAuthorizeDirective.prototype.updateView = function (value) {
        if (this.viewRef) {
            this.viewContainerRef.clear();
            this.viewRef = null;
        }
        if (value)
            this.viewRef = this.viewContainerRef.createEmbeddedView(this.templateRef, this._context);
        else
            this.viewContainerRef.clear();
    };
    tslib_1.__decorate([
        Input('rxAuthorize'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], RxAuthorizeDirective.prototype, "component", null);
    RxAuthorizeDirective = tslib_1.__decorate([
        Directive({
            selector: '[rxAuthorize]'
        }),
        tslib_1.__metadata("design:paramtypes", [ViewContainerRef, TemplateRef, Injector])
    ], RxAuthorizeDirective);
    return RxAuthorizeDirective;
}());
export { RxAuthorizeDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicngtYXV0aG9yaXplLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9hbmd1bGFyLXJvdXRlci8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvcngtYXV0aG9yaXplLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQXlCLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakgsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFekMsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFJaEY7SUFNSSw4QkFBb0IsZ0JBQWtDLEVBQVUsV0FBNkIsRUFBVSxRQUFrQjtRQUFyRyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQVUsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUxqSCxZQUFPLEdBQWdDLElBQUksQ0FBQztRQUM1QyxhQUFRLEdBQWdCLElBQUksV0FBVyxFQUFFLENBQUM7SUFLbEQsQ0FBQztJQUVxQixzQkFBSSwyQ0FBUzthQUFiLFVBQWMsS0FBVTtZQUMxQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3RCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztnQkFDbEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7Z0JBQ3pCLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDckI7aUJBQU0sSUFBSSxLQUFLO2dCQUNaLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEMsQ0FBQzs7O09BQUE7SUFFRCx3Q0FBUyxHQUFULFVBQVUsS0FBSztRQUNYLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsS0FBSyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNwRDthQUFNO1lBQ0gsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUN4QjtJQUNMLENBQUM7SUFFRCwwQ0FBVyxHQUFYLFVBQVksS0FBUyxFQUFDLFlBQXVCO1FBQTdDLGlCQXVCQztRQXZCcUIsNkJBQUEsRUFBQSxnQkFBdUI7UUFDekMsSUFBSSxjQUFjLEdBQUcsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQztRQUN4RCxJQUFJLFNBQVMsR0FBRyxjQUFjLENBQUMsaUJBQWlCLENBQUMsS0FBaUIsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUM5RSxJQUFJLGNBQWMsSUFBSSxTQUFTLEVBQUU7WUFDN0IsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFlLENBQUM7WUFDaEUsSUFBSSxlQUFlLEdBQUcseUJBQXlCLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztZQUNyRSxJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxlQUFlLENBQStCLENBQUM7WUFDekcsSUFBSSxPQUFPLE1BQU0sS0FBSyxTQUFTLEVBQUU7Z0JBQzdCLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksTUFBTSxFQUFFO29CQUMzRCxJQUFJLEtBQUssR0FBRyxZQUFZLEdBQUcsQ0FBQyxDQUFDO29CQUM3QixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUN6Qjs7b0JBRUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUMvQjs7Z0JBQ0csTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFBLENBQUM7b0JBQ1QsSUFBSSxDQUFDLEVBQUU7d0JBQ0gsSUFBSSxLQUFLLEdBQUcsWUFBWSxHQUFHLENBQUMsQ0FBQzt3QkFDN0IsS0FBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztxQkFDekI7O3dCQUNELEtBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZCLENBQUMsQ0FBQyxDQUFBO1NBQ2I7SUFDTCxDQUFDO0lBRU8seUNBQVUsR0FBbEIsVUFBbUIsS0FBYztRQUM3QixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDOUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7U0FDdkI7UUFDRCxJQUFJLEtBQUs7WUFDTCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzs7WUFFekYsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3RDLENBQUM7SUFuRHFCO1FBQXJCLEtBQUssQ0FBQyxhQUFhLENBQUM7Ozt5REFPcEI7SUFoQlEsb0JBQW9CO1FBSGhDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxlQUFlO1NBQzVCLENBQUM7aURBT3dDLGdCQUFnQixFQUF1QixXQUFXLEVBQXlCLFFBQVE7T0FOaEgsb0JBQW9CLENBNkRoQztJQUFELDJCQUFDO0NBQUEsQUE3REQsSUE2REM7U0E3RFksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0b3IsIERpcmVjdGl2ZSwgVHlwZSwgRW1iZWRkZWRWaWV3UmVmLCBWaWV3Q29udGFpbmVyUmVmLCBUZW1wbGF0ZVJlZiwgSW5wdXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBOZ0lmQ29udGV4dCB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcclxuaW1wb3J0IHsgcm91dGVDb250YWluZXIgfSBmcm9tIFwiLi4vY29yZVwiO1xyXG5pbXBvcnQgeyBJQXV0aG9yaXplIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9pLWF1dGhvcml6ZSdcclxuaW1wb3J0IHsgY29tcG9uZW50SW5zdGFuY2VQcm92aWRlciB9IGZyb20gXCIuLi9jb3JlL2NvbXBvbmVudC1pbnN0YW5jZS1wcm92aWRlclwiO1xyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW3J4QXV0aG9yaXplXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFJ4QXV0aG9yaXplRGlyZWN0aXZlIHtcclxuICAgIHByaXZhdGUgdmlld1JlZjogRW1iZWRkZWRWaWV3UmVmPGFueT4gfCBudWxsID0gbnVsbDtcclxuICAgIHByaXZhdGUgX2NvbnRleHQ6IE5nSWZDb250ZXh0ID0gbmV3IE5nSWZDb250ZXh0KCk7XHJcblxyXG4gICAgcHJpdmF0ZSBfY29tcG9uZW50czogYW55W107XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LCBwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge1xyXG4gICAgfVxyXG5cclxuICAgIEBJbnB1dCgncnhBdXRob3JpemUnKSBzZXQgY29tcG9uZW50KHZhbHVlOiBhbnkpIHtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbXBvbmVudHMgPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5jaGVja0F1dGgoMCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSlcclxuICAgICAgICAgICAgdGhpcy5jaGVja0FjY2Vzcyh2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2hlY2tBdXRoKGluZGV4KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbXBvbmVudHMubGVuZ3RoID4gaW5kZXgpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja0FjY2Vzcyh0aGlzLl9jb21wb25lbnRzW2luZGV4XSwgaW5kZXgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmlldyh0cnVlKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjaGVja0FjY2Vzcyh2YWx1ZTphbnksY3VycmVudEluZGV4Om51bWJlciA9IDApIHtcclxuICAgICAgICB2YXIgYXV0aG9yaXplTW9kZWwgPSByb3V0ZUNvbnRhaW5lci5nZXQoKS5hdXRob3JpemF0aW9uO1xyXG4gICAgICAgIGxldCBjb21wb25lbnQgPSByb3V0ZUNvbnRhaW5lci5nZXRNb2RlbERlY29yYXRvcih2YWx1ZSBhcyBGdW5jdGlvbiwgXCJhY2Nlc3NcIik7XHJcbiAgICAgICAgaWYgKGF1dGhvcml6ZU1vZGVsICYmIGNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICB2YXIgYXV0aG9yaXplID0gdGhpcy5pbmplY3Rvci5nZXQoYXV0aG9yaXplTW9kZWwpIGFzIElBdXRob3JpemU7XHJcbiAgICAgICAgICAgIHZhciBhdXRob3JpemVDb25maWcgPSBjb21wb25lbnRJbnN0YW5jZVByb3ZpZGVyLmdldEF1dGhvcml6ZUNvbmZpZygpO1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gYXV0aG9yaXplLmF1dGhvcml6ZUNoaWxkcmVuKGNvbXBvbmVudC5mdW5jdGlvbnMsIGF1dGhvcml6ZUNvbmZpZykgYXMgUHJvbWlzZTxib29sZWFuPiB8IGJvb2xlYW47XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gXCJib29sZWFuXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29tcG9uZW50cyAmJiB0aGlzLl9jb21wb25lbnRzLmxlbmd0aCA+IDAgJiYgcmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IGN1cnJlbnRJbmRleCArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tBdXRoKGluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVWaWV3KHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQudGhlbih0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IGN1cnJlbnRJbmRleCArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrQXV0aChpbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVmlldyh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVwZGF0ZVZpZXcodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy52aWV3UmVmKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5jbGVhcigpO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdSZWYgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmFsdWUpXHJcbiAgICAgICAgICAgIHRoaXMudmlld1JlZiA9IHRoaXMudmlld0NvbnRhaW5lclJlZi5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZiwgdGhpcy5fY29udGV4dCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuY2xlYXIoKTtcclxuICAgIH1cclxufSJdfQ==