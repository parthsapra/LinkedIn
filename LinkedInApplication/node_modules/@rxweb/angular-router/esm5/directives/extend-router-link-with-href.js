import * as tslib_1 from "tslib";
import { Directive, Input } from "@angular/core";
import { RouterLinkWithHref, Router, ActivatedRoute } from "@angular/router";
import { encoder } from "../core/encoder";
import { routeContainer } from "../core";
import { LocationStrategy } from "@angular/common";
var ExtendRouterLinkWithHref = /** @class */ (function (_super) {
    tslib_1.__extends(ExtendRouterLinkWithHref, _super);
    function ExtendRouterLinkWithHref(router, activatedRoute, locationStratergy) {
        var _this = _super.call(this, router, activatedRoute, locationStratergy) || this;
        _this.isPushed = false;
        _this.overrideProp();
        return _this;
    }
    ExtendRouterLinkWithHref.prototype.overrideProp = function () {
        var value = [];
        Object.defineProperty(this, "commands", {
            get: function () {
                var isEncryption = routeContainer.get().urlEncryption;
                if (Array.isArray(value) && Array.isArray(this.params) && !this.isPushed) {
                    this.params.forEach(function (t) {
                        var encode = isEncryption ? encoder.encode(t) : t;
                        value.push(encode);
                    });
                    this.isPushed = true;
                }
                return value;
            },
            set: function (v) {
                value = v;
            }
        });
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array)
    ], ExtendRouterLinkWithHref.prototype, "params", void 0);
    ExtendRouterLinkWithHref = tslib_1.__decorate([
        Directive({ selector: 'a[routerLink],area[routerLink]' }),
        tslib_1.__metadata("design:paramtypes", [Router, ActivatedRoute, LocationStrategy])
    ], ExtendRouterLinkWithHref);
    return ExtendRouterLinkWithHref;
}(RouterLinkWithHref));
export { ExtendRouterLinkWithHref };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5kLXJvdXRlci1saW5rLXdpdGgtaHJlZi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9hbmd1bGFyLXJvdXRlci8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvZXh0ZW5kLXJvdXRlci1saW5rLXdpdGgtaHJlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQWUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM3RSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUduRDtJQUE4QyxvREFBa0I7SUFFNUQsa0NBQVksTUFBYyxFQUFFLGNBQThCLEVBQUUsaUJBQW1DO1FBQS9GLFlBQ0ksa0JBQU0sTUFBTSxFQUFFLGNBQWMsRUFBRSxpQkFBaUIsQ0FBQyxTQUVuRDtRQUpELGNBQVEsR0FBWSxLQUFLLENBQUM7UUFHdEIsS0FBSSxDQUFDLFlBQVksRUFBRSxDQUFDOztJQUN4QixDQUFDO0lBSUQsK0NBQVksR0FBWjtRQUNJLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNmLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUNwQyxHQUFHLEVBQUU7Z0JBQ0QsSUFBSSxZQUFZLEdBQUcsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQztnQkFDdEQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtvQkFDdEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO3dCQUNqQixJQUFJLE1BQU0sR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDbEQsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDdkIsQ0FBQyxDQUFDLENBQUE7b0JBQ0YsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7aUJBQ3hCO2dCQUNELE9BQU8sS0FBSyxDQUFDO1lBQ2pCLENBQUM7WUFDRCxHQUFHLEVBQUUsVUFBVSxDQUFDO2dCQUNaLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDZCxDQUFDO1NBQ0osQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQXBCUTtRQUFSLEtBQUssRUFBRTs7NERBQWU7SUFQZCx3QkFBd0I7UUFEcEMsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLGdDQUFnQyxFQUFFLENBQUM7aURBR2xDLE1BQU0sRUFBa0IsY0FBYyxFQUFxQixnQkFBZ0I7T0FGdEYsd0JBQXdCLENBNEJwQztJQUFELCtCQUFDO0NBQUEsQUE1QkQsQ0FBOEMsa0JBQWtCLEdBNEIvRDtTQTVCWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBIb3N0QmluZGluZyB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IFJvdXRlckxpbmtXaXRoSHJlZiwgUm91dGVyLCBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcclxuaW1wb3J0IHsgZW5jb2RlciB9IGZyb20gXCIuLi9jb3JlL2VuY29kZXJcIjtcclxuaW1wb3J0IHsgcm91dGVDb250YWluZXIgfSBmcm9tIFwiLi4vY29yZVwiO1xyXG5pbXBvcnQgeyBMb2NhdGlvblN0cmF0ZWd5IH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xyXG5cclxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnYVtyb3V0ZXJMaW5rXSxhcmVhW3JvdXRlckxpbmtdJyB9KVxyXG5leHBvcnQgY2xhc3MgRXh0ZW5kUm91dGVyTGlua1dpdGhIcmVmIGV4dGVuZHMgUm91dGVyTGlua1dpdGhIcmVmIHtcbiAgICBpc1B1c2hlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgY29uc3RydWN0b3Iocm91dGVyOiBSb3V0ZXIsIGFjdGl2YXRlZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSwgbG9jYXRpb25TdHJhdGVyZ3k6IExvY2F0aW9uU3RyYXRlZ3kpIHtcclxuICAgICAgICBzdXBlcihyb3V0ZXIsIGFjdGl2YXRlZFJvdXRlLCBsb2NhdGlvblN0cmF0ZXJneSk7XG4gICAgICAgIHRoaXMub3ZlcnJpZGVQcm9wKCk7XG4gICAgfVxuXG4gICAgQElucHV0KCkgcGFyYW1zOiBhbnlbXTtcblxuICAgIG92ZXJyaWRlUHJvcCgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gW107XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNvbW1hbmRzXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBpc0VuY3J5cHRpb24gPSByb3V0ZUNvbnRhaW5lci5nZXQoKS51cmxFbmNyeXB0aW9uO1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiBBcnJheS5pc0FycmF5KHRoaXMucGFyYW1zKSAmJiAhdGhpcy5pc1B1c2hlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmFtcy5mb3JFYWNoKHQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVuY29kZSA9IGlzRW5jcnlwdGlvbiA/IGVuY29kZXIuZW5jb2RlKHQpIDogdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLnB1c2goZW5jb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1B1c2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cbn1cbiJdfQ==