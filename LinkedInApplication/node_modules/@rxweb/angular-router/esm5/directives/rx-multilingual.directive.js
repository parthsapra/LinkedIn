import * as tslib_1 from "tslib";
import { Injector, Directive, ViewContainerRef, TemplateRef, Input } from "@angular/core";
import { NgIfContext } from "@angular/common";
import { routeContainer } from "../core";
var RxMultilingualDirective = /** @class */ (function () {
    function RxMultilingualDirective(viewContainerRef, templateRef, injector) {
        this.viewContainerRef = viewContainerRef;
        this.templateRef = templateRef;
        this.injector = injector;
        this.viewRef = null;
        this._context = new NgIfContext();
    }
    Object.defineProperty(RxMultilingualDirective.prototype, "component", {
        set: function (value) {
            var _this = this;
            var childMultiLingual = routeContainer.get().childMultilingualResolver;
            if (childMultiLingual) {
                var childMultilingual = this.injector.get(childMultiLingual);
                var result = childMultilingual.resolveChildren(this.viewContainerRef["_view"].component.constructor);
                if (typeof result == "boolean")
                    this.updateView(result);
                else
                    result.then(function (t) {
                        _this.updateView(t);
                    });
            }
        },
        enumerable: true,
        configurable: true
    });
    RxMultilingualDirective.prototype.updateView = function (value) {
        if (this.viewRef) {
            this.viewContainerRef.clear();
            this.viewRef = null;
        }
        if (value)
            this.viewRef = this.viewContainerRef.createEmbeddedView(this.templateRef, this._context);
        else
            this.viewContainerRef.clear();
    };
    tslib_1.__decorate([
        Input('rxMultilingual'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], RxMultilingualDirective.prototype, "component", null);
    RxMultilingualDirective = tslib_1.__decorate([
        Directive({
            selector: '[rxMultilingual]'
        }),
        tslib_1.__metadata("design:paramtypes", [ViewContainerRef, TemplateRef, Injector])
    ], RxMultilingualDirective);
    return RxMultilingualDirective;
}());
export { RxMultilingualDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicngtbXVsdGlsaW5ndWFsLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9hbmd1bGFyLXJvdXRlci8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvcngtbXVsdGlsaW5ndWFsLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQW9CLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUcsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFLekM7SUFJSSxpQ0FBb0IsZ0JBQWtDLEVBQVUsV0FBNkIsRUFBVSxRQUFrQjtRQUFyRyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQVUsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUhqSCxZQUFPLEdBQWdDLElBQUksQ0FBQztRQUM1QyxhQUFRLEdBQWdCLElBQUksV0FBVyxFQUFFLENBQUM7SUFFMEUsQ0FBQztJQUVwRyxzQkFBSSw4Q0FBUzthQUFiLFVBQWMsS0FBVTtZQUFqRCxpQkFZQztZQVhHLElBQUksaUJBQWlCLEdBQUcsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFBO1lBQ3RFLElBQUksaUJBQWlCLEVBQUU7Z0JBQ25CLElBQUksaUJBQWlCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQWtCLENBQUM7Z0JBQzlFLElBQUksTUFBTSxHQUFHLGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUNyRyxJQUFHLE9BQU8sTUFBTSxJQUFJLFNBQVM7b0JBQ3pCLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7O29CQUV4QixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQUEsQ0FBQzt3QkFDVCxLQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN2QixDQUFDLENBQUMsQ0FBQTthQUNUO1FBQ0wsQ0FBQzs7O09BQUE7SUFFTyw0Q0FBVSxHQUFsQixVQUFtQixLQUFjO1FBQzdCLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNkLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUM5QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztTQUN2QjtRQUNELElBQUksS0FBSztZQUNMLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztZQUV6RixJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDdEMsQ0FBQztJQXZCd0I7UUFBeEIsS0FBSyxDQUFDLGdCQUFnQixDQUFDOzs7NERBWXZCO0lBbEJRLHVCQUF1QjtRQUhuQyxTQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsa0JBQWtCO1NBQy9CLENBQUM7aURBS3dDLGdCQUFnQixFQUF1QixXQUFXLEVBQXlCLFFBQVE7T0FKaEgsdUJBQXVCLENBOEJuQztJQUFELDhCQUFDO0NBQUEsQUE5QkQsSUE4QkM7U0E5QlksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0b3IsIERpcmVjdGl2ZSwgIEVtYmVkZGVkVmlld1JlZiwgVmlld0NvbnRhaW5lclJlZiwgVGVtcGxhdGVSZWYsIElucHV0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgTmdJZkNvbnRleHQgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XHJcbmltcG9ydCB7IHJvdXRlQ29udGFpbmVyIH0gZnJvbSBcIi4uL2NvcmVcIjtcclxuaW1wb3J0IHsgSU11bHRpbGluZ3VhbCB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL2ktbXVsdGlsaW5ndWFsXCI7XHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbcnhNdWx0aWxpbmd1YWxdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUnhNdWx0aWxpbmd1YWxEaXJlY3RpdmUge1xyXG4gICAgcHJpdmF0ZSB2aWV3UmVmOiBFbWJlZGRlZFZpZXdSZWY8YW55PiB8IG51bGwgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBfY29udGV4dDogTmdJZkNvbnRleHQgPSBuZXcgTmdJZkNvbnRleHQoKTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsIHByaXZhdGUgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7fVxyXG5cclxuICAgIEBJbnB1dCgncnhNdWx0aWxpbmd1YWwnKSBzZXQgY29tcG9uZW50KHZhbHVlOiBhbnkpIHtcclxuICAgICAgICBsZXQgY2hpbGRNdWx0aUxpbmd1YWwgPSByb3V0ZUNvbnRhaW5lci5nZXQoKS5jaGlsZE11bHRpbGluZ3VhbFJlc29sdmVyXHJcbiAgICAgICAgaWYgKGNoaWxkTXVsdGlMaW5ndWFsKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZE11bHRpbGluZ3VhbCA9IHRoaXMuaW5qZWN0b3IuZ2V0KGNoaWxkTXVsdGlMaW5ndWFsKSBhcyBJTXVsdGlsaW5ndWFsO1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gY2hpbGRNdWx0aWxpbmd1YWwucmVzb2x2ZUNoaWxkcmVuKHRoaXMudmlld0NvbnRhaW5lclJlZltcIl92aWV3XCJdLmNvbXBvbmVudC5jb25zdHJ1Y3Rvcik7XHJcbiAgICAgICAgICAgIGlmKHR5cGVvZiByZXN1bHQgPT0gXCJib29sZWFuXCIpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVZpZXcocmVzdWx0KTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnRoZW4odCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVWaWV3KHQpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVWaWV3KHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudmlld1JlZikge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGhpcy52aWV3UmVmID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZhbHVlKVxyXG4gICAgICAgICAgICB0aGlzLnZpZXdSZWYgPSB0aGlzLnZpZXdDb250YWluZXJSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYsIHRoaXMuX2NvbnRleHQpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLmNsZWFyKCk7XHJcbiAgICB9XHJcbn0iXX0=