import * as tslib_1 from "tslib";
import { routeContainer } from "../core/route-container";
export function middleware(injector, route, complete) {
    return function (user) {
        var middlewareModels = routeContainer.get().middlewares;
        var modelMiddleware = routeContainer.getModelDecorator(route.component, "middleware");
        if (modelMiddleware)
            middlewareModels = middlewareModels ? tslib_1.__spread(middlewareModels, modelMiddleware.functions) : tslib_1.__spread(modelMiddleware.functions);
        if (middlewareModels)
            callFunction(user, injector, route, complete, middlewareModels);
        else
            complete(true);
    };
}
function callFunction(user, injector, route, complete, middlewareModels, count) {
    count = count == undefined ? 0 : count + 1;
    var middleware = injector.get(middlewareModels[count]);
    if (middleware) {
        var result = middleware.invoke(user, route);
        if (result instanceof Promise) {
            result.then(function (t) {
                if (t) {
                    if (middlewareModels.length > (count + 1))
                        callFunction(user, injector, route, complete, middlewareModels, count);
                    else
                        complete(t);
                }
                else
                    complete(t);
            });
        }
        else if (result && middlewareModels.length > (count + 1))
            callFunction(user, injector, route, complete, middlewareModels, count);
        else
            complete(result);
    }
    else
        complete(true);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlkZGxld2FyZS5mdW5jdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9hbmd1bGFyLXJvdXRlci8iLCJzb3VyY2VzIjpbImZ1bmN0aW9ucy9taWRkbGV3YXJlLmZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFHekQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxRQUFrQixFQUFFLEtBQTZCLEVBQUUsUUFBa0I7SUFDNUYsT0FBTyxVQUFDLElBQUk7UUFDUixJQUFJLGdCQUFnQixHQUFHLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUM7UUFDeEQsSUFBSSxlQUFlLEdBQUcsY0FBYyxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxTQUFxQixFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ2xHLElBQUksZUFBZTtZQUNmLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDLENBQUMsa0JBQUssZ0JBQThCLEVBQUssZUFBZSxDQUFDLFNBQVMsRUFBRSxDQUFDLGtCQUFLLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM3SSxJQUFJLGdCQUFnQjtZQUNoQixZQUFZLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUMsUUFBUSxFQUFFLGdCQUFnQixDQUFDLENBQUM7O1lBRS9ELFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2QixDQUFDLENBQUE7QUFDTCxDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsSUFBNEIsRUFBRSxRQUFrQixFQUFFLEtBQTZCLEVBQUcsUUFBa0IsRUFBRSxnQkFBcUIsRUFBRSxLQUFjO0lBQzdKLEtBQUssR0FBRyxLQUFLLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDM0MsSUFBSSxVQUFVLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBZ0IsQ0FBQztJQUN0RSxJQUFJLFVBQVUsRUFBRTtRQUNaLElBQUksTUFBTSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQzNDLElBQUksTUFBTSxZQUFZLE9BQU8sRUFBRTtZQUMzQixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQUEsQ0FBQztnQkFDVCxJQUFJLENBQUMsRUFBRTtvQkFDSCxJQUFJLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7d0JBQ3JDLFlBQVksQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBQyxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLENBQUE7O3dCQUVyRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ25COztvQkFDRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEIsQ0FBQyxDQUFDLENBQUE7U0FDTDthQUNHLElBQUksTUFBTSxJQUFJLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDL0MsWUFBWSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFDLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQTs7WUFFckUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0tBQzNCOztRQUNHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90IH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xyXG5pbXBvcnQgeyByb3V0ZUNvbnRhaW5lciB9IGZyb20gXCIuLi9jb3JlL3JvdXRlLWNvbnRhaW5lclwiO1xyXG5pbXBvcnQgeyBJTWlkZGxld2FyZSB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL2ktbWlkZGxld2FyZVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1pZGRsZXdhcmUoaW5qZWN0b3I6IEluamVjdG9yLCByb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgY29tcGxldGU6IEZ1bmN0aW9uKSB7XHJcbiAgICByZXR1cm4gKHVzZXIpID0+IHtcclxuICAgICAgICB2YXIgbWlkZGxld2FyZU1vZGVscyA9IHJvdXRlQ29udGFpbmVyLmdldCgpLm1pZGRsZXdhcmVzO1xyXG4gICAgICAgIHZhciBtb2RlbE1pZGRsZXdhcmUgPSByb3V0ZUNvbnRhaW5lci5nZXRNb2RlbERlY29yYXRvcihyb3V0ZS5jb21wb25lbnQgYXMgRnVuY3Rpb24sIFwibWlkZGxld2FyZVwiKTtcclxuICAgICAgICBpZiAobW9kZWxNaWRkbGV3YXJlKSBcclxuICAgICAgICAgICAgbWlkZGxld2FyZU1vZGVscyA9IG1pZGRsZXdhcmVNb2RlbHMgPyBbLi4ubWlkZGxld2FyZU1vZGVscyBhcyBGdW5jdGlvbltdLCAuLi5tb2RlbE1pZGRsZXdhcmUuZnVuY3Rpb25zXSA6IFsuLi5tb2RlbE1pZGRsZXdhcmUuZnVuY3Rpb25zXTtcclxuICAgICAgICBpZiAobWlkZGxld2FyZU1vZGVscylcclxuICAgICAgICAgICAgY2FsbEZ1bmN0aW9uKHVzZXIsIGluamVjdG9yLCByb3V0ZSxjb21wbGV0ZSwgbWlkZGxld2FyZU1vZGVscyk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBjb21wbGV0ZSh0cnVlKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2FsbEZ1bmN0aW9uKHVzZXI6IHsgW2tleTogc3RyaW5nXTogYW55IH0sIGluamVjdG9yOiBJbmplY3Rvciwgcm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsICBjb21wbGV0ZTogRnVuY3Rpb24sIG1pZGRsZXdhcmVNb2RlbHM6IGFueSwgY291bnQ/OiBudW1iZXIpIHtcclxuICAgIGNvdW50ID0gY291bnQgPT0gdW5kZWZpbmVkID8gMCA6IGNvdW50ICsgMTtcclxuICAgIHZhciBtaWRkbGV3YXJlID0gaW5qZWN0b3IuZ2V0KG1pZGRsZXdhcmVNb2RlbHNbY291bnRdKSBhcyBJTWlkZGxld2FyZTtcclxuICAgIGlmIChtaWRkbGV3YXJlKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IG1pZGRsZXdhcmUuaW52b2tlKHVzZXIsIHJvdXRlKVxyXG4gICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC50aGVuKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWlkZGxld2FyZU1vZGVscy5sZW5ndGggPiAoY291bnQgKyAxKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbEZ1bmN0aW9uKHVzZXIsIGluamVjdG9yLCByb3V0ZSxjb21wbGV0ZSwgbWlkZGxld2FyZU1vZGVscywgY291bnQpXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZSh0KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlKHQpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICBpZiAocmVzdWx0ICYmIG1pZGRsZXdhcmVNb2RlbHMubGVuZ3RoID4gKGNvdW50ICsgMSkpXHJcbiAgICAgICAgICAgICAgICBjYWxsRnVuY3Rpb24odXNlciwgaW5qZWN0b3IsIHJvdXRlLGNvbXBsZXRlLCBtaWRkbGV3YXJlTW9kZWxzLCBjb3VudClcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgY29tcGxldGUocmVzdWx0KVxyXG4gICAgfSBlbHNlXHJcbiAgICAgICAgY29tcGxldGUodHJ1ZSk7XHJcbn1cclxuIl19