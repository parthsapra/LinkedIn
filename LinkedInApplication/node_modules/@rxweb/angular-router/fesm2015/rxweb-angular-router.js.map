{"version":3,"file":"rxweb-angular-router.js","sources":["ng://@rxweb/angular-router/core/route-container.ts","ng://@rxweb/angular-router/functions/auth-resolver.function.ts","ng://@rxweb/angular-router/core/component-instance-provider.ts","ng://@rxweb/angular-router/functions/authorize.function.ts","ng://@rxweb/angular-router/functions/middleware.function.ts","ng://@rxweb/angular-router/core/encoder.ts","ng://@rxweb/angular-router/functions/params-decryption.function.ts","ng://@rxweb/angular-router/core/param-resolver.service.ts","ng://@rxweb/angular-router/guard/base-can-activate.guard.ts","ng://@rxweb/angular-router/guard/base-can-deactivate.guard.ts","ng://@rxweb/angular-router/functions/route-path.function.ts","ng://@rxweb/angular-router/core/route-provider.ts","ng://@rxweb/angular-router/decorators/route.decorator.ts","ng://@rxweb/angular-router/decorators/middleware.decorator.ts","ng://@rxweb/angular-router/decorators/access.decorator.ts","ng://@rxweb/angular-router/decorators/router-module.decorator.ts","ng://@rxweb/angular-router/decorators/anonymous.decorator.ts","ng://@rxweb/angular-router/directives/extend-router-link-with-href.ts","ng://@rxweb/angular-router/directives/rx-authorize.directive.ts","ng://@rxweb/angular-router/directives/rx-multilingual.directive.ts","ng://@rxweb/angular-router/modules/rx-routing-module.ts","ng://@rxweb/angular-router/interfaces/authorize-config.ts","ng://@rxweb/angular-router/functions/routes.function.ts","ng://@rxweb/angular-router/core/core-component.ts"],"sourcesContent":["import { ModelDecoratorConfiguration } from \"../interfaces/model-decorator-configuration\";\r\nimport { RouterModuleConfig } from \"../interfaces/router-module-config\";\r\n\r\nexport const routeContainer:\r\n    {\r\n        add(routerConfig: RouterModuleConfig),\r\n        get(): RouterModuleConfig,\r\n        setUser(user: { [key: string]: any }),\r\n        addModelDecorator(target: Function, data: any, type: string),\r\n        getModelDecorator(target: Function, type: string): ModelDecoratorConfiguration\r\n        getUser(): { [key: string]: any };\r\n    } = new (class {\r\n        state: RouterModuleConfig = {};\r\n        user: { [key: string]: any };\r\n        modelDecorators: Array<ModelDecoratorConfiguration> = new Array<ModelDecoratorConfiguration>();\r\n\r\n        add(routerConfig: RouterModuleConfig) {\r\n            this.state = routerConfig;\r\n        }\r\n\r\n        get(): RouterModuleConfig {\r\n            return this.state;\r\n        }\r\n\r\n        getUser() {\r\n            return this.user;\r\n        }\r\n\r\n        setUser(user: { [key: string]: any }) {\r\n            this.user = user;\r\n        }\r\n\r\n        addModelDecorator(target: Function, data: any, type: string) {\r\n            this.modelDecorators.push({ target: target, functions: data, type: type });\r\n        }\r\n\r\n        getModelDecorator(target: Function, type: string): ModelDecoratorConfiguration {\r\n            return this.modelDecorators.filter(t => t.target == target && t.type == type)[0];\r\n        }\r\n\r\n    })();\r\n","import { Injector } from \"@angular/core\";\r\nimport { routeContainer } from \"../core/route-container\";\r\nimport { IAuthResolver } from \"../interfaces/i-auth-resolver\";\r\n\r\nexport function authResolver(injector: Injector, next: Function) {\r\n    return (anonymous) => {\r\n        if (!anonymous) {\r\n            var authResolverModel = routeContainer.get().authentication;\r\n            if (authResolverModel) {\r\n                var authResolver = injector.get(authResolverModel) as IAuthResolver;\r\n                var result = authResolver.resolveAuth();\r\n                if (result instanceof Promise) {\r\n                    result.then(t => {\r\n                        routeContainer.setUser(t);\r\n                        next(t);\r\n                    })\r\n                } else {\r\n                    routeContainer.setUser(result);\r\n                    next(result);\r\n                }\r\n            } else\r\n                next(result);\r\n        } else\r\n            next(result);\r\n    }\r\n}\r\n","import { ComponentInstanceConfig } from \"../interfaces/component-instance-config\";\r\nimport { ActivatedRouteSnapshot, Router } from \"@angular/router\";\r\nimport { AuthorizeConfig } from '../interfaces/authorize-config'\r\nexport const componentInstanceProvider:\r\n    {\r\n        add(name: string, resolver: Function, paramChanged: (params: { [key: string]: any }) => void, queryParamChanged: (queryParams: { [key: string]: any }) => void),\r\n        resolve(target: Function),\r\n        dispose(target: Function)\r\n        setComponentRoute(route: ActivatedRouteSnapshot,router:Router);\r\n        getActivatedRouteSnapshot(): ActivatedRouteSnapshot;\r\n        getRouter(): Router;\r\n        getResult(): { activatedRouteSnapshot: ActivatedRouteSnapshot, router: Router, authorizeConfig: AuthorizeConfig },\r\n        setAuthroizeConfig(config: AuthorizeConfig),\r\n        getAuthorizeConfig() \r\n    } = new (class {\r\n        instances: Array<ComponentInstanceConfig> = new Array<ComponentInstanceConfig>();\r\n        activatedRouteSnapshot: ActivatedRouteSnapshot;\r\n        router: Router;\r\n        authorizeConfig:AuthorizeConfig\r\n        broadCastParamChange(params: { [key: string]: any }) {\r\n            if (Object.keys(params).length > 0)\r\n            this.instances.forEach(t => {\r\n                t.paramChanged(params);\r\n            })\r\n        }\r\n\r\n        broadCastQueryParamChange(queryParams: { [key: string]: any }) {\r\n            if (Object.keys(queryParams).length > 0)\r\n                this.instances.forEach(t => {\r\n                    t.queryParamChanged(queryParams);\r\n                })\r\n        }\r\n\r\n        setComponentRoute(route: ActivatedRouteSnapshot,router:Router) {\r\n            this.activatedRouteSnapshot = route;\r\n            this.router = router;\r\n            this.broadCastParamChange(route.params);\r\n            this.broadCastQueryParamChange(route.queryParams);\r\n        }\r\n\r\n        setAuthroizeConfig(config: AuthorizeConfig) {\r\n            this.authorizeConfig = config;\r\n        }\r\n\r\n        getAuthorizeConfig() {\r\n            return this.authorizeConfig;\r\n        }\r\n\r\n        getResult() {\r\n            return {\r\n                activatedRouteSnapshot: this.activatedRouteSnapshot,\r\n                router: this.router,\r\n                authorizeConfig: this.authorizeConfig\r\n            }\r\n        }\r\n\r\n        getActivatedRouteSnapshot() {\r\n            return this.activatedRouteSnapshot;\r\n        }\r\n\r\n        getRouter() {\r\n            return this.router;\r\n        }\r\n\r\n        add(name: string, resolver: Function, paramChanged: (params: { [key: string]: any }) => void, queryParamChanged: (queryParams: { [key: string]: any }) => void) {\r\n            this.instances.push({ name: name, resolver: resolver, paramChanged: paramChanged, queryParamChanged: queryParamChanged });\r\n        }\r\n\r\n        resolve(target: Function) {\r\n            let instance = this.instances.filter(t => t.name == target.name)[0];\r\n            if (instance)\r\n                return instance.resolver();\r\n            throw new Error(\"Component instance is not available\");\r\n        }\r\n\r\n        dispose(target: Function) {\r\n            let instances = this.instances.filter(t => t.name == target.name);\r\n            let length = instances.length;\r\n            for (var i = 0; i < length; i++)\r\n                instances.splice(0, 1);\r\n        }\r\n    })();\r\n","import { Injector } from \"@angular/core\";\r\nimport { routeContainer } from \"../core/route-container\";\r\nimport { AUTHORIZATION } from \"../const/app-const\";\r\nimport { ActivatedRouteSnapshot } from \"@angular/router\";\r\nimport { IAuthorize } from \"../interfaces/i-authorize\";\r\nimport { componentInstanceProvider } from \"../core/component-instance-provider\";\r\n\r\nexport function authorize(injector: Injector, route: ActivatedRouteSnapshot, next: Function, complete: Function) {\r\n        let component = routeContainer.getModelDecorator(route.component as Function, \"access\");\r\n        let anonymous = routeContainer.getModelDecorator(route.component as Function, \"anonymous\");\r\n        //if (!component && !anonymous)\r\n        //    throw `Define anyone (@anonymous() or @access({...})) decorator on the route component `;\r\n        if (component) {\r\n            var authorizeModel = routeContainer.get().authorization;\r\n            if (authorizeModel) {\r\n                var authorize = injector.get(authorizeModel) as IAuthorize;\r\n                var result = authorize.authorize(component.functions,route);\r\n                if (result instanceof Promise) {\r\n                    result.then(t => {\r\n                        if (t)\r\n                            componentInstanceProvider.setAuthroizeConfig(component.functions),next(anonymous);\r\n                        else\r\n                            complete(false)\r\n                    })\r\n                } else if (result === true)\r\n                    componentInstanceProvider.setAuthroizeConfig(component.functions),next(anonymous)\r\n                else\r\n                    complete(result)\r\n\r\n            } else\r\n                next(anonymous);\r\n        } else\r\n            next(anonymous);\r\n}\r\n","import { Injector } from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot } from \"@angular/router\";\r\nimport { routeContainer } from \"../core/route-container\";\r\nimport { IMiddleware } from \"../interfaces/i-middleware\";\r\n\r\nexport function middleware(injector: Injector, route: ActivatedRouteSnapshot, complete: Function) {\r\n    return (user) => {\r\n        var middlewareModels = routeContainer.get().middlewares;\r\n        var modelMiddleware = routeContainer.getModelDecorator(route.component as Function, \"middleware\");\r\n        if (modelMiddleware) \r\n            middlewareModels = middlewareModels ? [...middlewareModels as Function[], ...modelMiddleware.functions] : [...modelMiddleware.functions];\r\n        if (middlewareModels)\r\n            callFunction(user, injector, route,complete, middlewareModels);\r\n        else\r\n            complete(true);\r\n    }\r\n}\r\n\r\nfunction callFunction(user: { [key: string]: any }, injector: Injector, route: ActivatedRouteSnapshot,  complete: Function, middlewareModels: any, count?: number) {\r\n    count = count == undefined ? 0 : count + 1;\r\n    var middleware = injector.get(middlewareModels[count]) as IMiddleware;\r\n    if (middleware) {\r\n        var result = middleware.invoke(user, route)\r\n        if (result instanceof Promise) {\r\n            result.then(t => {\r\n                if (t) {\r\n                    if (middlewareModels.length > (count + 1))\r\n                        callFunction(user, injector, route,complete, middlewareModels, count)\r\n                    else\r\n                        complete(t);\r\n                } else\r\n                    complete(t);\r\n            })\r\n        } else\r\n            if (result && middlewareModels.length > (count + 1))\r\n                callFunction(user, injector, route,complete, middlewareModels, count)\r\n            else\r\n                complete(result)\r\n    } else\r\n        complete(true);\r\n}\r\n","export const encoder:\r\n    {\r\n        encode(value:string),\r\n        decode(value:string),\r\n    } = new (class {\r\n\r\n        decode(value: string) {\r\n            value = value.replace(\"00\", \"=\").replace(\"00\", \"=\")\r\n            var text = atob(value);\r\n            return text;\r\n        }\r\n\r\n        encode(value:string) {\r\n            let text = btoa(value).replace(\"=\", \"00\").replace(\"=\", \"00\");\r\n            return text;\r\n        }\r\n\r\n    })();\r\n","import { ActivatedRouteSnapshot } from \"@angular/router\";\r\nimport { routeContainer } from \"../core/route-container\";\r\nimport { encoder } from \"../core/encoder\";\r\n\r\nexport function paramsDecryption(route: ActivatedRouteSnapshot) {\r\n    var isEncryption = routeContainer.get().urlEncryption;\r\n    if (isEncryption) {\r\n        var params = {};\r\n        Object.keys(route.params).forEach(t => {\r\n            let value = encoder.decode(route.params[t]);\r\n            Object.defineProperty(params, t, {\r\n                get: function () { return value; },\r\n            }); \r\n        })\r\n        delete route.params;\r\n        route.params = Object.preventExtensions(params);\r\n    }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\n\r\n@Injectable()\r\nexport class ParamResolver{\r\n    constructor(public activatedRoute: ActivatedRoute, public router: Router) { }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { Router ,CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from \"@angular/router\"\r\nimport { authResolver } from \"../functions/auth-resolver.function\";\r\nimport { authorize } from \"../functions/authorize.function\";\r\nimport { middleware } from \"../functions/middleware.function\";\r\nimport { paramsDecryption } from \"../functions/params-decryption.function\";\r\nimport { ParamResolver } from \"../core/param-resolver.service\";\r\nimport { componentInstanceProvider } from \"../core/component-instance-provider\";\r\n\r\n\n@Injectable()\nexport class BaseCanActivate implements CanActivate {\n    constructor(\n        private injector: Injector, private paramResolver: ParamResolver) { }\n\n    canActivate(\n        route: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot\n    ): boolean | Promise<boolean> {\n        var promise = new Promise<boolean>((r, reject) => {\n            paramsDecryption(route);\n            let resolve = this.resolveRoute(r, route)\n            authorize(this.injector, route, authResolver(this.injector, middleware(this.injector,route,resolve)), resolve)\n        })\n        return promise;\n    }\n\n    resolveRoute(resolve, route: ActivatedRouteSnapshot) {\n        return (value: boolean) => {\n            if (value) \n                componentInstanceProvider.setComponentRoute(route, this.injector.get(Router));\n            resolve(value);\n        }\n    }\n}\n","import { Injectable } from \"@angular/core\";\r\nimport { CanDeactivate, ActivatedRouteSnapshot, RouterStateSnapshot } from \"@angular/router\"\r\n\r\n@Injectable()\nexport class BaseCanDeactivate implements CanDeactivate<any> {\n    constructor() { }\n\n    canDeactivate(\n        component: any,\n        currentRoute: ActivatedRouteSnapshot,\n        currentState: RouterStateSnapshot,\n        nextState: RouterStateSnapshot\n    ): boolean {\n        return (component.canDeactivate) ? component.canDeactivate(currentRoute, currentState, nextState) : true;\n    }\n}\n","import { encoder } from '../core/encoder'\r\n\r\nexport function routePath(path: string) {\r\n        var splitText = path.split('/');\r\n        var path = \"\";\r\n        splitText.forEach(t => {\r\n            let isParam = t.charAt(0) == \":\";\r\n            if (path == \"\" && isParam)\r\n                path = t;\r\n            else if (isParam)\r\n                path += `/${t}`;\r\n            else if (path === \"\")\r\n                path += `${encoder.encode(t)}`\r\n            else\r\n                path += `/${encoder.encode(t)}`\r\n        })\r\n        return path;\r\n}","import {  Routes, Route } from \"@angular/router\";\r\nimport { routeContainer } from \"./route-container\";\r\nimport { BaseCanActivate } from \"../guard/base-can-activate.guard\";\r\nimport { BaseCanDeactivate } from \"../guard/base-can-deactivate.guard\";\r\nimport { routePath } from \"../functions/route-path.function\";\r\n\r\nexport class RouteProvider {\r\n    static routes: Routes = [];\r\n\r\n    private static _routes: Routes = [];\r\n\r\n    static addRoute(route: Route) {\r\n        this.addCanActivate(route);\r\n        this.addCanDeactivate(route);\r\n        this._routes.push(route)\r\n    }\r\n\r\n\r\n    static applyRootRoutes(_routes?:Routes) {\r\n        this.routes = [];\r\n        var routes = _routes || [...this._routes];\r\n        var isAllowEncryption = routeContainer.get().urlEncryption;\r\n        if (isAllowEncryption) {\r\n            routes.forEach(route => {\r\n                route.path = routePath(route.path);\r\n            })\r\n        }\r\n        this._routes = [];\r\n        this.routes = routes;\r\n    }\r\n\r\n\r\n\r\n    private static addCanActivate(route: Route) {\r\n        if (!route.canActivate)\r\n            route.canActivate = [BaseCanActivate];\r\n        else\r\n            route.canActivate.push(BaseCanActivate);\r\n    }\r\n\r\n    private static addCanDeactivate(route: Route) {\r\n        if (!route.canDeactivate)\r\n            route.canDeactivate = [BaseCanDeactivate];\r\n        else\r\n            route.canDeactivate.push(BaseCanDeactivate);\r\n    }\r\n\r\n}\r\n","import { Route } from \"@angular/router\"\r\nimport { RouteProvider } from \"../core/route-provider\";\r\nexport function route(route: Route) {\r\n    return function (\r\n        target: any\r\n    ) {\r\n        route.component = target;\r\n        RouteProvider.addRoute(route);\r\n    }\r\n}\r\n","import { routeContainer } from \"../core\"\r\n\r\nexport function middleware(middlewares: Function[]) {\r\n    return function (\r\n        target: any\r\n    ) {\r\n        routeContainer.addModelDecorator(target, middlewares,\"middleware\")\r\n    }\r\n}\r\n","import { routeContainer } from \"../core\"\r\nimport { AuthorizeConfig } from \"../interfaces/authorize-config\"\r\n\r\nexport function access(authorizeConfig: AuthorizeConfig) {\r\n    return function (\r\n        target: any\r\n    ) {\r\n        routeContainer.addModelDecorator(target, authorizeConfig,\"access\")\r\n    }\r\n}\r\n","import { RouterModuleConfig } from \"../interfaces/router-module-config\";\r\nimport { routeContainer } from '../core/route-container'\r\nexport function routerModule(routerConfig: RouterModuleConfig) {\r\n    return function (\r\n        target: any\r\n    ) {\r\n        routeContainer.add(routerConfig);\r\n    }\r\n}\r\n","import { routeContainer } from \"../core\"\r\n\r\nexport function anonymous() {\r\n    return function (\r\n        target: any\r\n    ) {\r\n        routeContainer.addModelDecorator(target, null,\"anonymous\")\r\n    }\r\n}\r\n","import { Directive, Input, HostBinding } from \"@angular/core\";\r\nimport { RouterLinkWithHref, Router, ActivatedRoute } from \"@angular/router\";\r\nimport { encoder } from \"../core/encoder\";\r\nimport { routeContainer } from \"../core\";\r\nimport { LocationStrategy } from \"@angular/common\";\r\n\r\n@Directive({ selector: 'a[routerLink],area[routerLink]' })\r\nexport class ExtendRouterLinkWithHref extends RouterLinkWithHref {\n    isPushed: boolean = false;\r\n    constructor(router: Router, activatedRoute: ActivatedRoute, locationStratergy: LocationStrategy) {\r\n        super(router, activatedRoute, locationStratergy);\n        this.overrideProp();\n    }\n\n    @Input() params: any[];\n\n    overrideProp() {\n        var value = [];\n        Object.defineProperty(this, \"commands\", {\n            get: function () {\n                var isEncryption = routeContainer.get().urlEncryption;\n                if (Array.isArray(value) && Array.isArray(this.params) && !this.isPushed) {\n                    this.params.forEach(t => {\n                        let encode = isEncryption ? encoder.encode(t) : t;\n                        value.push(encode);\n                    })\n                    this.isPushed = true;\n                }\n                return value;\n            },\n            set: function (v) {\n                value = v;\n            }\n        })\n    }\n}\n","import { Injector, Directive, Type, EmbeddedViewRef, ViewContainerRef, TemplateRef, Input } from \"@angular/core\";\r\nimport { NgIfContext } from \"@angular/common\";\r\nimport { routeContainer } from \"../core\";\r\nimport { IAuthorize } from '../interfaces/i-authorize'\r\nimport { componentInstanceProvider } from \"../core/component-instance-provider\";\r\n@Directive({\r\n    selector: '[rxAuthorize]'\r\n})\r\nexport class RxAuthorizeDirective {\r\n    private viewRef: EmbeddedViewRef<any> | null = null;\r\n    private _context: NgIfContext = new NgIfContext();\r\n\r\n    private _components: any[];\r\n\r\n    constructor(private viewContainerRef: ViewContainerRef, private templateRef: TemplateRef<any>, private injector: Injector) {\r\n    }\r\n\r\n    @Input('rxAuthorize') set component(value: any) {\r\n        if (Array.isArray(value)) {\r\n            var result = true;\r\n            this._components = value;\r\n            this.checkAuth(0);\r\n        } else if (value)\r\n            this.checkAccess(value);\r\n    }\r\n\r\n    checkAuth(index) {\r\n        if (this._components.length > index) {\r\n            this.checkAccess(this._components[index], index);\r\n        } else {\r\n            this.updateView(true)\r\n        }\r\n    }\r\n\r\n    checkAccess(value:any,currentIndex:number = 0) {\r\n        var authorizeModel = routeContainer.get().authorization;\r\n        let component = routeContainer.getModelDecorator(value as Function, \"access\");\r\n        if (authorizeModel && component) {\r\n            var authorize = this.injector.get(authorizeModel) as IAuthorize;\r\n            var authorizeConfig = componentInstanceProvider.getAuthorizeConfig();\r\n            var result = authorize.authorizeChildren(component.functions, authorizeConfig) as Promise<boolean> | boolean;\r\n                if (typeof result === \"boolean\") {\r\n                    if (this._components && this._components.length > 0 && result) {\r\n                        let index = currentIndex + 1;\r\n                        this.checkAuth(index);\r\n                    }\r\n                    else \r\n                        this.updateView(result);\r\n                } else\r\n                    result.then(t => {\r\n                        if (t) {\r\n                            let index = currentIndex + 1;\r\n                            this.checkAuth(index);\r\n                        }else\r\n                        this.updateView(t);\r\n                    })\r\n        }\r\n    }\r\n\r\n    private updateView(value: boolean) {\r\n        if (this.viewRef) {\r\n            this.viewContainerRef.clear();\r\n            this.viewRef = null;\r\n        }\r\n        if (value)\r\n            this.viewRef = this.viewContainerRef.createEmbeddedView(this.templateRef, this._context);\r\n        else\r\n            this.viewContainerRef.clear();\r\n    }\r\n}","import { Injector, Directive,  EmbeddedViewRef, ViewContainerRef, TemplateRef, Input } from \"@angular/core\";\r\nimport { NgIfContext } from \"@angular/common\";\r\nimport { routeContainer } from \"../core\";\r\nimport { IMultilingual } from \"../interfaces/i-multilingual\";\r\n@Directive({\r\n    selector: '[rxMultilingual]'\r\n})\r\nexport class RxMultilingualDirective {\r\n    private viewRef: EmbeddedViewRef<any> | null = null;\r\n    private _context: NgIfContext = new NgIfContext();\r\n\r\n    constructor(private viewContainerRef: ViewContainerRef, private templateRef: TemplateRef<any>, private injector: Injector) {}\r\n\r\n    @Input('rxMultilingual') set component(value: any) {\r\n        let childMultiLingual = routeContainer.get().childMultilingualResolver\r\n        if (childMultiLingual) {\r\n            var childMultilingual = this.injector.get(childMultiLingual) as IMultilingual;\r\n            var result = childMultilingual.resolveChildren(this.viewContainerRef[\"_view\"].component.constructor);\r\n            if(typeof result == \"boolean\")\r\n                this.updateView(result);\r\n            else\r\n                result.then(t => {\r\n                    this.updateView(t);\r\n                })\r\n        }\r\n    }\r\n\r\n    private updateView(value: boolean) {\r\n        if (this.viewRef) {\r\n            this.viewContainerRef.clear();\r\n            this.viewRef = null;\r\n        }\r\n        if (value)\r\n            this.viewRef = this.viewContainerRef.createEmbeddedView(this.templateRef, this._context);\r\n        else\r\n            this.viewContainerRef.clear();\r\n    }\r\n}","import { NgModule } from \"@angular/core\";\r\n\r\nimport { BaseCanActivate } from \"../guard/base-can-activate.guard\";\r\nimport { BaseCanDeactivate } from \"../guard/base-can-deactivate.guard\";\r\nimport { ExtendRouterLinkWithHref } from \"../directives/extend-router-link-with-href\"\r\nimport { ParamResolver } from '../core/param-resolver.service'\r\nimport { RxAuthorizeDirective } from \"../directives/rx-authorize.directive\";\r\nimport { RxMultilingualDirective } from \"../directives/rx-multilingual.directive\";\r\n\r\n@NgModule({\n    declarations: [ExtendRouterLinkWithHref, RxAuthorizeDirective, RxMultilingualDirective],\n    exports: [ExtendRouterLinkWithHref, RxAuthorizeDirective, RxMultilingualDirective],\n    providers: [BaseCanActivate, BaseCanDeactivate, ParamResolver]\n})\nexport class RxRoutingModule {\n\n}\n","export class AuthorizeConfig {\r\n    accessLevel: number | number[] | any;\r\n    action: string;\r\n    selectorName?: string;\r\n    data?: { [key: string]: any }\r\n}\r\n","import { Routes } from \"@angular/router\";\r\nimport { routePath } from \"./route-path.function\";\r\n\r\nexport function routes(routes: Routes) : Routes {\r\n    let _routes: Routes = [];\r\n    routes.forEach(t => {\r\n        if (t.path)\r\n            t.path = routePath(t.path)\r\n        if (t.redirectTo)\r\n            t.redirectTo = routePath(t.redirectTo)\r\n        _routes.push(t)\r\n    })\r\n    return _routes;\r\n}\r\n","import { OnDestroy, Type } from \"@angular/core\";\r\nimport { Router, UrlTree, NavigationExtras } from \"@angular/router\";\r\nimport { RxHttp } from \"@rxweb/http\"\r\nimport { ClientDataStorage } from \"@rxweb/storage\"\r\nimport { componentInstanceProvider } from \"./component-instance-provider\";\r\nimport { routeContainer } from \"./route-container\";\r\nimport { AuthorizeConfig } from '../interfaces/authorize-config'\r\nimport { ExtendNavigationExtras } from \"../interfaces/extend-navigation-extras\";\r\nimport { encoder } from \"../core/encoder\";\r\n\r\nexport abstract class CoreComponent extends RxHttp implements OnDestroy {\r\n\r\n    user: { [key: string]: any };\r\n    params: { [key: string]: any };\r\n    queryParams: { [key: string]: any };\r\n    data: any;\r\n    storage: ClientDataStorage;\r\n    parentAuthorizeConfig: AuthorizeConfig;\r\n    authorizeConfig: AuthorizeConfig\r\n    private navigation: Router;\r\n\r\n    onQueryParamsChanged() { }\r\n    onParamsChanged() { }\r\n\r\n\r\n    constructor() {\r\n        super();\r\n        let result = componentInstanceProvider.getResult();\r\n        if (result && result.activatedRouteSnapshot) {\r\n            this.params = result.activatedRouteSnapshot.params;\r\n            this.queryParams = result.activatedRouteSnapshot.queryParams;\r\n            this.navigation = result.router;\r\n            this.user = routeContainer.getUser();\r\n            this.data = result.activatedRouteSnapshot.data;\r\n            this.storage = new ClientDataStorage();\r\n            this.parentAuthorizeConfig = result.authorizeConfig;\r\n            let decoratorConfig = routeContainer.getModelDecorator(this.constructor as Function, \"access\")\r\n            if (decoratorConfig)\r\n                this.authorizeConfig = decoratorConfig.functions;\r\n            componentInstanceProvider.add(this.constructor.name, this.instanceProvider.bind(this), this.paramsChange.bind(this), this.queryParamsChange.bind(this));\r\n        }\r\n    }\r\n\r\n    private instanceProvider() {\r\n        return this;\r\n    }\r\n\r\n    resolve<T>(component: Type<T>): T {\r\n        return componentInstanceProvider.resolve(component.constructor);\r\n    }\r\n\r\n\r\n    navigate(commands: any[], extras?: ExtendNavigationExtras): Promise<boolean> {\r\n        return this.navigation.navigate(commands.concat(this.getParsedParams(extras)), extras);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        componentInstanceProvider.dispose(this.constructor);\r\n    }\r\n\r\n    private paramsChange(params: { [key: string]: any }) {\r\n        this.params = params;\r\n        this.onParamsChanged();\r\n    }\r\n\r\n    private queryParamsChange(queryParams: { [key: string]: any }) {\r\n        this.queryParams = queryParams;\r\n        this.onQueryParamsChanged();\r\n    }\r\n\r\n    private getParsedParams(extras: ExtendNavigationExtras) {\r\n        let params = []\r\n        if (extras && extras.params) {\r\n            var isEncryption = routeContainer.get().urlEncryption;\r\n            extras.params.forEach(t => {\r\n                let encode = isEncryption ? encoder.encode(t) : t;\r\n                params.push(encode);\r\n            })\r\n        }\r\n        return params\r\n    }\r\n}"],"names":["middleware","tslib_1.__decorate"],"mappings":"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"}