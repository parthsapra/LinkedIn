import * as tslib_1 from "tslib";
import { Injector, Directive, ViewContainerRef, TemplateRef, Input } from "@angular/core";
import { NgIfContext } from "@angular/common";
import { routeContainer } from "../core";
let RxMultilingualDirective = class RxMultilingualDirective {
    constructor(viewContainerRef, templateRef, injector) {
        this.viewContainerRef = viewContainerRef;
        this.templateRef = templateRef;
        this.injector = injector;
        this.viewRef = null;
        this._context = new NgIfContext();
    }
    set component(value) {
        let childMultiLingual = routeContainer.get().childMultilingualResolver;
        if (childMultiLingual) {
            var childMultilingual = this.injector.get(childMultiLingual);
            var result = childMultilingual.resolveChildren(this.viewContainerRef["_view"].component.constructor);
            if (typeof result == "boolean")
                this.updateView(result);
            else
                result.then(t => {
                    this.updateView(t);
                });
        }
    }
    updateView(value) {
        if (this.viewRef) {
            this.viewContainerRef.clear();
            this.viewRef = null;
        }
        if (value)
            this.viewRef = this.viewContainerRef.createEmbeddedView(this.templateRef, this._context);
        else
            this.viewContainerRef.clear();
    }
};
tslib_1.__decorate([
    Input('rxMultilingual'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], RxMultilingualDirective.prototype, "component", null);
RxMultilingualDirective = tslib_1.__decorate([
    Directive({
        selector: '[rxMultilingual]'
    }),
    tslib_1.__metadata("design:paramtypes", [ViewContainerRef, TemplateRef, Injector])
], RxMultilingualDirective);
export { RxMultilingualDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicngtbXVsdGlsaW5ndWFsLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9hbmd1bGFyLXJvdXRlci8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvcngtbXVsdGlsaW5ndWFsLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQW9CLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUcsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFLekMsSUFBYSx1QkFBdUIsR0FBcEMsTUFBYSx1QkFBdUI7SUFJaEMsWUFBb0IsZ0JBQWtDLEVBQVUsV0FBNkIsRUFBVSxRQUFrQjtRQUFyRyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQVUsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUhqSCxZQUFPLEdBQWdDLElBQUksQ0FBQztRQUM1QyxhQUFRLEdBQWdCLElBQUksV0FBVyxFQUFFLENBQUM7SUFFMEUsQ0FBQztJQUVwRyxJQUFJLFNBQVMsQ0FBQyxLQUFVO1FBQzdDLElBQUksaUJBQWlCLEdBQUcsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFBO1FBQ3RFLElBQUksaUJBQWlCLEVBQUU7WUFDbkIsSUFBSSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBa0IsQ0FBQztZQUM5RSxJQUFJLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNyRyxJQUFHLE9BQU8sTUFBTSxJQUFJLFNBQVM7Z0JBQ3pCLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7O2dCQUV4QixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNaLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZCLENBQUMsQ0FBQyxDQUFBO1NBQ1Q7SUFDTCxDQUFDO0lBRU8sVUFBVSxDQUFDLEtBQWM7UUFDN0IsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzlCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1NBQ3ZCO1FBQ0QsSUFBSSxLQUFLO1lBQ0wsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7O1lBRXpGLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0NBQ0osQ0FBQTtBQXhCNEI7SUFBeEIsS0FBSyxDQUFDLGdCQUFnQixDQUFDOzs7d0RBWXZCO0FBbEJRLHVCQUF1QjtJQUhuQyxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsa0JBQWtCO0tBQy9CLENBQUM7NkNBS3dDLGdCQUFnQixFQUF1QixXQUFXLEVBQXlCLFFBQVE7R0FKaEgsdUJBQXVCLENBOEJuQztTQTlCWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciwgRGlyZWN0aXZlLCAgRW1iZWRkZWRWaWV3UmVmLCBWaWV3Q29udGFpbmVyUmVmLCBUZW1wbGF0ZVJlZiwgSW5wdXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBOZ0lmQ29udGV4dCB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcclxuaW1wb3J0IHsgcm91dGVDb250YWluZXIgfSBmcm9tIFwiLi4vY29yZVwiO1xyXG5pbXBvcnQgeyBJTXVsdGlsaW5ndWFsIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvaS1tdWx0aWxpbmd1YWxcIjtcclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tyeE11bHRpbGluZ3VhbF0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSeE11bHRpbGluZ3VhbERpcmVjdGl2ZSB7XHJcbiAgICBwcml2YXRlIHZpZXdSZWY6IEVtYmVkZGVkVmlld1JlZjxhbnk+IHwgbnVsbCA9IG51bGw7XHJcbiAgICBwcml2YXRlIF9jb250ZXh0OiBOZ0lmQ29udGV4dCA9IG5ldyBOZ0lmQ29udGV4dCgpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PiwgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHt9XHJcblxyXG4gICAgQElucHV0KCdyeE11bHRpbGluZ3VhbCcpIHNldCBjb21wb25lbnQodmFsdWU6IGFueSkge1xyXG4gICAgICAgIGxldCBjaGlsZE11bHRpTGluZ3VhbCA9IHJvdXRlQ29udGFpbmVyLmdldCgpLmNoaWxkTXVsdGlsaW5ndWFsUmVzb2x2ZXJcclxuICAgICAgICBpZiAoY2hpbGRNdWx0aUxpbmd1YWwpIHtcclxuICAgICAgICAgICAgdmFyIGNoaWxkTXVsdGlsaW5ndWFsID0gdGhpcy5pbmplY3Rvci5nZXQoY2hpbGRNdWx0aUxpbmd1YWwpIGFzIElNdWx0aWxpbmd1YWw7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjaGlsZE11bHRpbGluZ3VhbC5yZXNvbHZlQ2hpbGRyZW4odGhpcy52aWV3Q29udGFpbmVyUmVmW1wiX3ZpZXdcIl0uY29tcG9uZW50LmNvbnN0cnVjdG9yKTtcclxuICAgICAgICAgICAgaWYodHlwZW9mIHJlc3VsdCA9PSBcImJvb2xlYW5cIilcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVmlldyhyZXN1bHQpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICByZXN1bHQudGhlbih0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVZpZXcodCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVwZGF0ZVZpZXcodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy52aWV3UmVmKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5jbGVhcigpO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdSZWYgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmFsdWUpXHJcbiAgICAgICAgICAgIHRoaXMudmlld1JlZiA9IHRoaXMudmlld0NvbnRhaW5lclJlZi5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZiwgdGhpcy5fY29udGV4dCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuY2xlYXIoKTtcclxuICAgIH1cclxufSJdfQ==