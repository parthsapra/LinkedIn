import * as tslib_1 from "tslib";
import { Injector, Directive, ViewContainerRef, TemplateRef, Input } from "@angular/core";
import { NgIfContext } from "@angular/common";
import { routeContainer } from "../core";
import { componentInstanceProvider } from "../core/component-instance-provider";
let RxAuthorizeDirective = class RxAuthorizeDirective {
    constructor(viewContainerRef, templateRef, injector) {
        this.viewContainerRef = viewContainerRef;
        this.templateRef = templateRef;
        this.injector = injector;
        this.viewRef = null;
        this._context = new NgIfContext();
    }
    set component(value) {
        if (Array.isArray(value)) {
            var result = true;
            this._components = value;
            this.checkAuth(0);
        }
        else if (value)
            this.checkAccess(value);
    }
    checkAuth(index) {
        if (this._components.length > index) {
            this.checkAccess(this._components[index], index);
        }
        else {
            this.updateView(true);
        }
    }
    checkAccess(value, currentIndex = 0) {
        var authorizeModel = routeContainer.get().authorization;
        let component = routeContainer.getModelDecorator(value, "access");
        if (authorizeModel && component) {
            var authorize = this.injector.get(authorizeModel);
            var authorizeConfig = componentInstanceProvider.getAuthorizeConfig();
            var result = authorize.authorizeChildren(component.functions, authorizeConfig);
            if (typeof result === "boolean") {
                if (this._components && this._components.length > 0 && result) {
                    let index = currentIndex + 1;
                    this.checkAuth(index);
                }
                else
                    this.updateView(result);
            }
            else
                result.then(t => {
                    if (t) {
                        let index = currentIndex + 1;
                        this.checkAuth(index);
                    }
                    else
                        this.updateView(t);
                });
        }
    }
    updateView(value) {
        if (this.viewRef) {
            this.viewContainerRef.clear();
            this.viewRef = null;
        }
        if (value)
            this.viewRef = this.viewContainerRef.createEmbeddedView(this.templateRef, this._context);
        else
            this.viewContainerRef.clear();
    }
};
tslib_1.__decorate([
    Input('rxAuthorize'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], RxAuthorizeDirective.prototype, "component", null);
RxAuthorizeDirective = tslib_1.__decorate([
    Directive({
        selector: '[rxAuthorize]'
    }),
    tslib_1.__metadata("design:paramtypes", [ViewContainerRef, TemplateRef, Injector])
], RxAuthorizeDirective);
export { RxAuthorizeDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicngtYXV0aG9yaXplLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9hbmd1bGFyLXJvdXRlci8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvcngtYXV0aG9yaXplLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQXlCLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakgsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFekMsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFJaEYsSUFBYSxvQkFBb0IsR0FBakMsTUFBYSxvQkFBb0I7SUFNN0IsWUFBb0IsZ0JBQWtDLEVBQVUsV0FBNkIsRUFBVSxRQUFrQjtRQUFyRyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQVUsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUxqSCxZQUFPLEdBQWdDLElBQUksQ0FBQztRQUM1QyxhQUFRLEdBQWdCLElBQUksV0FBVyxFQUFFLENBQUM7SUFLbEQsQ0FBQztJQUVxQixJQUFJLFNBQVMsQ0FBQyxLQUFVO1FBQzFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN0QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7WUFDbEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7WUFDekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNyQjthQUFNLElBQUksS0FBSztZQUNaLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELFNBQVMsQ0FBQyxLQUFLO1FBQ1gsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxLQUFLLEVBQUU7WUFDakMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3BEO2FBQU07WUFDSCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFBO1NBQ3hCO0lBQ0wsQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUFTLEVBQUMsZUFBc0IsQ0FBQztRQUN6QyxJQUFJLGNBQWMsR0FBRyxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDO1FBQ3hELElBQUksU0FBUyxHQUFHLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFpQixFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzlFLElBQUksY0FBYyxJQUFJLFNBQVMsRUFBRTtZQUM3QixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQWUsQ0FBQztZQUNoRSxJQUFJLGVBQWUsR0FBRyx5QkFBeUIsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1lBQ3JFLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLGVBQWUsQ0FBK0IsQ0FBQztZQUN6RyxJQUFJLE9BQU8sTUFBTSxLQUFLLFNBQVMsRUFBRTtnQkFDN0IsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxNQUFNLEVBQUU7b0JBQzNELElBQUksS0FBSyxHQUFHLFlBQVksR0FBRyxDQUFDLENBQUM7b0JBQzdCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ3pCOztvQkFFRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQy9COztnQkFDRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNaLElBQUksQ0FBQyxFQUFFO3dCQUNILElBQUksS0FBSyxHQUFHLFlBQVksR0FBRyxDQUFDLENBQUM7d0JBQzdCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7cUJBQ3pCOzt3QkFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN2QixDQUFDLENBQUMsQ0FBQTtTQUNiO0lBQ0wsQ0FBQztJQUVPLFVBQVUsQ0FBQyxLQUFjO1FBQzdCLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNkLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUM5QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztTQUN2QjtRQUNELElBQUksS0FBSztZQUNMLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztZQUV6RixJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDdEMsQ0FBQztDQUNKLENBQUE7QUFwRHlCO0lBQXJCLEtBQUssQ0FBQyxhQUFhLENBQUM7OztxREFPcEI7QUFoQlEsb0JBQW9CO0lBSGhDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxlQUFlO0tBQzVCLENBQUM7NkNBT3dDLGdCQUFnQixFQUF1QixXQUFXLEVBQXlCLFFBQVE7R0FOaEgsb0JBQW9CLENBNkRoQztTQTdEWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciwgRGlyZWN0aXZlLCBUeXBlLCBFbWJlZGRlZFZpZXdSZWYsIFZpZXdDb250YWluZXJSZWYsIFRlbXBsYXRlUmVmLCBJbnB1dCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IE5nSWZDb250ZXh0IH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xyXG5pbXBvcnQgeyByb3V0ZUNvbnRhaW5lciB9IGZyb20gXCIuLi9jb3JlXCI7XHJcbmltcG9ydCB7IElBdXRob3JpemUgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2ktYXV0aG9yaXplJ1xyXG5pbXBvcnQgeyBjb21wb25lbnRJbnN0YW5jZVByb3ZpZGVyIH0gZnJvbSBcIi4uL2NvcmUvY29tcG9uZW50LWluc3RhbmNlLXByb3ZpZGVyXCI7XHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbcnhBdXRob3JpemVdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUnhBdXRob3JpemVEaXJlY3RpdmUge1xyXG4gICAgcHJpdmF0ZSB2aWV3UmVmOiBFbWJlZGRlZFZpZXdSZWY8YW55PiB8IG51bGwgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBfY29udGV4dDogTmdJZkNvbnRleHQgPSBuZXcgTmdJZkNvbnRleHQoKTtcclxuXHJcbiAgICBwcml2YXRlIF9jb21wb25lbnRzOiBhbnlbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsIHByaXZhdGUgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KCdyeEF1dGhvcml6ZScpIHNldCBjb21wb25lbnQodmFsdWU6IGFueSkge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5fY29tcG9uZW50cyA9IHZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrQXV0aCgwKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlKVxyXG4gICAgICAgICAgICB0aGlzLmNoZWNrQWNjZXNzKHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBjaGVja0F1dGgoaW5kZXgpIHtcclxuICAgICAgICBpZiAodGhpcy5fY29tcG9uZW50cy5sZW5ndGggPiBpbmRleCkge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrQWNjZXNzKHRoaXMuX2NvbXBvbmVudHNbaW5kZXhdLCBpbmRleCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVWaWV3KHRydWUpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrQWNjZXNzKHZhbHVlOmFueSxjdXJyZW50SW5kZXg6bnVtYmVyID0gMCkge1xyXG4gICAgICAgIHZhciBhdXRob3JpemVNb2RlbCA9IHJvdXRlQ29udGFpbmVyLmdldCgpLmF1dGhvcml6YXRpb247XHJcbiAgICAgICAgbGV0IGNvbXBvbmVudCA9IHJvdXRlQ29udGFpbmVyLmdldE1vZGVsRGVjb3JhdG9yKHZhbHVlIGFzIEZ1bmN0aW9uLCBcImFjY2Vzc1wiKTtcclxuICAgICAgICBpZiAoYXV0aG9yaXplTW9kZWwgJiYgY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBhdXRob3JpemUgPSB0aGlzLmluamVjdG9yLmdldChhdXRob3JpemVNb2RlbCkgYXMgSUF1dGhvcml6ZTtcclxuICAgICAgICAgICAgdmFyIGF1dGhvcml6ZUNvbmZpZyA9IGNvbXBvbmVudEluc3RhbmNlUHJvdmlkZXIuZ2V0QXV0aG9yaXplQ29uZmlnKCk7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBhdXRob3JpemUuYXV0aG9yaXplQ2hpbGRyZW4oY29tcG9uZW50LmZ1bmN0aW9ucywgYXV0aG9yaXplQ29uZmlnKSBhcyBQcm9taXNlPGJvb2xlYW4+IHwgYm9vbGVhbjtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jb21wb25lbnRzICYmIHRoaXMuX2NvbXBvbmVudHMubGVuZ3RoID4gMCAmJiByZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gY3VycmVudEluZGV4ICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja0F1dGgoaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVZpZXcocmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC50aGVuKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gY3VycmVudEluZGV4ICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tBdXRoKGluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVWaWV3KHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdXBkYXRlVmlldyh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICh0aGlzLnZpZXdSZWYpIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMudmlld1JlZiA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2YWx1ZSlcclxuICAgICAgICAgICAgdGhpcy52aWV3UmVmID0gdGhpcy52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmLCB0aGlzLl9jb250ZXh0KTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5jbGVhcigpO1xyXG4gICAgfVxyXG59Il19