import * as tslib_1 from "tslib";
import { Directive, Input } from "@angular/core";
import { RouterLinkWithHref, Router, ActivatedRoute } from "@angular/router";
import { encoder } from "../core/encoder";
import { routeContainer } from "../core";
import { LocationStrategy } from "@angular/common";
let ExtendRouterLinkWithHref = class ExtendRouterLinkWithHref extends RouterLinkWithHref {
    constructor(router, activatedRoute, locationStratergy) {
        super(router, activatedRoute, locationStratergy);
        this.isPushed = false;
        this.overrideProp();
    }
    overrideProp() {
        var value = [];
        Object.defineProperty(this, "commands", {
            get: function () {
                var isEncryption = routeContainer.get().urlEncryption;
                if (Array.isArray(value) && Array.isArray(this.params) && !this.isPushed) {
                    this.params.forEach(t => {
                        let encode = isEncryption ? encoder.encode(t) : t;
                        value.push(encode);
                    });
                    this.isPushed = true;
                }
                return value;
            },
            set: function (v) {
                value = v;
            }
        });
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], ExtendRouterLinkWithHref.prototype, "params", void 0);
ExtendRouterLinkWithHref = tslib_1.__decorate([
    Directive({ selector: 'a[routerLink],area[routerLink]' }),
    tslib_1.__metadata("design:paramtypes", [Router, ActivatedRoute, LocationStrategy])
], ExtendRouterLinkWithHref);
export { ExtendRouterLinkWithHref };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5kLXJvdXRlci1saW5rLXdpdGgtaHJlZi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9hbmd1bGFyLXJvdXRlci8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvZXh0ZW5kLXJvdXRlci1saW5rLXdpdGgtaHJlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQWUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM3RSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUduRCxJQUFhLHdCQUF3QixHQUFyQyxNQUFhLHdCQUF5QixTQUFRLGtCQUFrQjtJQUU1RCxZQUFZLE1BQWMsRUFBRSxjQUE4QixFQUFFLGlCQUFtQztRQUMzRixLQUFLLENBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBRnJELGFBQVEsR0FBWSxLQUFLLENBQUM7UUFHdEIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFJRCxZQUFZO1FBQ1IsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ2YsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQ3BDLEdBQUcsRUFBRTtnQkFDRCxJQUFJLFlBQVksR0FBRyxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDO2dCQUN0RCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO29CQUN0RSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTt3QkFDcEIsSUFBSSxNQUFNLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ2xELEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ3ZCLENBQUMsQ0FBQyxDQUFBO29CQUNGLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO2lCQUN4QjtnQkFDRCxPQUFPLEtBQUssQ0FBQztZQUNqQixDQUFDO1lBQ0QsR0FBRyxFQUFFLFVBQVUsQ0FBQztnQkFDWixLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBQ2QsQ0FBQztTQUNKLENBQUMsQ0FBQTtJQUNOLENBQUM7Q0FDSixDQUFBO0FBckJZO0lBQVIsS0FBSyxFQUFFOzt3REFBZTtBQVBkLHdCQUF3QjtJQURwQyxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsZ0NBQWdDLEVBQUUsQ0FBQzs2Q0FHbEMsTUFBTSxFQUFrQixjQUFjLEVBQXFCLGdCQUFnQjtHQUZ0Rix3QkFBd0IsQ0E0QnBDO1NBNUJZLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIEhvc3RCaW5kaW5nIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgUm91dGVyTGlua1dpdGhIcmVmLCBSb3V0ZXIsIEFjdGl2YXRlZFJvdXRlIH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xyXG5pbXBvcnQgeyBlbmNvZGVyIH0gZnJvbSBcIi4uL2NvcmUvZW5jb2RlclwiO1xyXG5pbXBvcnQgeyByb3V0ZUNvbnRhaW5lciB9IGZyb20gXCIuLi9jb3JlXCI7XHJcbmltcG9ydCB7IExvY2F0aW9uU3RyYXRlZ3kgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XHJcblxyXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdhW3JvdXRlckxpbmtdLGFyZWFbcm91dGVyTGlua10nIH0pXHJcbmV4cG9ydCBjbGFzcyBFeHRlbmRSb3V0ZXJMaW5rV2l0aEhyZWYgZXh0ZW5kcyBSb3V0ZXJMaW5rV2l0aEhyZWYge1xuICAgIGlzUHVzaGVkOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBjb25zdHJ1Y3Rvcihyb3V0ZXI6IFJvdXRlciwgYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlLCBsb2NhdGlvblN0cmF0ZXJneTogTG9jYXRpb25TdHJhdGVneSkge1xyXG4gICAgICAgIHN1cGVyKHJvdXRlciwgYWN0aXZhdGVkUm91dGUsIGxvY2F0aW9uU3RyYXRlcmd5KTtcbiAgICAgICAgdGhpcy5vdmVycmlkZVByb3AoKTtcbiAgICB9XG5cbiAgICBASW5wdXQoKSBwYXJhbXM6IGFueVtdO1xuXG4gICAgb3ZlcnJpZGVQcm9wKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBbXTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY29tbWFuZHNcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlzRW5jcnlwdGlvbiA9IHJvdXRlQ29udGFpbmVyLmdldCgpLnVybEVuY3J5cHRpb247XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIEFycmF5LmlzQXJyYXkodGhpcy5wYXJhbXMpICYmICF0aGlzLmlzUHVzaGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyYW1zLmZvckVhY2godCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZW5jb2RlID0gaXNFbmNyeXB0aW9uID8gZW5jb2Rlci5lbmNvZGUodCkgOiB0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUucHVzaChlbmNvZGUpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzUHVzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxufVxuIl19