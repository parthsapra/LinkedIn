import * as tslib_1 from "tslib";
import { Injectable, Injector } from "@angular/core";
import { Router } from "@angular/router";
import { authResolver } from "../functions/auth-resolver.function";
import { authorize } from "../functions/authorize.function";
import { middleware } from "../functions/middleware.function";
import { paramsDecryption } from "../functions/params-decryption.function";
import { ParamResolver } from "../core/param-resolver.service";
import { componentInstanceProvider } from "../core/component-instance-provider";
let BaseCanActivate = class BaseCanActivate {
    constructor(injector, paramResolver) {
        this.injector = injector;
        this.paramResolver = paramResolver;
    }
    canActivate(route, state) {
        var promise = new Promise((r, reject) => {
            paramsDecryption(route);
            let resolve = this.resolveRoute(r, route);
            authorize(this.injector, route, authResolver(this.injector, middleware(this.injector, route, resolve)), resolve);
        });
        return promise;
    }
    resolveRoute(resolve, route) {
        return (value) => {
            if (value)
                componentInstanceProvider.setComponentRoute(route, this.injector.get(Router));
            resolve(value);
        };
    }
};
BaseCanActivate = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [Injector, ParamResolver])
], BaseCanActivate);
export { BaseCanActivate };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jYW4tYWN0aXZhdGUuZ3VhcmQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvYW5ndWxhci1yb3V0ZXIvIiwic291cmNlcyI6WyJndWFyZC9iYXNlLWNhbi1hY3RpdmF0ZS5ndWFyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLE1BQU0sRUFBNEQsTUFBTSxpQkFBaUIsQ0FBQTtBQUNsRyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDbkUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzVELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUM5RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUMzRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDL0QsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFJaEYsSUFBYSxlQUFlLEdBQTVCLE1BQWEsZUFBZTtJQUN4QixZQUNZLFFBQWtCLEVBQVUsYUFBNEI7UUFBeEQsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0lBQUksQ0FBQztJQUV6RSxXQUFXLENBQ1AsS0FBNkIsRUFDN0IsS0FBMEI7UUFFMUIsSUFBSSxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQVUsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDN0MsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDeEIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUE7WUFDekMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFDLEtBQUssRUFBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQ2xILENBQUMsQ0FBQyxDQUFBO1FBQ0YsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUVELFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBNkI7UUFDL0MsT0FBTyxDQUFDLEtBQWMsRUFBRSxFQUFFO1lBQ3RCLElBQUksS0FBSztnQkFDTCx5QkFBeUIsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNsRixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkIsQ0FBQyxDQUFBO0lBQ0wsQ0FBQztDQUNKLENBQUE7QUF2QlksZUFBZTtJQUQzQixVQUFVLEVBQUU7NkNBR2EsUUFBUSxFQUF5QixhQUFhO0dBRjNELGVBQWUsQ0F1QjNCO1NBdkJZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IFJvdXRlciAsQ2FuQWN0aXZhdGUsIEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIFJvdXRlclN0YXRlU25hcHNob3QgfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCJcclxuaW1wb3J0IHsgYXV0aFJlc29sdmVyIH0gZnJvbSBcIi4uL2Z1bmN0aW9ucy9hdXRoLXJlc29sdmVyLmZ1bmN0aW9uXCI7XHJcbmltcG9ydCB7IGF1dGhvcml6ZSB9IGZyb20gXCIuLi9mdW5jdGlvbnMvYXV0aG9yaXplLmZ1bmN0aW9uXCI7XHJcbmltcG9ydCB7IG1pZGRsZXdhcmUgfSBmcm9tIFwiLi4vZnVuY3Rpb25zL21pZGRsZXdhcmUuZnVuY3Rpb25cIjtcclxuaW1wb3J0IHsgcGFyYW1zRGVjcnlwdGlvbiB9IGZyb20gXCIuLi9mdW5jdGlvbnMvcGFyYW1zLWRlY3J5cHRpb24uZnVuY3Rpb25cIjtcclxuaW1wb3J0IHsgUGFyYW1SZXNvbHZlciB9IGZyb20gXCIuLi9jb3JlL3BhcmFtLXJlc29sdmVyLnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgY29tcG9uZW50SW5zdGFuY2VQcm92aWRlciB9IGZyb20gXCIuLi9jb3JlL2NvbXBvbmVudC1pbnN0YW5jZS1wcm92aWRlclwiO1xyXG5cclxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQmFzZUNhbkFjdGl2YXRlIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSBwYXJhbVJlc29sdmVyOiBQYXJhbVJlc29sdmVyKSB7IH1cblxuICAgIGNhbkFjdGl2YXRlKFxuICAgICAgICByb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcbiAgICAgICAgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3RcbiAgICApOiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2U8Ym9vbGVhbj4oKHIsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgcGFyYW1zRGVjcnlwdGlvbihyb3V0ZSk7XG4gICAgICAgICAgICBsZXQgcmVzb2x2ZSA9IHRoaXMucmVzb2x2ZVJvdXRlKHIsIHJvdXRlKVxuICAgICAgICAgICAgYXV0aG9yaXplKHRoaXMuaW5qZWN0b3IsIHJvdXRlLCBhdXRoUmVzb2x2ZXIodGhpcy5pbmplY3RvciwgbWlkZGxld2FyZSh0aGlzLmluamVjdG9yLHJvdXRlLHJlc29sdmUpKSwgcmVzb2x2ZSlcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuXG4gICAgcmVzb2x2ZVJvdXRlKHJlc29sdmUsIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KSB7XG4gICAgICAgIHJldHVybiAodmFsdWU6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkgXG4gICAgICAgICAgICAgICAgY29tcG9uZW50SW5zdGFuY2VQcm92aWRlci5zZXRDb21wb25lbnRSb3V0ZShyb3V0ZSwgdGhpcy5pbmplY3Rvci5nZXQoUm91dGVyKSk7XG4gICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==