export const componentInstanceProvider = new (class {
    constructor() {
        this.instances = new Array();
    }
    broadCastParamChange(params) {
        if (Object.keys(params).length > 0)
            this.instances.forEach(t => {
                t.paramChanged(params);
            });
    }
    broadCastQueryParamChange(queryParams) {
        if (Object.keys(queryParams).length > 0)
            this.instances.forEach(t => {
                t.queryParamChanged(queryParams);
            });
    }
    setComponentRoute(route, router) {
        this.activatedRouteSnapshot = route;
        this.router = router;
        this.broadCastParamChange(route.params);
        this.broadCastQueryParamChange(route.queryParams);
    }
    setAuthroizeConfig(config) {
        this.authorizeConfig = config;
    }
    getAuthorizeConfig() {
        return this.authorizeConfig;
    }
    getResult() {
        return {
            activatedRouteSnapshot: this.activatedRouteSnapshot,
            router: this.router,
            authorizeConfig: this.authorizeConfig
        };
    }
    getActivatedRouteSnapshot() {
        return this.activatedRouteSnapshot;
    }
    getRouter() {
        return this.router;
    }
    add(name, resolver, paramChanged, queryParamChanged) {
        this.instances.push({ name: name, resolver: resolver, paramChanged: paramChanged, queryParamChanged: queryParamChanged });
    }
    resolve(target) {
        let instance = this.instances.filter(t => t.name == target.name)[0];
        if (instance)
            return instance.resolver();
        throw new Error("Component instance is not available");
    }
    dispose(target) {
        let instances = this.instances.filter(t => t.name == target.name);
        let length = instances.length;
        for (var i = 0; i < length; i++)
            instances.splice(0, 1);
    }
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LWluc3RhbmNlLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL2FuZ3VsYXItcm91dGVyLyIsInNvdXJjZXMiOlsiY29yZS9jb21wb25lbnQtaW5zdGFuY2UtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBVzlCLElBQUksQ0FBQztJQUFBO1FBQ0wsY0FBUyxHQUFtQyxJQUFJLEtBQUssRUFBMkIsQ0FBQztJQWtFckYsQ0FBQztJQTlERyxvQkFBb0IsQ0FBQyxNQUE4QjtRQUMvQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUM7WUFDbEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3ZCLENBQUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDM0IsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRUQseUJBQXlCLENBQUMsV0FBbUM7UUFDekQsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDO1lBQ25DLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUN2QixDQUFDLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDckMsQ0FBQyxDQUFDLENBQUE7SUFDVixDQUFDO0lBRUQsaUJBQWlCLENBQUMsS0FBNkIsRUFBQyxNQUFhO1FBQ3pELElBQUksQ0FBQyxzQkFBc0IsR0FBRyxLQUFLLENBQUM7UUFDcEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMseUJBQXlCLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxNQUF1QjtRQUN0QyxJQUFJLENBQUMsZUFBZSxHQUFHLE1BQU0sQ0FBQztJQUNsQyxDQUFDO0lBRUQsa0JBQWtCO1FBQ2QsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxTQUFTO1FBQ0wsT0FBTztZQUNILHNCQUFzQixFQUFFLElBQUksQ0FBQyxzQkFBc0I7WUFDbkQsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLGVBQWUsRUFBRSxJQUFJLENBQUMsZUFBZTtTQUN4QyxDQUFBO0lBQ0wsQ0FBQztJQUVELHlCQUF5QjtRQUNyQixPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztJQUN2QyxDQUFDO0lBRUQsU0FBUztRQUNMLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQsR0FBRyxDQUFDLElBQVksRUFBRSxRQUFrQixFQUFFLFlBQXNELEVBQUUsaUJBQWdFO1FBQzFKLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBQzlILENBQUM7SUFFRCxPQUFPLENBQUMsTUFBZ0I7UUFDcEIsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwRSxJQUFJLFFBQVE7WUFDUixPQUFPLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMvQixNQUFNLElBQUksS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVELE9BQU8sQ0FBQyxNQUFnQjtRQUNwQixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xFLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDOUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUU7WUFDM0IsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0IsQ0FBQztDQUNKLENBQUMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50SW5zdGFuY2VDb25maWcgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9jb21wb25lbnQtaW5zdGFuY2UtY29uZmlnXCI7XHJcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIFJvdXRlciB9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcclxuaW1wb3J0IHsgQXV0aG9yaXplQ29uZmlnIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9hdXRob3JpemUtY29uZmlnJ1xyXG5leHBvcnQgY29uc3QgY29tcG9uZW50SW5zdGFuY2VQcm92aWRlcjpcclxuICAgIHtcclxuICAgICAgICBhZGQobmFtZTogc3RyaW5nLCByZXNvbHZlcjogRnVuY3Rpb24sIHBhcmFtQ2hhbmdlZDogKHBhcmFtczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSkgPT4gdm9pZCwgcXVlcnlQYXJhbUNoYW5nZWQ6IChxdWVyeVBhcmFtczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSkgPT4gdm9pZCksXHJcbiAgICAgICAgcmVzb2x2ZSh0YXJnZXQ6IEZ1bmN0aW9uKSxcclxuICAgICAgICBkaXNwb3NlKHRhcmdldDogRnVuY3Rpb24pXHJcbiAgICAgICAgc2V0Q29tcG9uZW50Um91dGUocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3Qscm91dGVyOlJvdXRlcik7XHJcbiAgICAgICAgZ2V0QWN0aXZhdGVkUm91dGVTbmFwc2hvdCgpOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90O1xyXG4gICAgICAgIGdldFJvdXRlcigpOiBSb3V0ZXI7XHJcbiAgICAgICAgZ2V0UmVzdWx0KCk6IHsgYWN0aXZhdGVkUm91dGVTbmFwc2hvdDogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgcm91dGVyOiBSb3V0ZXIsIGF1dGhvcml6ZUNvbmZpZzogQXV0aG9yaXplQ29uZmlnIH0sXHJcbiAgICAgICAgc2V0QXV0aHJvaXplQ29uZmlnKGNvbmZpZzogQXV0aG9yaXplQ29uZmlnKSxcclxuICAgICAgICBnZXRBdXRob3JpemVDb25maWcoKSBcclxuICAgIH0gPSBuZXcgKGNsYXNzIHtcclxuICAgICAgICBpbnN0YW5jZXM6IEFycmF5PENvbXBvbmVudEluc3RhbmNlQ29uZmlnPiA9IG5ldyBBcnJheTxDb21wb25lbnRJbnN0YW5jZUNvbmZpZz4oKTtcclxuICAgICAgICBhY3RpdmF0ZWRSb3V0ZVNuYXBzaG90OiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90O1xyXG4gICAgICAgIHJvdXRlcjogUm91dGVyO1xyXG4gICAgICAgIGF1dGhvcml6ZUNvbmZpZzpBdXRob3JpemVDb25maWdcclxuICAgICAgICBicm9hZENhc3RQYXJhbUNoYW5nZShwYXJhbXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0pIHtcclxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHBhcmFtcykubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZXMuZm9yRWFjaCh0ID0+IHtcclxuICAgICAgICAgICAgICAgIHQucGFyYW1DaGFuZ2VkKHBhcmFtcyk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBicm9hZENhc3RRdWVyeVBhcmFtQ2hhbmdlKHF1ZXJ5UGFyYW1zOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSB7XHJcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhxdWVyeVBhcmFtcykubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VzLmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5xdWVyeVBhcmFtQ2hhbmdlZChxdWVyeVBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0Q29tcG9uZW50Um91dGUocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3Qscm91dGVyOlJvdXRlcikge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2YXRlZFJvdXRlU25hcHNob3QgPSByb3V0ZTtcclxuICAgICAgICAgICAgdGhpcy5yb3V0ZXIgPSByb3V0ZXI7XHJcbiAgICAgICAgICAgIHRoaXMuYnJvYWRDYXN0UGFyYW1DaGFuZ2Uocm91dGUucGFyYW1zKTtcclxuICAgICAgICAgICAgdGhpcy5icm9hZENhc3RRdWVyeVBhcmFtQ2hhbmdlKHJvdXRlLnF1ZXJ5UGFyYW1zKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldEF1dGhyb2l6ZUNvbmZpZyhjb25maWc6IEF1dGhvcml6ZUNvbmZpZykge1xyXG4gICAgICAgICAgICB0aGlzLmF1dGhvcml6ZUNvbmZpZyA9IGNvbmZpZztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldEF1dGhvcml6ZUNvbmZpZygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXV0aG9yaXplQ29uZmlnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0UmVzdWx0KCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZhdGVkUm91dGVTbmFwc2hvdDogdGhpcy5hY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LFxyXG4gICAgICAgICAgICAgICAgcm91dGVyOiB0aGlzLnJvdXRlcixcclxuICAgICAgICAgICAgICAgIGF1dGhvcml6ZUNvbmZpZzogdGhpcy5hdXRob3JpemVDb25maWdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0QWN0aXZhdGVkUm91dGVTbmFwc2hvdCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZhdGVkUm91dGVTbmFwc2hvdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldFJvdXRlcigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucm91dGVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWRkKG5hbWU6IHN0cmluZywgcmVzb2x2ZXI6IEZ1bmN0aW9uLCBwYXJhbUNoYW5nZWQ6IChwYXJhbXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0pID0+IHZvaWQsIHF1ZXJ5UGFyYW1DaGFuZ2VkOiAocXVlcnlQYXJhbXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0pID0+IHZvaWQpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZXMucHVzaCh7IG5hbWU6IG5hbWUsIHJlc29sdmVyOiByZXNvbHZlciwgcGFyYW1DaGFuZ2VkOiBwYXJhbUNoYW5nZWQsIHF1ZXJ5UGFyYW1DaGFuZ2VkOiBxdWVyeVBhcmFtQ2hhbmdlZCB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlc29sdmUodGFyZ2V0OiBGdW5jdGlvbikge1xyXG4gICAgICAgICAgICBsZXQgaW5zdGFuY2UgPSB0aGlzLmluc3RhbmNlcy5maWx0ZXIodCA9PiB0Lm5hbWUgPT0gdGFyZ2V0Lm5hbWUpWzBdO1xyXG4gICAgICAgICAgICBpZiAoaW5zdGFuY2UpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2UucmVzb2x2ZXIoKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29tcG9uZW50IGluc3RhbmNlIGlzIG5vdCBhdmFpbGFibGVcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkaXNwb3NlKHRhcmdldDogRnVuY3Rpb24pIHtcclxuICAgICAgICAgICAgbGV0IGluc3RhbmNlcyA9IHRoaXMuaW5zdGFuY2VzLmZpbHRlcih0ID0+IHQubmFtZSA9PSB0YXJnZXQubmFtZSk7XHJcbiAgICAgICAgICAgIGxldCBsZW5ndGggPSBpbnN0YW5jZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2VzLnNwbGljZSgwLCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9KSgpO1xyXG4iXX0=