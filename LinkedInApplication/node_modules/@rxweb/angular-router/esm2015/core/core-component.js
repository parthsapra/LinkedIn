import { RxHttp } from "@rxweb/http";
import { ClientDataStorage } from "@rxweb/storage";
import { componentInstanceProvider } from "./component-instance-provider";
import { routeContainer } from "./route-container";
import { encoder } from "../core/encoder";
export class CoreComponent extends RxHttp {
    onQueryParamsChanged() { }
    onParamsChanged() { }
    constructor() {
        super();
        let result = componentInstanceProvider.getResult();
        if (result && result.activatedRouteSnapshot) {
            this.params = result.activatedRouteSnapshot.params;
            this.queryParams = result.activatedRouteSnapshot.queryParams;
            this.navigation = result.router;
            this.user = routeContainer.getUser();
            this.data = result.activatedRouteSnapshot.data;
            this.storage = new ClientDataStorage();
            this.parentAuthorizeConfig = result.authorizeConfig;
            let decoratorConfig = routeContainer.getModelDecorator(this.constructor, "access");
            if (decoratorConfig)
                this.authorizeConfig = decoratorConfig.functions;
            componentInstanceProvider.add(this.constructor.name, this.instanceProvider.bind(this), this.paramsChange.bind(this), this.queryParamsChange.bind(this));
        }
    }
    instanceProvider() {
        return this;
    }
    resolve(component) {
        return componentInstanceProvider.resolve(component.constructor);
    }
    navigate(commands, extras) {
        return this.navigation.navigate(commands.concat(this.getParsedParams(extras)), extras);
    }
    ngOnDestroy() {
        componentInstanceProvider.dispose(this.constructor);
    }
    paramsChange(params) {
        this.params = params;
        this.onParamsChanged();
    }
    queryParamsChange(queryParams) {
        this.queryParams = queryParams;
        this.onQueryParamsChanged();
    }
    getParsedParams(extras) {
        let params = [];
        if (extras && extras.params) {
            var isEncryption = routeContainer.get().urlEncryption;
            extras.params.forEach(t => {
                let encode = isEncryption ? encoder.encode(t) : t;
                params.push(encode);
            });
        }
        return params;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS1jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvYW5ndWxhci1yb3V0ZXIvIiwic291cmNlcyI6WyJjb3JlL2NvcmUtY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxhQUFhLENBQUE7QUFDcEMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFDbEQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDMUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBR25ELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUxQyxNQUFNLE9BQWdCLGFBQWMsU0FBUSxNQUFNO0lBVzlDLG9CQUFvQixLQUFLLENBQUM7SUFDMUIsZUFBZSxLQUFLLENBQUM7SUFHckI7UUFDSSxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksTUFBTSxHQUFHLHlCQUF5QixDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ25ELElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRTtZQUN6QyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUM7WUFDbkQsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDO1lBQzdELElBQUksQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNoQyxJQUFJLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNyQyxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUM7WUFDL0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGlCQUFpQixFQUFFLENBQUM7WUFDdkMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUM7WUFDcEQsSUFBSSxlQUFlLEdBQUcsY0FBYyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxXQUF1QixFQUFFLFFBQVEsQ0FBQyxDQUFBO1lBQzlGLElBQUksZUFBZTtnQkFDZixJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQyxTQUFTLENBQUM7WUFDckQseUJBQXlCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQzNKO0lBQ0wsQ0FBQztJQUVPLGdCQUFnQjtRQUNwQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsT0FBTyxDQUFJLFNBQWtCO1FBQ3pCLE9BQU8seUJBQXlCLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBR0QsUUFBUSxDQUFDLFFBQWUsRUFBRSxNQUErQjtRQUNyRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzNGLENBQUM7SUFFRCxXQUFXO1FBQ1AseUJBQXlCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRU8sWUFBWSxDQUFDLE1BQThCO1FBQy9DLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRU8saUJBQWlCLENBQUMsV0FBbUM7UUFDekQsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVPLGVBQWUsQ0FBQyxNQUE4QjtRQUNsRCxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUE7UUFDZixJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQ3pCLElBQUksWUFBWSxHQUFHLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUM7WUFDdEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3RCLElBQUksTUFBTSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNsRCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hCLENBQUMsQ0FBQyxDQUFBO1NBQ0w7UUFDRCxPQUFPLE1BQU0sQ0FBQTtJQUNqQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkRlc3Ryb3ksIFR5cGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBSb3V0ZXIsIFVybFRyZWUsIE5hdmlnYXRpb25FeHRyYXMgfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XHJcbmltcG9ydCB7IFJ4SHR0cCB9IGZyb20gXCJAcnh3ZWIvaHR0cFwiXHJcbmltcG9ydCB7IENsaWVudERhdGFTdG9yYWdlIH0gZnJvbSBcIkByeHdlYi9zdG9yYWdlXCJcclxuaW1wb3J0IHsgY29tcG9uZW50SW5zdGFuY2VQcm92aWRlciB9IGZyb20gXCIuL2NvbXBvbmVudC1pbnN0YW5jZS1wcm92aWRlclwiO1xyXG5pbXBvcnQgeyByb3V0ZUNvbnRhaW5lciB9IGZyb20gXCIuL3JvdXRlLWNvbnRhaW5lclwiO1xyXG5pbXBvcnQgeyBBdXRob3JpemVDb25maWcgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2F1dGhvcml6ZS1jb25maWcnXHJcbmltcG9ydCB7IEV4dGVuZE5hdmlnYXRpb25FeHRyYXMgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9leHRlbmQtbmF2aWdhdGlvbi1leHRyYXNcIjtcclxuaW1wb3J0IHsgZW5jb2RlciB9IGZyb20gXCIuLi9jb3JlL2VuY29kZXJcIjtcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb3JlQ29tcG9uZW50IGV4dGVuZHMgUnhIdHRwIGltcGxlbWVudHMgT25EZXN0cm95IHtcclxuXHJcbiAgICB1c2VyOiB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xyXG4gICAgcGFyYW1zOiB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xyXG4gICAgcXVlcnlQYXJhbXM6IHsgW2tleTogc3RyaW5nXTogYW55IH07XHJcbiAgICBkYXRhOiBhbnk7XHJcbiAgICBzdG9yYWdlOiBDbGllbnREYXRhU3RvcmFnZTtcclxuICAgIHBhcmVudEF1dGhvcml6ZUNvbmZpZzogQXV0aG9yaXplQ29uZmlnO1xyXG4gICAgYXV0aG9yaXplQ29uZmlnOiBBdXRob3JpemVDb25maWdcclxuICAgIHByaXZhdGUgbmF2aWdhdGlvbjogUm91dGVyO1xyXG5cclxuICAgIG9uUXVlcnlQYXJhbXNDaGFuZ2VkKCkgeyB9XHJcbiAgICBvblBhcmFtc0NoYW5nZWQoKSB7IH1cclxuXHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gY29tcG9uZW50SW5zdGFuY2VQcm92aWRlci5nZXRSZXN1bHQoKTtcclxuICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC5hY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyYW1zID0gcmVzdWx0LmFjdGl2YXRlZFJvdXRlU25hcHNob3QucGFyYW1zO1xyXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5UGFyYW1zID0gcmVzdWx0LmFjdGl2YXRlZFJvdXRlU25hcHNob3QucXVlcnlQYXJhbXM7XHJcbiAgICAgICAgICAgIHRoaXMubmF2aWdhdGlvbiA9IHJlc3VsdC5yb3V0ZXI7XHJcbiAgICAgICAgICAgIHRoaXMudXNlciA9IHJvdXRlQ29udGFpbmVyLmdldFVzZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhID0gcmVzdWx0LmFjdGl2YXRlZFJvdXRlU25hcHNob3QuZGF0YTtcclxuICAgICAgICAgICAgdGhpcy5zdG9yYWdlID0gbmV3IENsaWVudERhdGFTdG9yYWdlKCk7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50QXV0aG9yaXplQ29uZmlnID0gcmVzdWx0LmF1dGhvcml6ZUNvbmZpZztcclxuICAgICAgICAgICAgbGV0IGRlY29yYXRvckNvbmZpZyA9IHJvdXRlQ29udGFpbmVyLmdldE1vZGVsRGVjb3JhdG9yKHRoaXMuY29uc3RydWN0b3IgYXMgRnVuY3Rpb24sIFwiYWNjZXNzXCIpXHJcbiAgICAgICAgICAgIGlmIChkZWNvcmF0b3JDb25maWcpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmF1dGhvcml6ZUNvbmZpZyA9IGRlY29yYXRvckNvbmZpZy5mdW5jdGlvbnM7XHJcbiAgICAgICAgICAgIGNvbXBvbmVudEluc3RhbmNlUHJvdmlkZXIuYWRkKHRoaXMuY29uc3RydWN0b3IubmFtZSwgdGhpcy5pbnN0YW5jZVByb3ZpZGVyLmJpbmQodGhpcyksIHRoaXMucGFyYW1zQ2hhbmdlLmJpbmQodGhpcyksIHRoaXMucXVlcnlQYXJhbXNDaGFuZ2UuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaW5zdGFuY2VQcm92aWRlcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICByZXNvbHZlPFQ+KGNvbXBvbmVudDogVHlwZTxUPik6IFQge1xyXG4gICAgICAgIHJldHVybiBjb21wb25lbnRJbnN0YW5jZVByb3ZpZGVyLnJlc29sdmUoY29tcG9uZW50LmNvbnN0cnVjdG9yKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgbmF2aWdhdGUoY29tbWFuZHM6IGFueVtdLCBleHRyYXM/OiBFeHRlbmROYXZpZ2F0aW9uRXh0cmFzKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmF2aWdhdGlvbi5uYXZpZ2F0ZShjb21tYW5kcy5jb25jYXQodGhpcy5nZXRQYXJzZWRQYXJhbXMoZXh0cmFzKSksIGV4dHJhcyk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2VQcm92aWRlci5kaXNwb3NlKHRoaXMuY29uc3RydWN0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcGFyYW1zQ2hhbmdlKHBhcmFtczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSkge1xyXG4gICAgICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xyXG4gICAgICAgIHRoaXMub25QYXJhbXNDaGFuZ2VkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBxdWVyeVBhcmFtc0NoYW5nZShxdWVyeVBhcmFtczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSkge1xyXG4gICAgICAgIHRoaXMucXVlcnlQYXJhbXMgPSBxdWVyeVBhcmFtcztcclxuICAgICAgICB0aGlzLm9uUXVlcnlQYXJhbXNDaGFuZ2VkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRQYXJzZWRQYXJhbXMoZXh0cmFzOiBFeHRlbmROYXZpZ2F0aW9uRXh0cmFzKSB7XHJcbiAgICAgICAgbGV0IHBhcmFtcyA9IFtdXHJcbiAgICAgICAgaWYgKGV4dHJhcyAmJiBleHRyYXMucGFyYW1zKSB7XHJcbiAgICAgICAgICAgIHZhciBpc0VuY3J5cHRpb24gPSByb3V0ZUNvbnRhaW5lci5nZXQoKS51cmxFbmNyeXB0aW9uO1xyXG4gICAgICAgICAgICBleHRyYXMucGFyYW1zLmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZW5jb2RlID0gaXNFbmNyeXB0aW9uID8gZW5jb2Rlci5lbmNvZGUodCkgOiB0O1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zLnB1c2goZW5jb2RlKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhcmFtc1xyXG4gICAgfVxyXG59Il19